#!/usr/bin/env python
PACKAGE = "feature_utils"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

detector_enum = gen.enum([ gen.const("DOG",      int_t, 0, "DOG Detector"),
gen.const("FAST",     int_t, 1, "FAST Detector")],
"An enum of available feature detectors")

gen.add("feature_detector", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 1, edit_method=detector_enum)
descriptor_enum = gen.enum([ gen.const("SURF",      int_t, 0, "SURF Descriptor"),
gen.const("FREAK",     int_t, 1, "FREAK Descriptor"),
gen.const("PATCH",      int_t, 2, "PATCH Descriptor"),
gen.const("BRISK",      int_t, 3, "BRISK Descriptor"),
gen.const("SIFT",      int_t, 4, "SIFT Descriptor")],
"An enum of available feature descriptors")

gen.add("feature_descriptor", int_t, 0, "A size parameter which is edited via an enum", 2, 0, 4, edit_method=descriptor_enum)

gen.add("pyramid_levels",   int_t,   0, "Number of image pyramid levels",  4, 1, 8)
gen.add("pyramid_level_factor",   double_t,   0, "Scale factor between pyramid levels", 0.8, 0.1, 1.0)

gen.add("match_error_threshold",    double_t,    0, "Pixel error. SAD score given by this value times PatchWide*PatchHeight", 30.0,  1.0, 100)
gen.add("match_error_factor",    double_t,    0, "Factor by which a match is selected. Best:SecondBest errors are compared", 1.2,  0, 5.0)

gen.add("canonical_patch_size",   int_t,   0, "Canonical Patch size",  9, 5, 21)
gen.add("feature_matching_threshold",    int_t,    0, "Max hamming distance to consider a match (FREAK and BRISK)", 100,  0, 300)

exit(gen.generate(PACKAGE, "feature_utils", "Feature"))
