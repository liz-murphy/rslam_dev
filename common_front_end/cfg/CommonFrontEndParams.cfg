#!/usr/bin/env python
PACKAGE = "common_front_end"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("initial_search_radius",    int_t,    0, "Initial search radius", 20,  5, 50)
gen.add("search_radius_grow_rate",    double_t,    0, "Search radius grow rate", 1.2,  1.1, 5.0)
gen.add("num_match_in_time_attempts",    int_t,    0, "Number of match in time attempts", 3,  1, 5)
gen.add("num_features_to_track",    int_t,    0, "Desired number of features to track", 128,  1, 512)
gen.add("max_features_in_cell",    int_t,    0, "Max number of features allowed in each cell", 20,  3, 50)
gen.add("num_quadtree_levels",    int_t,    0, "Desired number of QuadTree levels", 5,  1, 20)
gen.add("do_subpixel_refinement",    bool_t,    0, "Do subpixel tracking", True)
gen.add("esm_threshold",    double_t,    0, "Max ESM error to consider a valid match", 18.0,  1, 100)
gen.add("esm_subpixel_threshold",    double_t,    0, "Max ESM correction to consider a valid match", 1.2,  0, 5.0)
gen.add("esm_use_search_roi",    bool_t,    0, "Extract warped search region for ESM", False)

gen.add("do_jealous_matching",    bool_t,    0, "Make sure StartNewLandmarks does jealous matching", False)
gen.add("do_marginalization",    bool_t,    0, "Marginalize instead of condition", False)

gen.add("tracker_hold_depth",    int_t,    0, "Dept of search for holding frames in memory for tracking", 50,  0, 100)
gen.add("ransac_seed",    int_t,    0, "RANSAC random seed", 1,  1, 100)
gen.add("ransac_max_trials",    int_t,    0, "Max number of attempts to find a good enough model", 500,  30, 1000)
gen.add("ransac_outlier_threshold", double_t, 0, "RANSAC outlier threshold", 1.2, 0.8, 3.0)
gen.add("ransac_probability",    double_t,    0, "RANSAC probability limit for exit",0.99, 0.8, 1.0)

gen.add("use_feature_buckets",   bool_t,   0, "Use grid to distribute feature detection evenly across the images",  True)

gen.add("fast_harris_score_threshold",   double_t,   0, "FAST Harris score threshold", 100000, 100, 1e6 )

gen.add("timer_window_size",   int_t,   0, "Timer window size", 40, 5, 100)
gen.add("do_keyframing",   bool_t,   0, "Do keyframing",  True)
gen.add("do_bundle_adjustment",   bool_t,   0, "Do bundle adjustment",  True)
gen.add("do_async_bundle_adjustment",   bool_t,   0, "Do async bundle adjustment",  True)
gen.add("do_adaptive_window",   bool_t,   0, "Do adaptive window ba",  True)
gen.add("async_ba_window_size",    int_t,    0, "Asynchronous BA window size", 30,  10, 100)
gen.add("ba_window_size",    int_t,    0, "Asynchronous BA window size", 15,  10, 100)
gen.add("ba_num_iter_adaptive",    int_t,    0, "Number of iterations of adaptive window BA", 10,  1, 30)
gen.add("ba_num_iter",    int_t,    0, "Number of iterations of BA", 2,  1, 30)

exit(gen.generate(PACKAGE, "common_front_end", "CommonFrontEndParams"))
