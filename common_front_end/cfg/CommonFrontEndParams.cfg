#!/usr/bin/env python
PACKAGE = "common_front_end"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("initial_search_radius",    int_t,    0, "Initial search radius", 20,  5, 50)
gen.add("search_radius_grow_rate",    double_t,    0, "Search radius grow rate", 1.2,  1.1, 5.0)
gen.add("num_match_in_time_attempts",    int_t,    0, "Number of match in time attempts", 3,  1, 5)
gen.add("num_features_to_track",    int_t,    0, "Desired number of features to track", 128,  1, 512)
gen.add("feature_matching_threshold",    int_t,    0, "Max hamming distance to consider a match (FREAK and BRISK)", 100,  0, 300)
gen.add("match_error_threshold",    double_t,    0, "Pixel error. SAD score given by this value times PatchWide*PatchHeight", 30.0,  1.0, 100)
gen.add("match_error_factor",    double_t,    0, "Factor by which a match is selected. Best:SecondBest errors are compared", 1.2,  0, 5.0)
gen.add("max_features_in_cell",    int_t,    0, "Max number of features allowed in each cell", 20,  3, 50)
gen.add("num_quadtree_levels",    int_t,    0, "Desired number of QuadTree levels", 5,  1, 20)
gen.add("do_subpixel_refinement",    bool_t,    0, "Do subpixel tracking", True)
gen.add("esm_threshold",    double_t,    0, "Max ESM error to consider a valid match", 18.0,  1, 100)
gen.add("esm_subpixel_threshold",    double_t,    0, "Max ESM correction to consider a valid match", 1.2,  0, 5.0)
gen.add("esm_use_search_roi",    bool_t,    0, "Extract warped search region for ESM", False)

gen.add("do_jealous_matching",    bool_t,    0, "Make sure StartNewLandmarks does jealous matching", False)
gen.add("do_marginalization",    bool_t,    0, "Marginalize instead of condition", False)

gen.add("tracker_hold_depth",    int_t,    0, "Dept of search for holding frames in memory for tracking", 50,  0, 100)
gen.add("ransac_seed",    int_t,    0, "RANSAC random seed", 1,  1, 100)
gen.add("ransac_max_trials",    int_t,    0, "Max number of attempts to find a good enough model", 500,  30, 1000)
gen.add("ransac_outlier_threshold", double_t, 0, "RANSAC outlier threshold", 1.2, 0.8, 3.0)
gen.add("ransac_probability",    double_t,    0, "RANSAC probability limit for exit",0.99, 0.8, 1.0)

gen.add("use_feature_buckets",   bool_t,   0, "Use grid to distribute feature detection evenly across the images",  True)

detector_enum = gen.enum([ gen.const("DOG",      int_t, 0, "DOG Detector"),
                       gen.const("FAST",     int_t, 1, "FAST Detector")],
                     "An enum of available feature detectors")

gen.add("feature_detector", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 1, edit_method=detector_enum)


descriptor_enum = gen.enum([ gen.const("SURF",      int_t, 0, "SURF Descriptor"),
                       gen.const("FREAK",     int_t, 1, "FREAK Descriptor"),
                       gen.const("PATCH",      int_t, 2, "PATCH Descriptor"),
                       gen.const("BRISK",      int_t, 3, "BRISK Descriptor"),
                       gen.const("SIFT",      int_t, 4, "SIFT Descriptor")],
                     "An enum of available feature descriptors")

gen.add("feature_descriptor", int_t, 0, "A size parameter which is edited via an enum", 2, 0, 4, edit_method=descriptor_enum)

gen.add("dog_threshold",   double_t,   0, "DOG Threshold",  0.04, 0.01, 0.2)
gen.add("dog_edge_threshold",   double_t,   0, "DOG edge Threshold",  10.0, 0, 30)
gen.add("dog_octaves",   int_t,   0, "DOG Octaves", 3, 1, 16)
gen.add("dog_sigma",   double_t,   0, "DOG sigma", 1.6, 1.0, 10.0 )

gen.add("fast_harris_score_threshold",   double_t,   0, "FAST Harris score threshold", 10000, 100, 1e6 )

gen.add("pyramid_levels",   int_t,   0, "Number of image pyramid levels",  4, 1, 8)
gen.add("pyramid_level_factor",   double_t,   0, "Scale factor between pyramid levels", 0.8, 0.1, 1.0)

exit(gen.generate(PACKAGE, "common_front_end", "CommonFrontEndParams"))
