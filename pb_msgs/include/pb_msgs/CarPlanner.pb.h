// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarPlanner.proto

#ifndef PROTOBUF_CarPlanner_2eproto__INCLUDED
#define PROTOBUF_CarPlanner_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CarPlanner_2eproto();
void protobuf_AssignDesc_CarPlanner_2eproto();
void protobuf_ShutdownFile_CarPlanner_2eproto();

class PlannerConfigMsg;
class PlannerPolicyMsg;
class PlannerStatusMsg;
class PlannerHeightmapMsg;
class PlannerMotionSampleMsg;
class PlannerSplineMsg;
class RegisterPlannerReqMsg;
class RegisterPlannerRepMsg;

// ===================================================================

class PlannerConfigMsg : public ::google::protobuf::Message {
 public:
  PlannerConfigMsg();
  virtual ~PlannerConfigMsg();

  PlannerConfigMsg(const PlannerConfigMsg& from);

  inline PlannerConfigMsg& operator=(const PlannerConfigMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerConfigMsg& default_instance();

  void Swap(PlannerConfigMsg* other);

  // implements Message ----------------------------------------------

  PlannerConfigMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlannerConfigMsg& from);
  void MergeFrom(const PlannerConfigMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double start_param = 1 [packed = true];
  inline int start_param_size() const;
  inline void clear_start_param();
  static const int kStartParamFieldNumber = 1;
  inline double start_param(int index) const;
  inline void set_start_param(int index, double value);
  inline void add_start_param(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      start_param() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_start_param();

  // repeated double goal_param = 2 [packed = true];
  inline int goal_param_size() const;
  inline void clear_goal_param();
  static const int kGoalParamFieldNumber = 2;
  inline double goal_param(int index) const;
  inline void set_goal_param(int index, double value);
  inline void add_goal_param(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      goal_param() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_goal_param();

  // @@protoc_insertion_point(class_scope:pb.PlannerConfigMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > start_param_;
  mutable int _start_param_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > goal_param_;
  mutable int _goal_param_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CarPlanner_2eproto();
  friend void protobuf_AssignDesc_CarPlanner_2eproto();
  friend void protobuf_ShutdownFile_CarPlanner_2eproto();

  void InitAsDefaultInstance();
  static PlannerConfigMsg* default_instance_;
};
// -------------------------------------------------------------------

class PlannerPolicyMsg : public ::google::protobuf::Message {
 public:
  PlannerPolicyMsg();
  virtual ~PlannerPolicyMsg();

  PlannerPolicyMsg(const PlannerPolicyMsg& from);

  inline PlannerPolicyMsg& operator=(const PlannerPolicyMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerPolicyMsg& default_instance();

  void Swap(PlannerPolicyMsg* other);

  // implements Message ----------------------------------------------

  PlannerPolicyMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlannerPolicyMsg& from);
  void MergeFrom(const PlannerPolicyMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double force = 1 [packed = true];
  inline int force_size() const;
  inline void clear_force();
  static const int kForceFieldNumber = 1;
  inline double force(int index) const;
  inline void set_force(int index, double value);
  inline void add_force(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      force() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_force();

  // repeated double phi = 2 [packed = true];
  inline int phi_size() const;
  inline void clear_phi();
  static const int kPhiFieldNumber = 2;
  inline double phi(int index) const;
  inline void set_phi(int index, double value);
  inline void add_phi(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      phi() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_phi();

  // repeated double time = 3 [packed = true];
  inline int time_size() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline double time(int index) const;
  inline void set_time(int index, double value);
  inline void add_time(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      time() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_time();

  // @@protoc_insertion_point(class_scope:pb.PlannerPolicyMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > force_;
  mutable int _force_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > phi_;
  mutable int _phi_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > time_;
  mutable int _time_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CarPlanner_2eproto();
  friend void protobuf_AssignDesc_CarPlanner_2eproto();
  friend void protobuf_ShutdownFile_CarPlanner_2eproto();

  void InitAsDefaultInstance();
  static PlannerPolicyMsg* default_instance_;
};
// -------------------------------------------------------------------

class PlannerStatusMsg : public ::google::protobuf::Message {
 public:
  PlannerStatusMsg();
  virtual ~PlannerStatusMsg();

  PlannerStatusMsg(const PlannerStatusMsg& from);

  inline PlannerStatusMsg& operator=(const PlannerStatusMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerStatusMsg& default_instance();

  void Swap(PlannerStatusMsg* other);

  // implements Message ----------------------------------------------

  PlannerStatusMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlannerStatusMsg& from);
  void MergeFrom(const PlannerStatusMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool config_set = 1;
  inline bool has_config_set() const;
  inline void clear_config_set();
  static const int kConfigSetFieldNumber = 1;
  inline bool config_set() const;
  inline void set_config_set(bool value);

  // required bool mesh_set = 2;
  inline bool has_mesh_set() const;
  inline void clear_mesh_set();
  static const int kMeshSetFieldNumber = 2;
  inline bool mesh_set() const;
  inline void set_mesh_set(bool value);

  // required bool policy_set = 3;
  inline bool has_policy_set() const;
  inline void clear_policy_set();
  static const int kPolicySetFieldNumber = 3;
  inline bool policy_set() const;
  inline void set_policy_set(bool value);

  // required bool policy_failed = 4;
  inline bool has_policy_failed() const;
  inline void clear_policy_failed();
  static const int kPolicyFailedFieldNumber = 4;
  inline bool policy_failed() const;
  inline void set_policy_failed(bool value);

  // @@protoc_insertion_point(class_scope:pb.PlannerStatusMsg)
 private:
  inline void set_has_config_set();
  inline void clear_has_config_set();
  inline void set_has_mesh_set();
  inline void clear_has_mesh_set();
  inline void set_has_policy_set();
  inline void clear_has_policy_set();
  inline void set_has_policy_failed();
  inline void clear_has_policy_failed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool config_set_;
  bool mesh_set_;
  bool policy_set_;
  bool policy_failed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CarPlanner_2eproto();
  friend void protobuf_AssignDesc_CarPlanner_2eproto();
  friend void protobuf_ShutdownFile_CarPlanner_2eproto();

  void InitAsDefaultInstance();
  static PlannerStatusMsg* default_instance_;
};
// -------------------------------------------------------------------

class PlannerHeightmapMsg : public ::google::protobuf::Message {
 public:
  PlannerHeightmapMsg();
  virtual ~PlannerHeightmapMsg();

  PlannerHeightmapMsg(const PlannerHeightmapMsg& from);

  inline PlannerHeightmapMsg& operator=(const PlannerHeightmapMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerHeightmapMsg& default_instance();

  void Swap(PlannerHeightmapMsg* other);

  // implements Message ----------------------------------------------

  PlannerHeightmapMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlannerHeightmapMsg& from);
  void MergeFrom(const PlannerHeightmapMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 row_count = 1;
  inline bool has_row_count() const;
  inline void clear_row_count();
  static const int kRowCountFieldNumber = 1;
  inline ::google::protobuf::int32 row_count() const;
  inline void set_row_count(::google::protobuf::int32 value);

  // required int32 col_count = 2;
  inline bool has_col_count() const;
  inline void clear_col_count();
  static const int kColCountFieldNumber = 2;
  inline ::google::protobuf::int32 col_count() const;
  inline void set_col_count(::google::protobuf::int32 value);

  // repeated double x_data = 3 [packed = true];
  inline int x_data_size() const;
  inline void clear_x_data();
  static const int kXDataFieldNumber = 3;
  inline double x_data(int index) const;
  inline void set_x_data(int index, double value);
  inline void add_x_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      x_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_x_data();

  // repeated double y_data = 4 [packed = true];
  inline int y_data_size() const;
  inline void clear_y_data();
  static const int kYDataFieldNumber = 4;
  inline double y_data(int index) const;
  inline void set_y_data(int index, double value);
  inline void add_y_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      y_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_y_data();

  // repeated double z_data = 5 [packed = true];
  inline int z_data_size() const;
  inline void clear_z_data();
  static const int kZDataFieldNumber = 5;
  inline double z_data(int index) const;
  inline void set_z_data(int index, double value);
  inline void add_z_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      z_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_z_data();

  // @@protoc_insertion_point(class_scope:pb.PlannerHeightmapMsg)
 private:
  inline void set_has_row_count();
  inline void clear_has_row_count();
  inline void set_has_col_count();
  inline void clear_has_col_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 row_count_;
  ::google::protobuf::int32 col_count_;
  ::google::protobuf::RepeatedField< double > x_data_;
  mutable int _x_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > y_data_;
  mutable int _y_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > z_data_;
  mutable int _z_data_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CarPlanner_2eproto();
  friend void protobuf_AssignDesc_CarPlanner_2eproto();
  friend void protobuf_ShutdownFile_CarPlanner_2eproto();

  void InitAsDefaultInstance();
  static PlannerHeightmapMsg* default_instance_;
};
// -------------------------------------------------------------------

class PlannerMotionSampleMsg : public ::google::protobuf::Message {
 public:
  PlannerMotionSampleMsg();
  virtual ~PlannerMotionSampleMsg();

  PlannerMotionSampleMsg(const PlannerMotionSampleMsg& from);

  inline PlannerMotionSampleMsg& operator=(const PlannerMotionSampleMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerMotionSampleMsg& default_instance();

  void Swap(PlannerMotionSampleMsg* other);

  // implements Message ----------------------------------------------

  PlannerMotionSampleMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlannerMotionSampleMsg& from);
  void MergeFrom(const PlannerMotionSampleMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double x = 1 [packed = true];
  inline int x_size() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x(int index) const;
  inline void set_x(int index, double value);
  inline void add_x(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      x() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_x();

  // repeated double y = 2 [packed = true];
  inline int y_size() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y(int index) const;
  inline void set_y(int index, double value);
  inline void add_y(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      y() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_y();

  // repeated double z = 3 [packed = true];
  inline int z_size() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z(int index) const;
  inline void set_z(int index, double value);
  inline void add_z(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      z() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_z();

  // repeated double r = 4 [packed = true];
  inline int r_size() const;
  inline void clear_r();
  static const int kRFieldNumber = 4;
  inline double r(int index) const;
  inline void set_r(int index, double value);
  inline void add_r(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      r() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_r();

  // repeated double p = 5 [packed = true];
  inline int p_size() const;
  inline void clear_p();
  static const int kPFieldNumber = 5;
  inline double p(int index) const;
  inline void set_p(int index, double value);
  inline void add_p(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      p() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_p();

  // repeated double q = 6 [packed = true];
  inline int q_size() const;
  inline void clear_q();
  static const int kQFieldNumber = 6;
  inline double q(int index) const;
  inline void set_q(int index, double value);
  inline void add_q(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      q() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_q();

  // repeated double velocity = 7 [packed = true];
  inline int velocity_size() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 7;
  inline double velocity(int index) const;
  inline void set_velocity(int index, double value);
  inline void add_velocity(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      velocity() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_velocity();

  // @@protoc_insertion_point(class_scope:pb.PlannerMotionSampleMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > y_;
  mutable int _y_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > z_;
  mutable int _z_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > r_;
  mutable int _r_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > p_;
  mutable int _p_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > q_;
  mutable int _q_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > velocity_;
  mutable int _velocity_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_CarPlanner_2eproto();
  friend void protobuf_AssignDesc_CarPlanner_2eproto();
  friend void protobuf_ShutdownFile_CarPlanner_2eproto();

  void InitAsDefaultInstance();
  static PlannerMotionSampleMsg* default_instance_;
};
// -------------------------------------------------------------------

class PlannerSplineMsg : public ::google::protobuf::Message {
 public:
  PlannerSplineMsg();
  virtual ~PlannerSplineMsg();

  PlannerSplineMsg(const PlannerSplineMsg& from);

  inline PlannerSplineMsg& operator=(const PlannerSplineMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerSplineMsg& default_instance();

  void Swap(PlannerSplineMsg* other);

  // implements Message ----------------------------------------------

  PlannerSplineMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlannerSplineMsg& from);
  void MergeFrom(const PlannerSplineMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double x_values = 1 [packed = true];
  inline int x_values_size() const;
  inline void clear_x_values();
  static const int kXValuesFieldNumber = 1;
  inline double x_values(int index) const;
  inline void set_x_values(int index, double value);
  inline void add_x_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      x_values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_x_values();

  // repeated double y_values = 2 [packed = true];
  inline int y_values_size() const;
  inline void clear_y_values();
  static const int kYValuesFieldNumber = 2;
  inline double y_values(int index) const;
  inline void set_y_values(int index, double value);
  inline void add_y_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      y_values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_y_values();

  // repeated double solved_goal_pose = 3 [packed = true];
  inline int solved_goal_pose_size() const;
  inline void clear_solved_goal_pose();
  static const int kSolvedGoalPoseFieldNumber = 3;
  inline double solved_goal_pose(int index) const;
  inline void set_solved_goal_pose(int index, double value);
  inline void add_solved_goal_pose(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      solved_goal_pose() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_solved_goal_pose();

  // @@protoc_insertion_point(class_scope:pb.PlannerSplineMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > x_values_;
  mutable int _x_values_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > y_values_;
  mutable int _y_values_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > solved_goal_pose_;
  mutable int _solved_goal_pose_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CarPlanner_2eproto();
  friend void protobuf_AssignDesc_CarPlanner_2eproto();
  friend void protobuf_ShutdownFile_CarPlanner_2eproto();

  void InitAsDefaultInstance();
  static PlannerSplineMsg* default_instance_;
};
// -------------------------------------------------------------------

class RegisterPlannerReqMsg : public ::google::protobuf::Message {
 public:
  RegisterPlannerReqMsg();
  virtual ~RegisterPlannerReqMsg();

  RegisterPlannerReqMsg(const RegisterPlannerReqMsg& from);

  inline RegisterPlannerReqMsg& operator=(const RegisterPlannerReqMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterPlannerReqMsg& default_instance();

  void Swap(RegisterPlannerReqMsg* other);

  // implements Message ----------------------------------------------

  RegisterPlannerReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterPlannerReqMsg& from);
  void MergeFrom(const RegisterPlannerReqMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PlannerConfigMsg config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline const ::pb::PlannerConfigMsg& config() const;
  inline ::pb::PlannerConfigMsg* mutable_config();
  inline ::pb::PlannerConfigMsg* release_config();
  inline void set_allocated_config(::pb::PlannerConfigMsg* config);

  // optional .pb.PlannerPolicyMsg policy = 2;
  inline bool has_policy() const;
  inline void clear_policy();
  static const int kPolicyFieldNumber = 2;
  inline const ::pb::PlannerPolicyMsg& policy() const;
  inline ::pb::PlannerPolicyMsg* mutable_policy();
  inline ::pb::PlannerPolicyMsg* release_policy();
  inline void set_allocated_policy(::pb::PlannerPolicyMsg* policy);

  // optional .pb.PlannerStatusMsg status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline const ::pb::PlannerStatusMsg& status() const;
  inline ::pb::PlannerStatusMsg* mutable_status();
  inline ::pb::PlannerStatusMsg* release_status();
  inline void set_allocated_status(::pb::PlannerStatusMsg* status);

  // optional .pb.PlannerHeightmapMsg heightmap = 4;
  inline bool has_heightmap() const;
  inline void clear_heightmap();
  static const int kHeightmapFieldNumber = 4;
  inline const ::pb::PlannerHeightmapMsg& heightmap() const;
  inline ::pb::PlannerHeightmapMsg* mutable_heightmap();
  inline ::pb::PlannerHeightmapMsg* release_heightmap();
  inline void set_allocated_heightmap(::pb::PlannerHeightmapMsg* heightmap);

  // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
  inline bool has_motion_sample() const;
  inline void clear_motion_sample();
  static const int kMotionSampleFieldNumber = 5;
  inline const ::pb::PlannerMotionSampleMsg& motion_sample() const;
  inline ::pb::PlannerMotionSampleMsg* mutable_motion_sample();
  inline ::pb::PlannerMotionSampleMsg* release_motion_sample();
  inline void set_allocated_motion_sample(::pb::PlannerMotionSampleMsg* motion_sample);

  // optional .pb.PlannerSplineMsg spline = 6;
  inline bool has_spline() const;
  inline void clear_spline();
  static const int kSplineFieldNumber = 6;
  inline const ::pb::PlannerSplineMsg& spline() const;
  inline ::pb::PlannerSplineMsg* mutable_spline();
  inline ::pb::PlannerSplineMsg* release_spline();
  inline void set_allocated_spline(::pb::PlannerSplineMsg* spline);

  // optional uint32 tau = 7;
  inline bool has_tau() const;
  inline void clear_tau();
  static const int kTauFieldNumber = 7;
  inline ::google::protobuf::uint32 tau() const;
  inline void set_tau(::google::protobuf::uint32 value);

  // required string req_node_name = 8;
  inline bool has_req_node_name() const;
  inline void clear_req_node_name();
  static const int kReqNodeNameFieldNumber = 8;
  inline const ::std::string& req_node_name() const;
  inline void set_req_node_name(const ::std::string& value);
  inline void set_req_node_name(const char* value);
  inline void set_req_node_name(const char* value, size_t size);
  inline ::std::string* mutable_req_node_name();
  inline ::std::string* release_req_node_name();
  inline void set_allocated_req_node_name(::std::string* req_node_name);

  // @@protoc_insertion_point(class_scope:pb.RegisterPlannerReqMsg)
 private:
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_policy();
  inline void clear_has_policy();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_heightmap();
  inline void clear_has_heightmap();
  inline void set_has_motion_sample();
  inline void clear_has_motion_sample();
  inline void set_has_spline();
  inline void clear_has_spline();
  inline void set_has_tau();
  inline void clear_has_tau();
  inline void set_has_req_node_name();
  inline void clear_has_req_node_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::PlannerConfigMsg* config_;
  ::pb::PlannerPolicyMsg* policy_;
  ::pb::PlannerStatusMsg* status_;
  ::pb::PlannerHeightmapMsg* heightmap_;
  ::pb::PlannerMotionSampleMsg* motion_sample_;
  ::pb::PlannerSplineMsg* spline_;
  ::std::string* req_node_name_;
  ::google::protobuf::uint32 tau_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_CarPlanner_2eproto();
  friend void protobuf_AssignDesc_CarPlanner_2eproto();
  friend void protobuf_ShutdownFile_CarPlanner_2eproto();

  void InitAsDefaultInstance();
  static RegisterPlannerReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class RegisterPlannerRepMsg : public ::google::protobuf::Message {
 public:
  RegisterPlannerRepMsg();
  virtual ~RegisterPlannerRepMsg();

  RegisterPlannerRepMsg(const RegisterPlannerRepMsg& from);

  inline RegisterPlannerRepMsg& operator=(const RegisterPlannerRepMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterPlannerRepMsg& default_instance();

  void Swap(RegisterPlannerRepMsg* other);

  // implements Message ----------------------------------------------

  RegisterPlannerRepMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterPlannerRepMsg& from);
  void MergeFrom(const RegisterPlannerRepMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PlannerConfigMsg config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline const ::pb::PlannerConfigMsg& config() const;
  inline ::pb::PlannerConfigMsg* mutable_config();
  inline ::pb::PlannerConfigMsg* release_config();
  inline void set_allocated_config(::pb::PlannerConfigMsg* config);

  // optional .pb.PlannerPolicyMsg policy = 2;
  inline bool has_policy() const;
  inline void clear_policy();
  static const int kPolicyFieldNumber = 2;
  inline const ::pb::PlannerPolicyMsg& policy() const;
  inline ::pb::PlannerPolicyMsg* mutable_policy();
  inline ::pb::PlannerPolicyMsg* release_policy();
  inline void set_allocated_policy(::pb::PlannerPolicyMsg* policy);

  // optional .pb.PlannerStatusMsg status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline const ::pb::PlannerStatusMsg& status() const;
  inline ::pb::PlannerStatusMsg* mutable_status();
  inline ::pb::PlannerStatusMsg* release_status();
  inline void set_allocated_status(::pb::PlannerStatusMsg* status);

  // optional .pb.PlannerHeightmapMsg heightmap = 4;
  inline bool has_heightmap() const;
  inline void clear_heightmap();
  static const int kHeightmapFieldNumber = 4;
  inline const ::pb::PlannerHeightmapMsg& heightmap() const;
  inline ::pb::PlannerHeightmapMsg* mutable_heightmap();
  inline ::pb::PlannerHeightmapMsg* release_heightmap();
  inline void set_allocated_heightmap(::pb::PlannerHeightmapMsg* heightmap);

  // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
  inline bool has_motion_sample() const;
  inline void clear_motion_sample();
  static const int kMotionSampleFieldNumber = 5;
  inline const ::pb::PlannerMotionSampleMsg& motion_sample() const;
  inline ::pb::PlannerMotionSampleMsg* mutable_motion_sample();
  inline ::pb::PlannerMotionSampleMsg* release_motion_sample();
  inline void set_allocated_motion_sample(::pb::PlannerMotionSampleMsg* motion_sample);

  // optional .pb.PlannerSplineMsg spline = 6;
  inline bool has_spline() const;
  inline void clear_spline();
  static const int kSplineFieldNumber = 6;
  inline const ::pb::PlannerSplineMsg& spline() const;
  inline ::pb::PlannerSplineMsg* mutable_spline();
  inline ::pb::PlannerSplineMsg* release_spline();
  inline void set_allocated_spline(::pb::PlannerSplineMsg* spline);

  // optional uint32 success = 7;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 7;
  inline ::google::protobuf::uint32 success() const;
  inline void set_success(::google::protobuf::uint32 value);

  // optional uint32 tau = 8;
  inline bool has_tau() const;
  inline void clear_tau();
  static const int kTauFieldNumber = 8;
  inline ::google::protobuf::uint32 tau() const;
  inline void set_tau(::google::protobuf::uint32 value);

  // optional string rep_node_name = 9;
  inline bool has_rep_node_name() const;
  inline void clear_rep_node_name();
  static const int kRepNodeNameFieldNumber = 9;
  inline const ::std::string& rep_node_name() const;
  inline void set_rep_node_name(const ::std::string& value);
  inline void set_rep_node_name(const char* value);
  inline void set_rep_node_name(const char* value, size_t size);
  inline ::std::string* mutable_rep_node_name();
  inline ::std::string* release_rep_node_name();
  inline void set_allocated_rep_node_name(::std::string* rep_node_name);

  // @@protoc_insertion_point(class_scope:pb.RegisterPlannerRepMsg)
 private:
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_policy();
  inline void clear_has_policy();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_heightmap();
  inline void clear_has_heightmap();
  inline void set_has_motion_sample();
  inline void clear_has_motion_sample();
  inline void set_has_spline();
  inline void clear_has_spline();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_tau();
  inline void clear_has_tau();
  inline void set_has_rep_node_name();
  inline void clear_has_rep_node_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::PlannerConfigMsg* config_;
  ::pb::PlannerPolicyMsg* policy_;
  ::pb::PlannerStatusMsg* status_;
  ::pb::PlannerHeightmapMsg* heightmap_;
  ::pb::PlannerMotionSampleMsg* motion_sample_;
  ::pb::PlannerSplineMsg* spline_;
  ::google::protobuf::uint32 success_;
  ::google::protobuf::uint32 tau_;
  ::std::string* rep_node_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_CarPlanner_2eproto();
  friend void protobuf_AssignDesc_CarPlanner_2eproto();
  friend void protobuf_ShutdownFile_CarPlanner_2eproto();

  void InitAsDefaultInstance();
  static RegisterPlannerRepMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PlannerConfigMsg

// repeated double start_param = 1 [packed = true];
inline int PlannerConfigMsg::start_param_size() const {
  return start_param_.size();
}
inline void PlannerConfigMsg::clear_start_param() {
  start_param_.Clear();
}
inline double PlannerConfigMsg::start_param(int index) const {
  return start_param_.Get(index);
}
inline void PlannerConfigMsg::set_start_param(int index, double value) {
  start_param_.Set(index, value);
}
inline void PlannerConfigMsg::add_start_param(double value) {
  start_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerConfigMsg::start_param() const {
  return start_param_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerConfigMsg::mutable_start_param() {
  return &start_param_;
}

// repeated double goal_param = 2 [packed = true];
inline int PlannerConfigMsg::goal_param_size() const {
  return goal_param_.size();
}
inline void PlannerConfigMsg::clear_goal_param() {
  goal_param_.Clear();
}
inline double PlannerConfigMsg::goal_param(int index) const {
  return goal_param_.Get(index);
}
inline void PlannerConfigMsg::set_goal_param(int index, double value) {
  goal_param_.Set(index, value);
}
inline void PlannerConfigMsg::add_goal_param(double value) {
  goal_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerConfigMsg::goal_param() const {
  return goal_param_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerConfigMsg::mutable_goal_param() {
  return &goal_param_;
}

// -------------------------------------------------------------------

// PlannerPolicyMsg

// repeated double force = 1 [packed = true];
inline int PlannerPolicyMsg::force_size() const {
  return force_.size();
}
inline void PlannerPolicyMsg::clear_force() {
  force_.Clear();
}
inline double PlannerPolicyMsg::force(int index) const {
  return force_.Get(index);
}
inline void PlannerPolicyMsg::set_force(int index, double value) {
  force_.Set(index, value);
}
inline void PlannerPolicyMsg::add_force(double value) {
  force_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerPolicyMsg::force() const {
  return force_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerPolicyMsg::mutable_force() {
  return &force_;
}

// repeated double phi = 2 [packed = true];
inline int PlannerPolicyMsg::phi_size() const {
  return phi_.size();
}
inline void PlannerPolicyMsg::clear_phi() {
  phi_.Clear();
}
inline double PlannerPolicyMsg::phi(int index) const {
  return phi_.Get(index);
}
inline void PlannerPolicyMsg::set_phi(int index, double value) {
  phi_.Set(index, value);
}
inline void PlannerPolicyMsg::add_phi(double value) {
  phi_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerPolicyMsg::phi() const {
  return phi_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerPolicyMsg::mutable_phi() {
  return &phi_;
}

// repeated double time = 3 [packed = true];
inline int PlannerPolicyMsg::time_size() const {
  return time_.size();
}
inline void PlannerPolicyMsg::clear_time() {
  time_.Clear();
}
inline double PlannerPolicyMsg::time(int index) const {
  return time_.Get(index);
}
inline void PlannerPolicyMsg::set_time(int index, double value) {
  time_.Set(index, value);
}
inline void PlannerPolicyMsg::add_time(double value) {
  time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerPolicyMsg::time() const {
  return time_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerPolicyMsg::mutable_time() {
  return &time_;
}

// -------------------------------------------------------------------

// PlannerStatusMsg

// required bool config_set = 1;
inline bool PlannerStatusMsg::has_config_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlannerStatusMsg::set_has_config_set() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlannerStatusMsg::clear_has_config_set() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlannerStatusMsg::clear_config_set() {
  config_set_ = false;
  clear_has_config_set();
}
inline bool PlannerStatusMsg::config_set() const {
  return config_set_;
}
inline void PlannerStatusMsg::set_config_set(bool value) {
  set_has_config_set();
  config_set_ = value;
}

// required bool mesh_set = 2;
inline bool PlannerStatusMsg::has_mesh_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlannerStatusMsg::set_has_mesh_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlannerStatusMsg::clear_has_mesh_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlannerStatusMsg::clear_mesh_set() {
  mesh_set_ = false;
  clear_has_mesh_set();
}
inline bool PlannerStatusMsg::mesh_set() const {
  return mesh_set_;
}
inline void PlannerStatusMsg::set_mesh_set(bool value) {
  set_has_mesh_set();
  mesh_set_ = value;
}

// required bool policy_set = 3;
inline bool PlannerStatusMsg::has_policy_set() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlannerStatusMsg::set_has_policy_set() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlannerStatusMsg::clear_has_policy_set() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlannerStatusMsg::clear_policy_set() {
  policy_set_ = false;
  clear_has_policy_set();
}
inline bool PlannerStatusMsg::policy_set() const {
  return policy_set_;
}
inline void PlannerStatusMsg::set_policy_set(bool value) {
  set_has_policy_set();
  policy_set_ = value;
}

// required bool policy_failed = 4;
inline bool PlannerStatusMsg::has_policy_failed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlannerStatusMsg::set_has_policy_failed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlannerStatusMsg::clear_has_policy_failed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlannerStatusMsg::clear_policy_failed() {
  policy_failed_ = false;
  clear_has_policy_failed();
}
inline bool PlannerStatusMsg::policy_failed() const {
  return policy_failed_;
}
inline void PlannerStatusMsg::set_policy_failed(bool value) {
  set_has_policy_failed();
  policy_failed_ = value;
}

// -------------------------------------------------------------------

// PlannerHeightmapMsg

// required int32 row_count = 1;
inline bool PlannerHeightmapMsg::has_row_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlannerHeightmapMsg::set_has_row_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlannerHeightmapMsg::clear_has_row_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlannerHeightmapMsg::clear_row_count() {
  row_count_ = 0;
  clear_has_row_count();
}
inline ::google::protobuf::int32 PlannerHeightmapMsg::row_count() const {
  return row_count_;
}
inline void PlannerHeightmapMsg::set_row_count(::google::protobuf::int32 value) {
  set_has_row_count();
  row_count_ = value;
}

// required int32 col_count = 2;
inline bool PlannerHeightmapMsg::has_col_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlannerHeightmapMsg::set_has_col_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlannerHeightmapMsg::clear_has_col_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlannerHeightmapMsg::clear_col_count() {
  col_count_ = 0;
  clear_has_col_count();
}
inline ::google::protobuf::int32 PlannerHeightmapMsg::col_count() const {
  return col_count_;
}
inline void PlannerHeightmapMsg::set_col_count(::google::protobuf::int32 value) {
  set_has_col_count();
  col_count_ = value;
}

// repeated double x_data = 3 [packed = true];
inline int PlannerHeightmapMsg::x_data_size() const {
  return x_data_.size();
}
inline void PlannerHeightmapMsg::clear_x_data() {
  x_data_.Clear();
}
inline double PlannerHeightmapMsg::x_data(int index) const {
  return x_data_.Get(index);
}
inline void PlannerHeightmapMsg::set_x_data(int index, double value) {
  x_data_.Set(index, value);
}
inline void PlannerHeightmapMsg::add_x_data(double value) {
  x_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerHeightmapMsg::x_data() const {
  return x_data_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerHeightmapMsg::mutable_x_data() {
  return &x_data_;
}

// repeated double y_data = 4 [packed = true];
inline int PlannerHeightmapMsg::y_data_size() const {
  return y_data_.size();
}
inline void PlannerHeightmapMsg::clear_y_data() {
  y_data_.Clear();
}
inline double PlannerHeightmapMsg::y_data(int index) const {
  return y_data_.Get(index);
}
inline void PlannerHeightmapMsg::set_y_data(int index, double value) {
  y_data_.Set(index, value);
}
inline void PlannerHeightmapMsg::add_y_data(double value) {
  y_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerHeightmapMsg::y_data() const {
  return y_data_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerHeightmapMsg::mutable_y_data() {
  return &y_data_;
}

// repeated double z_data = 5 [packed = true];
inline int PlannerHeightmapMsg::z_data_size() const {
  return z_data_.size();
}
inline void PlannerHeightmapMsg::clear_z_data() {
  z_data_.Clear();
}
inline double PlannerHeightmapMsg::z_data(int index) const {
  return z_data_.Get(index);
}
inline void PlannerHeightmapMsg::set_z_data(int index, double value) {
  z_data_.Set(index, value);
}
inline void PlannerHeightmapMsg::add_z_data(double value) {
  z_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerHeightmapMsg::z_data() const {
  return z_data_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerHeightmapMsg::mutable_z_data() {
  return &z_data_;
}

// -------------------------------------------------------------------

// PlannerMotionSampleMsg

// repeated double x = 1 [packed = true];
inline int PlannerMotionSampleMsg::x_size() const {
  return x_.size();
}
inline void PlannerMotionSampleMsg::clear_x() {
  x_.Clear();
}
inline double PlannerMotionSampleMsg::x(int index) const {
  return x_.Get(index);
}
inline void PlannerMotionSampleMsg::set_x(int index, double value) {
  x_.Set(index, value);
}
inline void PlannerMotionSampleMsg::add_x(double value) {
  x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerMotionSampleMsg::x() const {
  return x_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerMotionSampleMsg::mutable_x() {
  return &x_;
}

// repeated double y = 2 [packed = true];
inline int PlannerMotionSampleMsg::y_size() const {
  return y_.size();
}
inline void PlannerMotionSampleMsg::clear_y() {
  y_.Clear();
}
inline double PlannerMotionSampleMsg::y(int index) const {
  return y_.Get(index);
}
inline void PlannerMotionSampleMsg::set_y(int index, double value) {
  y_.Set(index, value);
}
inline void PlannerMotionSampleMsg::add_y(double value) {
  y_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerMotionSampleMsg::y() const {
  return y_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerMotionSampleMsg::mutable_y() {
  return &y_;
}

// repeated double z = 3 [packed = true];
inline int PlannerMotionSampleMsg::z_size() const {
  return z_.size();
}
inline void PlannerMotionSampleMsg::clear_z() {
  z_.Clear();
}
inline double PlannerMotionSampleMsg::z(int index) const {
  return z_.Get(index);
}
inline void PlannerMotionSampleMsg::set_z(int index, double value) {
  z_.Set(index, value);
}
inline void PlannerMotionSampleMsg::add_z(double value) {
  z_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerMotionSampleMsg::z() const {
  return z_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerMotionSampleMsg::mutable_z() {
  return &z_;
}

// repeated double r = 4 [packed = true];
inline int PlannerMotionSampleMsg::r_size() const {
  return r_.size();
}
inline void PlannerMotionSampleMsg::clear_r() {
  r_.Clear();
}
inline double PlannerMotionSampleMsg::r(int index) const {
  return r_.Get(index);
}
inline void PlannerMotionSampleMsg::set_r(int index, double value) {
  r_.Set(index, value);
}
inline void PlannerMotionSampleMsg::add_r(double value) {
  r_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerMotionSampleMsg::r() const {
  return r_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerMotionSampleMsg::mutable_r() {
  return &r_;
}

// repeated double p = 5 [packed = true];
inline int PlannerMotionSampleMsg::p_size() const {
  return p_.size();
}
inline void PlannerMotionSampleMsg::clear_p() {
  p_.Clear();
}
inline double PlannerMotionSampleMsg::p(int index) const {
  return p_.Get(index);
}
inline void PlannerMotionSampleMsg::set_p(int index, double value) {
  p_.Set(index, value);
}
inline void PlannerMotionSampleMsg::add_p(double value) {
  p_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerMotionSampleMsg::p() const {
  return p_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerMotionSampleMsg::mutable_p() {
  return &p_;
}

// repeated double q = 6 [packed = true];
inline int PlannerMotionSampleMsg::q_size() const {
  return q_.size();
}
inline void PlannerMotionSampleMsg::clear_q() {
  q_.Clear();
}
inline double PlannerMotionSampleMsg::q(int index) const {
  return q_.Get(index);
}
inline void PlannerMotionSampleMsg::set_q(int index, double value) {
  q_.Set(index, value);
}
inline void PlannerMotionSampleMsg::add_q(double value) {
  q_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerMotionSampleMsg::q() const {
  return q_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerMotionSampleMsg::mutable_q() {
  return &q_;
}

// repeated double velocity = 7 [packed = true];
inline int PlannerMotionSampleMsg::velocity_size() const {
  return velocity_.size();
}
inline void PlannerMotionSampleMsg::clear_velocity() {
  velocity_.Clear();
}
inline double PlannerMotionSampleMsg::velocity(int index) const {
  return velocity_.Get(index);
}
inline void PlannerMotionSampleMsg::set_velocity(int index, double value) {
  velocity_.Set(index, value);
}
inline void PlannerMotionSampleMsg::add_velocity(double value) {
  velocity_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerMotionSampleMsg::velocity() const {
  return velocity_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerMotionSampleMsg::mutable_velocity() {
  return &velocity_;
}

// -------------------------------------------------------------------

// PlannerSplineMsg

// repeated double x_values = 1 [packed = true];
inline int PlannerSplineMsg::x_values_size() const {
  return x_values_.size();
}
inline void PlannerSplineMsg::clear_x_values() {
  x_values_.Clear();
}
inline double PlannerSplineMsg::x_values(int index) const {
  return x_values_.Get(index);
}
inline void PlannerSplineMsg::set_x_values(int index, double value) {
  x_values_.Set(index, value);
}
inline void PlannerSplineMsg::add_x_values(double value) {
  x_values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerSplineMsg::x_values() const {
  return x_values_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerSplineMsg::mutable_x_values() {
  return &x_values_;
}

// repeated double y_values = 2 [packed = true];
inline int PlannerSplineMsg::y_values_size() const {
  return y_values_.size();
}
inline void PlannerSplineMsg::clear_y_values() {
  y_values_.Clear();
}
inline double PlannerSplineMsg::y_values(int index) const {
  return y_values_.Get(index);
}
inline void PlannerSplineMsg::set_y_values(int index, double value) {
  y_values_.Set(index, value);
}
inline void PlannerSplineMsg::add_y_values(double value) {
  y_values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerSplineMsg::y_values() const {
  return y_values_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerSplineMsg::mutable_y_values() {
  return &y_values_;
}

// repeated double solved_goal_pose = 3 [packed = true];
inline int PlannerSplineMsg::solved_goal_pose_size() const {
  return solved_goal_pose_.size();
}
inline void PlannerSplineMsg::clear_solved_goal_pose() {
  solved_goal_pose_.Clear();
}
inline double PlannerSplineMsg::solved_goal_pose(int index) const {
  return solved_goal_pose_.Get(index);
}
inline void PlannerSplineMsg::set_solved_goal_pose(int index, double value) {
  solved_goal_pose_.Set(index, value);
}
inline void PlannerSplineMsg::add_solved_goal_pose(double value) {
  solved_goal_pose_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PlannerSplineMsg::solved_goal_pose() const {
  return solved_goal_pose_;
}
inline ::google::protobuf::RepeatedField< double >*
PlannerSplineMsg::mutable_solved_goal_pose() {
  return &solved_goal_pose_;
}

// -------------------------------------------------------------------

// RegisterPlannerReqMsg

// optional .pb.PlannerConfigMsg config = 1;
inline bool RegisterPlannerReqMsg::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterPlannerReqMsg::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterPlannerReqMsg::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterPlannerReqMsg::clear_config() {
  if (config_ != NULL) config_->::pb::PlannerConfigMsg::Clear();
  clear_has_config();
}
inline const ::pb::PlannerConfigMsg& RegisterPlannerReqMsg::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::pb::PlannerConfigMsg* RegisterPlannerReqMsg::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::pb::PlannerConfigMsg;
  return config_;
}
inline ::pb::PlannerConfigMsg* RegisterPlannerReqMsg::release_config() {
  clear_has_config();
  ::pb::PlannerConfigMsg* temp = config_;
  config_ = NULL;
  return temp;
}
inline void RegisterPlannerReqMsg::set_allocated_config(::pb::PlannerConfigMsg* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// optional .pb.PlannerPolicyMsg policy = 2;
inline bool RegisterPlannerReqMsg::has_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterPlannerReqMsg::set_has_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterPlannerReqMsg::clear_has_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterPlannerReqMsg::clear_policy() {
  if (policy_ != NULL) policy_->::pb::PlannerPolicyMsg::Clear();
  clear_has_policy();
}
inline const ::pb::PlannerPolicyMsg& RegisterPlannerReqMsg::policy() const {
  return policy_ != NULL ? *policy_ : *default_instance_->policy_;
}
inline ::pb::PlannerPolicyMsg* RegisterPlannerReqMsg::mutable_policy() {
  set_has_policy();
  if (policy_ == NULL) policy_ = new ::pb::PlannerPolicyMsg;
  return policy_;
}
inline ::pb::PlannerPolicyMsg* RegisterPlannerReqMsg::release_policy() {
  clear_has_policy();
  ::pb::PlannerPolicyMsg* temp = policy_;
  policy_ = NULL;
  return temp;
}
inline void RegisterPlannerReqMsg::set_allocated_policy(::pb::PlannerPolicyMsg* policy) {
  delete policy_;
  policy_ = policy;
  if (policy) {
    set_has_policy();
  } else {
    clear_has_policy();
  }
}

// optional .pb.PlannerStatusMsg status = 3;
inline bool RegisterPlannerReqMsg::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterPlannerReqMsg::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterPlannerReqMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterPlannerReqMsg::clear_status() {
  if (status_ != NULL) status_->::pb::PlannerStatusMsg::Clear();
  clear_has_status();
}
inline const ::pb::PlannerStatusMsg& RegisterPlannerReqMsg::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::pb::PlannerStatusMsg* RegisterPlannerReqMsg::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::pb::PlannerStatusMsg;
  return status_;
}
inline ::pb::PlannerStatusMsg* RegisterPlannerReqMsg::release_status() {
  clear_has_status();
  ::pb::PlannerStatusMsg* temp = status_;
  status_ = NULL;
  return temp;
}
inline void RegisterPlannerReqMsg::set_allocated_status(::pb::PlannerStatusMsg* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
}

// optional .pb.PlannerHeightmapMsg heightmap = 4;
inline bool RegisterPlannerReqMsg::has_heightmap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterPlannerReqMsg::set_has_heightmap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterPlannerReqMsg::clear_has_heightmap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterPlannerReqMsg::clear_heightmap() {
  if (heightmap_ != NULL) heightmap_->::pb::PlannerHeightmapMsg::Clear();
  clear_has_heightmap();
}
inline const ::pb::PlannerHeightmapMsg& RegisterPlannerReqMsg::heightmap() const {
  return heightmap_ != NULL ? *heightmap_ : *default_instance_->heightmap_;
}
inline ::pb::PlannerHeightmapMsg* RegisterPlannerReqMsg::mutable_heightmap() {
  set_has_heightmap();
  if (heightmap_ == NULL) heightmap_ = new ::pb::PlannerHeightmapMsg;
  return heightmap_;
}
inline ::pb::PlannerHeightmapMsg* RegisterPlannerReqMsg::release_heightmap() {
  clear_has_heightmap();
  ::pb::PlannerHeightmapMsg* temp = heightmap_;
  heightmap_ = NULL;
  return temp;
}
inline void RegisterPlannerReqMsg::set_allocated_heightmap(::pb::PlannerHeightmapMsg* heightmap) {
  delete heightmap_;
  heightmap_ = heightmap;
  if (heightmap) {
    set_has_heightmap();
  } else {
    clear_has_heightmap();
  }
}

// optional .pb.PlannerMotionSampleMsg motion_sample = 5;
inline bool RegisterPlannerReqMsg::has_motion_sample() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegisterPlannerReqMsg::set_has_motion_sample() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegisterPlannerReqMsg::clear_has_motion_sample() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegisterPlannerReqMsg::clear_motion_sample() {
  if (motion_sample_ != NULL) motion_sample_->::pb::PlannerMotionSampleMsg::Clear();
  clear_has_motion_sample();
}
inline const ::pb::PlannerMotionSampleMsg& RegisterPlannerReqMsg::motion_sample() const {
  return motion_sample_ != NULL ? *motion_sample_ : *default_instance_->motion_sample_;
}
inline ::pb::PlannerMotionSampleMsg* RegisterPlannerReqMsg::mutable_motion_sample() {
  set_has_motion_sample();
  if (motion_sample_ == NULL) motion_sample_ = new ::pb::PlannerMotionSampleMsg;
  return motion_sample_;
}
inline ::pb::PlannerMotionSampleMsg* RegisterPlannerReqMsg::release_motion_sample() {
  clear_has_motion_sample();
  ::pb::PlannerMotionSampleMsg* temp = motion_sample_;
  motion_sample_ = NULL;
  return temp;
}
inline void RegisterPlannerReqMsg::set_allocated_motion_sample(::pb::PlannerMotionSampleMsg* motion_sample) {
  delete motion_sample_;
  motion_sample_ = motion_sample;
  if (motion_sample) {
    set_has_motion_sample();
  } else {
    clear_has_motion_sample();
  }
}

// optional .pb.PlannerSplineMsg spline = 6;
inline bool RegisterPlannerReqMsg::has_spline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegisterPlannerReqMsg::set_has_spline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegisterPlannerReqMsg::clear_has_spline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegisterPlannerReqMsg::clear_spline() {
  if (spline_ != NULL) spline_->::pb::PlannerSplineMsg::Clear();
  clear_has_spline();
}
inline const ::pb::PlannerSplineMsg& RegisterPlannerReqMsg::spline() const {
  return spline_ != NULL ? *spline_ : *default_instance_->spline_;
}
inline ::pb::PlannerSplineMsg* RegisterPlannerReqMsg::mutable_spline() {
  set_has_spline();
  if (spline_ == NULL) spline_ = new ::pb::PlannerSplineMsg;
  return spline_;
}
inline ::pb::PlannerSplineMsg* RegisterPlannerReqMsg::release_spline() {
  clear_has_spline();
  ::pb::PlannerSplineMsg* temp = spline_;
  spline_ = NULL;
  return temp;
}
inline void RegisterPlannerReqMsg::set_allocated_spline(::pb::PlannerSplineMsg* spline) {
  delete spline_;
  spline_ = spline;
  if (spline) {
    set_has_spline();
  } else {
    clear_has_spline();
  }
}

// optional uint32 tau = 7;
inline bool RegisterPlannerReqMsg::has_tau() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegisterPlannerReqMsg::set_has_tau() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegisterPlannerReqMsg::clear_has_tau() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegisterPlannerReqMsg::clear_tau() {
  tau_ = 0u;
  clear_has_tau();
}
inline ::google::protobuf::uint32 RegisterPlannerReqMsg::tau() const {
  return tau_;
}
inline void RegisterPlannerReqMsg::set_tau(::google::protobuf::uint32 value) {
  set_has_tau();
  tau_ = value;
}

// required string req_node_name = 8;
inline bool RegisterPlannerReqMsg::has_req_node_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegisterPlannerReqMsg::set_has_req_node_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegisterPlannerReqMsg::clear_has_req_node_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegisterPlannerReqMsg::clear_req_node_name() {
  if (req_node_name_ != &::google::protobuf::internal::kEmptyString) {
    req_node_name_->clear();
  }
  clear_has_req_node_name();
}
inline const ::std::string& RegisterPlannerReqMsg::req_node_name() const {
  return *req_node_name_;
}
inline void RegisterPlannerReqMsg::set_req_node_name(const ::std::string& value) {
  set_has_req_node_name();
  if (req_node_name_ == &::google::protobuf::internal::kEmptyString) {
    req_node_name_ = new ::std::string;
  }
  req_node_name_->assign(value);
}
inline void RegisterPlannerReqMsg::set_req_node_name(const char* value) {
  set_has_req_node_name();
  if (req_node_name_ == &::google::protobuf::internal::kEmptyString) {
    req_node_name_ = new ::std::string;
  }
  req_node_name_->assign(value);
}
inline void RegisterPlannerReqMsg::set_req_node_name(const char* value, size_t size) {
  set_has_req_node_name();
  if (req_node_name_ == &::google::protobuf::internal::kEmptyString) {
    req_node_name_ = new ::std::string;
  }
  req_node_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterPlannerReqMsg::mutable_req_node_name() {
  set_has_req_node_name();
  if (req_node_name_ == &::google::protobuf::internal::kEmptyString) {
    req_node_name_ = new ::std::string;
  }
  return req_node_name_;
}
inline ::std::string* RegisterPlannerReqMsg::release_req_node_name() {
  clear_has_req_node_name();
  if (req_node_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_node_name_;
    req_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterPlannerReqMsg::set_allocated_req_node_name(::std::string* req_node_name) {
  if (req_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete req_node_name_;
  }
  if (req_node_name) {
    set_has_req_node_name();
    req_node_name_ = req_node_name;
  } else {
    clear_has_req_node_name();
    req_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RegisterPlannerRepMsg

// optional .pb.PlannerConfigMsg config = 1;
inline bool RegisterPlannerRepMsg::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterPlannerRepMsg::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterPlannerRepMsg::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterPlannerRepMsg::clear_config() {
  if (config_ != NULL) config_->::pb::PlannerConfigMsg::Clear();
  clear_has_config();
}
inline const ::pb::PlannerConfigMsg& RegisterPlannerRepMsg::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::pb::PlannerConfigMsg* RegisterPlannerRepMsg::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::pb::PlannerConfigMsg;
  return config_;
}
inline ::pb::PlannerConfigMsg* RegisterPlannerRepMsg::release_config() {
  clear_has_config();
  ::pb::PlannerConfigMsg* temp = config_;
  config_ = NULL;
  return temp;
}
inline void RegisterPlannerRepMsg::set_allocated_config(::pb::PlannerConfigMsg* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// optional .pb.PlannerPolicyMsg policy = 2;
inline bool RegisterPlannerRepMsg::has_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterPlannerRepMsg::set_has_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterPlannerRepMsg::clear_has_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterPlannerRepMsg::clear_policy() {
  if (policy_ != NULL) policy_->::pb::PlannerPolicyMsg::Clear();
  clear_has_policy();
}
inline const ::pb::PlannerPolicyMsg& RegisterPlannerRepMsg::policy() const {
  return policy_ != NULL ? *policy_ : *default_instance_->policy_;
}
inline ::pb::PlannerPolicyMsg* RegisterPlannerRepMsg::mutable_policy() {
  set_has_policy();
  if (policy_ == NULL) policy_ = new ::pb::PlannerPolicyMsg;
  return policy_;
}
inline ::pb::PlannerPolicyMsg* RegisterPlannerRepMsg::release_policy() {
  clear_has_policy();
  ::pb::PlannerPolicyMsg* temp = policy_;
  policy_ = NULL;
  return temp;
}
inline void RegisterPlannerRepMsg::set_allocated_policy(::pb::PlannerPolicyMsg* policy) {
  delete policy_;
  policy_ = policy;
  if (policy) {
    set_has_policy();
  } else {
    clear_has_policy();
  }
}

// optional .pb.PlannerStatusMsg status = 3;
inline bool RegisterPlannerRepMsg::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterPlannerRepMsg::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterPlannerRepMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterPlannerRepMsg::clear_status() {
  if (status_ != NULL) status_->::pb::PlannerStatusMsg::Clear();
  clear_has_status();
}
inline const ::pb::PlannerStatusMsg& RegisterPlannerRepMsg::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::pb::PlannerStatusMsg* RegisterPlannerRepMsg::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::pb::PlannerStatusMsg;
  return status_;
}
inline ::pb::PlannerStatusMsg* RegisterPlannerRepMsg::release_status() {
  clear_has_status();
  ::pb::PlannerStatusMsg* temp = status_;
  status_ = NULL;
  return temp;
}
inline void RegisterPlannerRepMsg::set_allocated_status(::pb::PlannerStatusMsg* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
}

// optional .pb.PlannerHeightmapMsg heightmap = 4;
inline bool RegisterPlannerRepMsg::has_heightmap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterPlannerRepMsg::set_has_heightmap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterPlannerRepMsg::clear_has_heightmap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterPlannerRepMsg::clear_heightmap() {
  if (heightmap_ != NULL) heightmap_->::pb::PlannerHeightmapMsg::Clear();
  clear_has_heightmap();
}
inline const ::pb::PlannerHeightmapMsg& RegisterPlannerRepMsg::heightmap() const {
  return heightmap_ != NULL ? *heightmap_ : *default_instance_->heightmap_;
}
inline ::pb::PlannerHeightmapMsg* RegisterPlannerRepMsg::mutable_heightmap() {
  set_has_heightmap();
  if (heightmap_ == NULL) heightmap_ = new ::pb::PlannerHeightmapMsg;
  return heightmap_;
}
inline ::pb::PlannerHeightmapMsg* RegisterPlannerRepMsg::release_heightmap() {
  clear_has_heightmap();
  ::pb::PlannerHeightmapMsg* temp = heightmap_;
  heightmap_ = NULL;
  return temp;
}
inline void RegisterPlannerRepMsg::set_allocated_heightmap(::pb::PlannerHeightmapMsg* heightmap) {
  delete heightmap_;
  heightmap_ = heightmap;
  if (heightmap) {
    set_has_heightmap();
  } else {
    clear_has_heightmap();
  }
}

// optional .pb.PlannerMotionSampleMsg motion_sample = 5;
inline bool RegisterPlannerRepMsg::has_motion_sample() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegisterPlannerRepMsg::set_has_motion_sample() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegisterPlannerRepMsg::clear_has_motion_sample() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegisterPlannerRepMsg::clear_motion_sample() {
  if (motion_sample_ != NULL) motion_sample_->::pb::PlannerMotionSampleMsg::Clear();
  clear_has_motion_sample();
}
inline const ::pb::PlannerMotionSampleMsg& RegisterPlannerRepMsg::motion_sample() const {
  return motion_sample_ != NULL ? *motion_sample_ : *default_instance_->motion_sample_;
}
inline ::pb::PlannerMotionSampleMsg* RegisterPlannerRepMsg::mutable_motion_sample() {
  set_has_motion_sample();
  if (motion_sample_ == NULL) motion_sample_ = new ::pb::PlannerMotionSampleMsg;
  return motion_sample_;
}
inline ::pb::PlannerMotionSampleMsg* RegisterPlannerRepMsg::release_motion_sample() {
  clear_has_motion_sample();
  ::pb::PlannerMotionSampleMsg* temp = motion_sample_;
  motion_sample_ = NULL;
  return temp;
}
inline void RegisterPlannerRepMsg::set_allocated_motion_sample(::pb::PlannerMotionSampleMsg* motion_sample) {
  delete motion_sample_;
  motion_sample_ = motion_sample;
  if (motion_sample) {
    set_has_motion_sample();
  } else {
    clear_has_motion_sample();
  }
}

// optional .pb.PlannerSplineMsg spline = 6;
inline bool RegisterPlannerRepMsg::has_spline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegisterPlannerRepMsg::set_has_spline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegisterPlannerRepMsg::clear_has_spline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegisterPlannerRepMsg::clear_spline() {
  if (spline_ != NULL) spline_->::pb::PlannerSplineMsg::Clear();
  clear_has_spline();
}
inline const ::pb::PlannerSplineMsg& RegisterPlannerRepMsg::spline() const {
  return spline_ != NULL ? *spline_ : *default_instance_->spline_;
}
inline ::pb::PlannerSplineMsg* RegisterPlannerRepMsg::mutable_spline() {
  set_has_spline();
  if (spline_ == NULL) spline_ = new ::pb::PlannerSplineMsg;
  return spline_;
}
inline ::pb::PlannerSplineMsg* RegisterPlannerRepMsg::release_spline() {
  clear_has_spline();
  ::pb::PlannerSplineMsg* temp = spline_;
  spline_ = NULL;
  return temp;
}
inline void RegisterPlannerRepMsg::set_allocated_spline(::pb::PlannerSplineMsg* spline) {
  delete spline_;
  spline_ = spline;
  if (spline) {
    set_has_spline();
  } else {
    clear_has_spline();
  }
}

// optional uint32 success = 7;
inline bool RegisterPlannerRepMsg::has_success() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegisterPlannerRepMsg::set_has_success() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegisterPlannerRepMsg::clear_has_success() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegisterPlannerRepMsg::clear_success() {
  success_ = 0u;
  clear_has_success();
}
inline ::google::protobuf::uint32 RegisterPlannerRepMsg::success() const {
  return success_;
}
inline void RegisterPlannerRepMsg::set_success(::google::protobuf::uint32 value) {
  set_has_success();
  success_ = value;
}

// optional uint32 tau = 8;
inline bool RegisterPlannerRepMsg::has_tau() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegisterPlannerRepMsg::set_has_tau() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegisterPlannerRepMsg::clear_has_tau() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegisterPlannerRepMsg::clear_tau() {
  tau_ = 0u;
  clear_has_tau();
}
inline ::google::protobuf::uint32 RegisterPlannerRepMsg::tau() const {
  return tau_;
}
inline void RegisterPlannerRepMsg::set_tau(::google::protobuf::uint32 value) {
  set_has_tau();
  tau_ = value;
}

// optional string rep_node_name = 9;
inline bool RegisterPlannerRepMsg::has_rep_node_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegisterPlannerRepMsg::set_has_rep_node_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegisterPlannerRepMsg::clear_has_rep_node_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegisterPlannerRepMsg::clear_rep_node_name() {
  if (rep_node_name_ != &::google::protobuf::internal::kEmptyString) {
    rep_node_name_->clear();
  }
  clear_has_rep_node_name();
}
inline const ::std::string& RegisterPlannerRepMsg::rep_node_name() const {
  return *rep_node_name_;
}
inline void RegisterPlannerRepMsg::set_rep_node_name(const ::std::string& value) {
  set_has_rep_node_name();
  if (rep_node_name_ == &::google::protobuf::internal::kEmptyString) {
    rep_node_name_ = new ::std::string;
  }
  rep_node_name_->assign(value);
}
inline void RegisterPlannerRepMsg::set_rep_node_name(const char* value) {
  set_has_rep_node_name();
  if (rep_node_name_ == &::google::protobuf::internal::kEmptyString) {
    rep_node_name_ = new ::std::string;
  }
  rep_node_name_->assign(value);
}
inline void RegisterPlannerRepMsg::set_rep_node_name(const char* value, size_t size) {
  set_has_rep_node_name();
  if (rep_node_name_ == &::google::protobuf::internal::kEmptyString) {
    rep_node_name_ = new ::std::string;
  }
  rep_node_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterPlannerRepMsg::mutable_rep_node_name() {
  set_has_rep_node_name();
  if (rep_node_name_ == &::google::protobuf::internal::kEmptyString) {
    rep_node_name_ = new ::std::string;
  }
  return rep_node_name_;
}
inline ::std::string* RegisterPlannerRepMsg::release_rep_node_name() {
  clear_has_rep_node_name();
  if (rep_node_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rep_node_name_;
    rep_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterPlannerRepMsg::set_allocated_rep_node_name(::std::string* rep_node_name) {
  if (rep_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rep_node_name_;
  }
  if (rep_node_name) {
    set_has_rep_node_name();
    rep_node_name_ = rep_node_name;
  } else {
    clear_has_rep_node_name();
    rep_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CarPlanner_2eproto__INCLUDED
