// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "frontend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PlaceFrameMappingMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceFrameMappingMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrontendMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrontendMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_frontend_2eproto() {
  protobuf_AddDesc_frontend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "frontend.proto");
  GOOGLE_CHECK(file != NULL);
  PlaceFrameMappingMsg_descriptor_ = file->message_type(0);
  static const int PlaceFrameMappingMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceFrameMappingMsg, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceFrameMappingMsg, place_id_),
  };
  PlaceFrameMappingMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceFrameMappingMsg_descriptor_,
      PlaceFrameMappingMsg::default_instance_,
      PlaceFrameMappingMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceFrameMappingMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceFrameMappingMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceFrameMappingMsg));
  FrontendMsg_descriptor_ = file->message_type(1);
  static const int FrontendMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontendMsg, place_ids_),
  };
  FrontendMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrontendMsg_descriptor_,
      FrontendMsg::default_instance_,
      FrontendMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontendMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontendMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrontendMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_frontend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceFrameMappingMsg_descriptor_, &PlaceFrameMappingMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrontendMsg_descriptor_, &FrontendMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_frontend_2eproto() {
  delete PlaceFrameMappingMsg::default_instance_;
  delete PlaceFrameMappingMsg_reflection_;
  delete FrontendMsg::default_instance_;
  delete FrontendMsg_reflection_;
}

void protobuf_AddDesc_frontend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_rslam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016frontend.proto\022\002pb\032\013rslam.proto\"S\n\024Pla"
    "ceFrameMappingMsg\022)\n\010frame_id\030\001 \001(\0132\027.pb"
    ".ReferenceFrameIdMsg\022\020\n\010place_id\030\002 \001(\r\":"
    "\n\013FrontendMsg\022+\n\tplace_ids\030\001 \003(\0132\030.pb.Pl"
    "aceFrameMappingMsg", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frontend.proto", &protobuf_RegisterTypes);
  PlaceFrameMappingMsg::default_instance_ = new PlaceFrameMappingMsg();
  FrontendMsg::default_instance_ = new FrontendMsg();
  PlaceFrameMappingMsg::default_instance_->InitAsDefaultInstance();
  FrontendMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_frontend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_frontend_2eproto {
  StaticDescriptorInitializer_frontend_2eproto() {
    protobuf_AddDesc_frontend_2eproto();
  }
} static_descriptor_initializer_frontend_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlaceFrameMappingMsg::kFrameIdFieldNumber;
const int PlaceFrameMappingMsg::kPlaceIdFieldNumber;
#endif  // !_MSC_VER

PlaceFrameMappingMsg::PlaceFrameMappingMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceFrameMappingMsg::InitAsDefaultInstance() {
  frame_id_ = const_cast< ::pb::ReferenceFrameIdMsg*>(&::pb::ReferenceFrameIdMsg::default_instance());
}

PlaceFrameMappingMsg::PlaceFrameMappingMsg(const PlaceFrameMappingMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceFrameMappingMsg::SharedCtor() {
  _cached_size_ = 0;
  frame_id_ = NULL;
  place_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceFrameMappingMsg::~PlaceFrameMappingMsg() {
  SharedDtor();
}

void PlaceFrameMappingMsg::SharedDtor() {
  if (this != default_instance_) {
    delete frame_id_;
  }
}

void PlaceFrameMappingMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceFrameMappingMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceFrameMappingMsg_descriptor_;
}

const PlaceFrameMappingMsg& PlaceFrameMappingMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frontend_2eproto();
  return *default_instance_;
}

PlaceFrameMappingMsg* PlaceFrameMappingMsg::default_instance_ = NULL;

PlaceFrameMappingMsg* PlaceFrameMappingMsg::New() const {
  return new PlaceFrameMappingMsg;
}

void PlaceFrameMappingMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_frame_id()) {
      if (frame_id_ != NULL) frame_id_->::pb::ReferenceFrameIdMsg::Clear();
    }
    place_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceFrameMappingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ReferenceFrameIdMsg frame_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_place_id;
        break;
      }

      // optional uint32 place_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_id_)));
          set_has_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceFrameMappingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ReferenceFrameIdMsg frame_id = 1;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frame_id(), output);
  }

  // optional uint32 place_id = 2;
  if (has_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->place_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceFrameMappingMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ReferenceFrameIdMsg frame_id = 1;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frame_id(), target);
  }

  // optional uint32 place_id = 2;
  if (has_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->place_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceFrameMappingMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ReferenceFrameIdMsg frame_id = 1;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame_id());
    }

    // optional uint32 place_id = 2;
    if (has_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->place_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceFrameMappingMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceFrameMappingMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceFrameMappingMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceFrameMappingMsg::MergeFrom(const PlaceFrameMappingMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_id()) {
      mutable_frame_id()->::pb::ReferenceFrameIdMsg::MergeFrom(from.frame_id());
    }
    if (from.has_place_id()) {
      set_place_id(from.place_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceFrameMappingMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceFrameMappingMsg::CopyFrom(const PlaceFrameMappingMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceFrameMappingMsg::IsInitialized() const {

  return true;
}

void PlaceFrameMappingMsg::Swap(PlaceFrameMappingMsg* other) {
  if (other != this) {
    std::swap(frame_id_, other->frame_id_);
    std::swap(place_id_, other->place_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceFrameMappingMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceFrameMappingMsg_descriptor_;
  metadata.reflection = PlaceFrameMappingMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrontendMsg::kPlaceIdsFieldNumber;
#endif  // !_MSC_VER

FrontendMsg::FrontendMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrontendMsg::InitAsDefaultInstance() {
}

FrontendMsg::FrontendMsg(const FrontendMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrontendMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrontendMsg::~FrontendMsg() {
  SharedDtor();
}

void FrontendMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrontendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrontendMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrontendMsg_descriptor_;
}

const FrontendMsg& FrontendMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frontend_2eproto();
  return *default_instance_;
}

FrontendMsg* FrontendMsg::default_instance_ = NULL;

FrontendMsg* FrontendMsg::New() const {
  return new FrontendMsg;
}

void FrontendMsg::Clear() {
  place_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrontendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.PlaceFrameMappingMsg place_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_place_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_place_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_place_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrontendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.PlaceFrameMappingMsg place_ids = 1;
  for (int i = 0; i < this->place_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->place_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrontendMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.PlaceFrameMappingMsg place_ids = 1;
  for (int i = 0; i < this->place_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->place_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrontendMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.PlaceFrameMappingMsg place_ids = 1;
  total_size += 1 * this->place_ids_size();
  for (int i = 0; i < this->place_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->place_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrontendMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrontendMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrontendMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrontendMsg::MergeFrom(const FrontendMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  place_ids_.MergeFrom(from.place_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrontendMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrontendMsg::CopyFrom(const FrontendMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrontendMsg::IsInitialized() const {

  return true;
}

void FrontendMsg::Swap(FrontendMsg* other) {
  if (other != this) {
    place_ids_.Swap(&other->place_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrontendMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrontendMsg_descriptor_;
  metadata.reflection = FrontendMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
