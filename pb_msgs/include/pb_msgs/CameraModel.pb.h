// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CameraModel.proto

#ifndef PROTOBUF_CameraModel_2eproto__INCLUDED
#define PROTOBUF_CameraModel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Pose.pb.h"
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CameraModel_2eproto();
void protobuf_AssignDesc_CameraModel_2eproto();
void protobuf_ShutdownFile_CameraModel_2eproto();

class CameraModelMsg;

// ===================================================================

class CameraModelMsg : public ::google::protobuf::Message {
 public:
  CameraModelMsg();
  virtual ~CameraModelMsg();

  CameraModelMsg(const CameraModelMsg& from);

  inline CameraModelMsg& operator=(const CameraModelMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraModelMsg& default_instance();

  void Swap(CameraModelMsg* other);

  // implements Message ----------------------------------------------

  CameraModelMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraModelMsg& from);
  void MergeFrom(const CameraModelMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int64 serial_number = 3;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 3;
  inline ::google::protobuf::int64 serial_number() const;
  inline void set_serial_number(::google::protobuf::int64 value);

  // optional uint32 version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 6;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 6;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional .pb.PoseMsg pose_local_camera = 7;
  inline bool has_pose_local_camera() const;
  inline void clear_pose_local_camera();
  static const int kPoseLocalCameraFieldNumber = 7;
  inline const ::pb::PoseMsg& pose_local_camera() const;
  inline ::pb::PoseMsg* mutable_pose_local_camera();
  inline ::pb::PoseMsg* release_pose_local_camera();
  inline void set_allocated_pose_local_camera(::pb::PoseMsg* pose_local_camera);

  // optional .pb.VectorMsg params = 8;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 8;
  inline const ::pb::VectorMsg& params() const;
  inline ::pb::VectorMsg* mutable_params();
  inline ::pb::VectorMsg* release_params();
  inline void set_allocated_params(::pb::VectorMsg* params);

  // optional string type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:pb.CameraModelMsg)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_pose_local_camera();
  inline void clear_has_pose_local_camera();
  inline void set_has_params();
  inline void clear_has_params();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 serial_number_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::pb::PoseMsg* pose_local_camera_;
  ::pb::VectorMsg* params_;
  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_CameraModel_2eproto();
  friend void protobuf_AssignDesc_CameraModel_2eproto();
  friend void protobuf_ShutdownFile_CameraModel_2eproto();

  void InitAsDefaultInstance();
  static CameraModelMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// CameraModelMsg

// optional string name = 1;
inline bool CameraModelMsg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraModelMsg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraModelMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraModelMsg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CameraModelMsg::name() const {
  return *name_;
}
inline void CameraModelMsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CameraModelMsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CameraModelMsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CameraModelMsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CameraModelMsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CameraModelMsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 index = 2;
inline bool CameraModelMsg::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraModelMsg::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraModelMsg::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraModelMsg::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CameraModelMsg::index() const {
  return index_;
}
inline void CameraModelMsg::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int64 serial_number = 3;
inline bool CameraModelMsg::has_serial_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraModelMsg::set_has_serial_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraModelMsg::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraModelMsg::clear_serial_number() {
  serial_number_ = GOOGLE_LONGLONG(0);
  clear_has_serial_number();
}
inline ::google::protobuf::int64 CameraModelMsg::serial_number() const {
  return serial_number_;
}
inline void CameraModelMsg::set_serial_number(::google::protobuf::int64 value) {
  set_has_serial_number();
  serial_number_ = value;
}

// optional uint32 version = 4;
inline bool CameraModelMsg::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraModelMsg::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraModelMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraModelMsg::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CameraModelMsg::version() const {
  return version_;
}
inline void CameraModelMsg::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional uint32 width = 5;
inline bool CameraModelMsg::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraModelMsg::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraModelMsg::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraModelMsg::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 CameraModelMsg::width() const {
  return width_;
}
inline void CameraModelMsg::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// optional uint32 height = 6;
inline bool CameraModelMsg::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraModelMsg::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraModelMsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraModelMsg::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 CameraModelMsg::height() const {
  return height_;
}
inline void CameraModelMsg::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// optional .pb.PoseMsg pose_local_camera = 7;
inline bool CameraModelMsg::has_pose_local_camera() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraModelMsg::set_has_pose_local_camera() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraModelMsg::clear_has_pose_local_camera() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraModelMsg::clear_pose_local_camera() {
  if (pose_local_camera_ != NULL) pose_local_camera_->::pb::PoseMsg::Clear();
  clear_has_pose_local_camera();
}
inline const ::pb::PoseMsg& CameraModelMsg::pose_local_camera() const {
  return pose_local_camera_ != NULL ? *pose_local_camera_ : *default_instance_->pose_local_camera_;
}
inline ::pb::PoseMsg* CameraModelMsg::mutable_pose_local_camera() {
  set_has_pose_local_camera();
  if (pose_local_camera_ == NULL) pose_local_camera_ = new ::pb::PoseMsg;
  return pose_local_camera_;
}
inline ::pb::PoseMsg* CameraModelMsg::release_pose_local_camera() {
  clear_has_pose_local_camera();
  ::pb::PoseMsg* temp = pose_local_camera_;
  pose_local_camera_ = NULL;
  return temp;
}
inline void CameraModelMsg::set_allocated_pose_local_camera(::pb::PoseMsg* pose_local_camera) {
  delete pose_local_camera_;
  pose_local_camera_ = pose_local_camera;
  if (pose_local_camera) {
    set_has_pose_local_camera();
  } else {
    clear_has_pose_local_camera();
  }
}

// optional .pb.VectorMsg params = 8;
inline bool CameraModelMsg::has_params() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraModelMsg::set_has_params() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraModelMsg::clear_has_params() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraModelMsg::clear_params() {
  if (params_ != NULL) params_->::pb::VectorMsg::Clear();
  clear_has_params();
}
inline const ::pb::VectorMsg& CameraModelMsg::params() const {
  return params_ != NULL ? *params_ : *default_instance_->params_;
}
inline ::pb::VectorMsg* CameraModelMsg::mutable_params() {
  set_has_params();
  if (params_ == NULL) params_ = new ::pb::VectorMsg;
  return params_;
}
inline ::pb::VectorMsg* CameraModelMsg::release_params() {
  clear_has_params();
  ::pb::VectorMsg* temp = params_;
  params_ = NULL;
  return temp;
}
inline void CameraModelMsg::set_allocated_params(::pb::VectorMsg* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
}

// optional string type = 9;
inline bool CameraModelMsg::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraModelMsg::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraModelMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraModelMsg::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& CameraModelMsg::type() const {
  return *type_;
}
inline void CameraModelMsg::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void CameraModelMsg::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void CameraModelMsg::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CameraModelMsg::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* CameraModelMsg::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CameraModelMsg::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CameraModel_2eproto__INCLUDED
