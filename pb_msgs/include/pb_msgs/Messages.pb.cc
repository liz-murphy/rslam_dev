// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Messages_2eproto() {
  protobuf_AddDesc_Messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Messages.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_descriptor_ = file->message_type(0);
  static const int Msg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, imu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, encoder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, lidar_),
  };
  Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_descriptor_, &Msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Messages_2eproto() {
  delete Msg::default_instance_;
  delete Msg_reflection_;
}

void protobuf_AddDesc_Messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_Camera_2eproto();
  ::pb::protobuf_AddDesc_Imu_2eproto();
  ::pb::protobuf_AddDesc_Pose_2eproto();
  ::pb::protobuf_AddDesc_Encoder_2eproto();
  ::pb::protobuf_AddDesc_Lidar_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Messages.proto\022\002pb\032\014Camera.proto\032\tImu."
    "proto\032\nPose.proto\032\rEncoder.proto\032\013Lidar."
    "proto\"\251\001\n\003Msg\022\021\n\ttimestamp\030\001 \001(\001\022\035\n\006came"
    "ra\030\002 \001(\0132\r.pb.CameraMsg\022\027\n\003imu\030\003 \001(\0132\n.p"
    "b.ImuMsg\022\031\n\004pose\030\004 \001(\0132\013.pb.PoseMsg\022\037\n\007e"
    "ncoder\030\005 \001(\0132\016.pb.EncoderMsg\022\033\n\005lidar\030\006 "
    "\001(\0132\014.pb.LidarMsg", 257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Messages.proto", &protobuf_RegisterTypes);
  Msg::default_instance_ = new Msg();
  Msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Messages_2eproto {
  StaticDescriptorInitializer_Messages_2eproto() {
    protobuf_AddDesc_Messages_2eproto();
  }
} static_descriptor_initializer_Messages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Msg::kTimestampFieldNumber;
const int Msg::kCameraFieldNumber;
const int Msg::kImuFieldNumber;
const int Msg::kPoseFieldNumber;
const int Msg::kEncoderFieldNumber;
const int Msg::kLidarFieldNumber;
#endif  // !_MSC_VER

Msg::Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg::InitAsDefaultInstance() {
  camera_ = const_cast< ::pb::CameraMsg*>(&::pb::CameraMsg::default_instance());
  imu_ = const_cast< ::pb::ImuMsg*>(&::pb::ImuMsg::default_instance());
  pose_ = const_cast< ::pb::PoseMsg*>(&::pb::PoseMsg::default_instance());
  encoder_ = const_cast< ::pb::EncoderMsg*>(&::pb::EncoderMsg::default_instance());
  lidar_ = const_cast< ::pb::LidarMsg*>(&::pb::LidarMsg::default_instance());
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  camera_ = NULL;
  imu_ = NULL;
  pose_ = NULL;
  encoder_ = NULL;
  lidar_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  SharedDtor();
}

void Msg::SharedDtor() {
  if (this != default_instance_) {
    delete camera_;
    delete imu_;
    delete pose_;
    delete encoder_;
    delete lidar_;
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New() const {
  return new Msg;
}

void Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    if (has_camera()) {
      if (camera_ != NULL) camera_->::pb::CameraMsg::Clear();
    }
    if (has_imu()) {
      if (imu_ != NULL) imu_->::pb::ImuMsg::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::pb::PoseMsg::Clear();
    }
    if (has_encoder()) {
      if (encoder_ != NULL) encoder_->::pb::EncoderMsg::Clear();
    }
    if (has_lidar()) {
      if (lidar_ != NULL) lidar_->::pb::LidarMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_camera;
        break;
      }

      // optional .pb.CameraMsg camera = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_imu;
        break;
      }

      // optional .pb.ImuMsg imu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pose;
        break;
      }

      // optional .pb.PoseMsg pose = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_encoder;
        break;
      }

      // optional .pb.EncoderMsg encoder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encoder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_lidar;
        break;
      }

      // optional .pb.LidarMsg lidar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lidar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lidar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional .pb.CameraMsg camera = 2;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->camera(), output);
  }

  // optional .pb.ImuMsg imu = 3;
  if (has_imu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->imu(), output);
  }

  // optional .pb.PoseMsg pose = 4;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pose(), output);
  }

  // optional .pb.EncoderMsg encoder = 5;
  if (has_encoder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->encoder(), output);
  }

  // optional .pb.LidarMsg lidar = 6;
  if (has_lidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lidar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional .pb.CameraMsg camera = 2;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->camera(), target);
  }

  // optional .pb.ImuMsg imu = 3;
  if (has_imu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->imu(), target);
  }

  // optional .pb.PoseMsg pose = 4;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pose(), target);
  }

  // optional .pb.EncoderMsg encoder = 5;
  if (has_encoder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->encoder(), target);
  }

  // optional .pb.LidarMsg lidar = 6;
  if (has_lidar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lidar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .pb.CameraMsg camera = 2;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera());
    }

    // optional .pb.ImuMsg imu = 3;
    if (has_imu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imu());
    }

    // optional .pb.PoseMsg pose = 4;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .pb.EncoderMsg encoder = 5;
    if (has_encoder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encoder());
    }

    // optional .pb.LidarMsg lidar = 6;
    if (has_lidar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lidar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_camera()) {
      mutable_camera()->::pb::CameraMsg::MergeFrom(from.camera());
    }
    if (from.has_imu()) {
      mutable_imu()->::pb::ImuMsg::MergeFrom(from.imu());
    }
    if (from.has_pose()) {
      mutable_pose()->::pb::PoseMsg::MergeFrom(from.pose());
    }
    if (from.has_encoder()) {
      mutable_encoder()->::pb::EncoderMsg::MergeFrom(from.encoder());
    }
    if (from.has_lidar()) {
      mutable_lidar()->::pb::LidarMsg::MergeFrom(from.lidar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_lidar()) {
    if (!this->lidar().IsInitialized()) return false;
  }
  return true;
}

void Msg::Swap(Msg* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(camera_, other->camera_);
    std::swap(imu_, other->imu_);
    std::swap(pose_, other->pose_);
    std::swap(encoder_, other->encoder_);
    std::swap(lidar_, other->lidar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
