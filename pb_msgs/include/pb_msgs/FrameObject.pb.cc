// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameObject.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FrameObject.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* DoubleMatrixMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleMatrixMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameObjectMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameObjectMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FrameObjectMsg_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CubeObjectMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CubeObjectMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeapotObjectMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeapotObjectMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextObjectMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextObjectMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FrameObject_2eproto() {
  protobuf_AddDesc_FrameObject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FrameObject.proto");
  GOOGLE_CHECK(file != NULL);
  DoubleMatrixMsg_descriptor_ = file->message_type(0);
  static const int DoubleMatrixMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMatrixMsg, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMatrixMsg, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMatrixMsg, data_),
  };
  DoubleMatrixMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleMatrixMsg_descriptor_,
      DoubleMatrixMsg::default_instance_,
      DoubleMatrixMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMatrixMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMatrixMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleMatrixMsg));
  FrameObjectMsg_descriptor_ = file->message_type(1);
  static const int FrameObjectMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameObjectMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameObjectMsg, uuid_),
  };
  FrameObjectMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameObjectMsg_descriptor_,
      FrameObjectMsg::default_instance_,
      FrameObjectMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameObjectMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameObjectMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameObjectMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameObjectMsg));
  FrameObjectMsg_Type_descriptor_ = FrameObjectMsg_descriptor_->enum_type(0);
  CubeObjectMsg_descriptor_ = file->message_type(2);
  static const int CubeObjectMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubeObjectMsg, t_po_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubeObjectMsg, scale_),
  };
  CubeObjectMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CubeObjectMsg_descriptor_,
      CubeObjectMsg::default_instance_,
      CubeObjectMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubeObjectMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubeObjectMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CubeObjectMsg));
  TeapotObjectMsg_descriptor_ = file->message_type(3);
  static const int TeapotObjectMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeapotObjectMsg, t_po_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeapotObjectMsg, scale_),
  };
  TeapotObjectMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeapotObjectMsg_descriptor_,
      TeapotObjectMsg::default_instance_,
      TeapotObjectMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeapotObjectMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeapotObjectMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeapotObjectMsg));
  TextObjectMsg_descriptor_ = file->message_type(4);
  static const int TextObjectMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextObjectMsg, t_po_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextObjectMsg, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextObjectMsg, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextObjectMsg, color_),
  };
  TextObjectMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextObjectMsg_descriptor_,
      TextObjectMsg::default_instance_,
      TextObjectMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextObjectMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextObjectMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextObjectMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FrameObject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleMatrixMsg_descriptor_, &DoubleMatrixMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameObjectMsg_descriptor_, &FrameObjectMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CubeObjectMsg_descriptor_, &CubeObjectMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeapotObjectMsg_descriptor_, &TeapotObjectMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextObjectMsg_descriptor_, &TextObjectMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FrameObject_2eproto() {
  delete DoubleMatrixMsg::default_instance_;
  delete DoubleMatrixMsg_reflection_;
  delete FrameObjectMsg::default_instance_;
  delete FrameObjectMsg_reflection_;
  delete CubeObjectMsg::default_instance_;
  delete CubeObjectMsg_reflection_;
  delete TeapotObjectMsg::default_instance_;
  delete TeapotObjectMsg_reflection_;
  delete TextObjectMsg::default_instance_;
  delete TextObjectMsg_reflection_;
}

void protobuf_AddDesc_FrameObject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_Pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021FrameObject.proto\022\002pb\032\nPose.proto\"\?\n\017D"
    "oubleMatrixMsg\022\014\n\004rows\030\001 \001(\005\022\014\n\004cols\030\002 \001"
    "(\005\022\020\n\004data\030\003 \003(\001B\002\020\001\"w\n\016FrameObjectMsg\022%"
    "\n\004type\030\001 \002(\0162\027.pb.FrameObjectMsg.Type\022\014\n"
    "\004uuid\030\002 \001(\014\"&\n\004Type\022\010\n\004Cube\020\001\022\n\n\006Teapot\020"
    "\002\022\010\n\004Text\020\003*\010\010d\020\200\200\200\200\002\"\205\001\n\rCubeObjectMsg\022"
    "\031\n\004t_po\030\001 \001(\0132\013.pb.PoseMsg\022\"\n\005scale\030\002 \001("
    "\0132\023.pb.DoubleMatrixMsg25\n\006object\022\022.pb.Fr"
    "ameObjectMsg\030d \002(\0132\021.pb.CubeObjectMsg\"\211\001"
    "\n\017TeapotObjectMsg\022\031\n\004t_po\030\001 \001(\0132\013.pb.Pos"
    "eMsg\022\"\n\005scale\030\002 \001(\0132\023.pb.DoubleMatrixMsg"
    "27\n\006object\022\022.pb.FrameObjectMsg\030e \002(\0132\023.p"
    "b.TeapotObjectMsg\"\267\001\n\rTextObjectMsg\022\031\n\004t"
    "_po\030\001 \001(\0132\013.pb.PoseMsg\022\"\n\005scale\030\002 \001(\0132\023."
    "pb.DoubleMatrixMsg\022\014\n\004text\030\003 \001(\t\022\"\n\005colo"
    "r\030\004 \001(\0132\023.pb.DoubleMatrixMsg25\n\006object\022\022"
    ".pb.FrameObjectMsg\030f \002(\0132\021.pb.TextObject"
    "Msg", 683);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FrameObject.proto", &protobuf_RegisterTypes);
  DoubleMatrixMsg::default_instance_ = new DoubleMatrixMsg();
  FrameObjectMsg::default_instance_ = new FrameObjectMsg();
  CubeObjectMsg::default_instance_ = new CubeObjectMsg();
  TeapotObjectMsg::default_instance_ = new TeapotObjectMsg();
  TextObjectMsg::default_instance_ = new TextObjectMsg();
  DoubleMatrixMsg::default_instance_->InitAsDefaultInstance();
  FrameObjectMsg::default_instance_->InitAsDefaultInstance();
  CubeObjectMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pb::FrameObjectMsg::default_instance(),
    100, 11, false, false,
    &::pb::CubeObjectMsg::default_instance());
  TeapotObjectMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pb::FrameObjectMsg::default_instance(),
    101, 11, false, false,
    &::pb::TeapotObjectMsg::default_instance());
  TextObjectMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pb::FrameObjectMsg::default_instance(),
    102, 11, false, false,
    &::pb::TextObjectMsg::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FrameObject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FrameObject_2eproto {
  StaticDescriptorInitializer_FrameObject_2eproto() {
    protobuf_AddDesc_FrameObject_2eproto();
  }
} static_descriptor_initializer_FrameObject_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DoubleMatrixMsg::kRowsFieldNumber;
const int DoubleMatrixMsg::kColsFieldNumber;
const int DoubleMatrixMsg::kDataFieldNumber;
#endif  // !_MSC_VER

DoubleMatrixMsg::DoubleMatrixMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoubleMatrixMsg::InitAsDefaultInstance() {
}

DoubleMatrixMsg::DoubleMatrixMsg(const DoubleMatrixMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoubleMatrixMsg::SharedCtor() {
  _cached_size_ = 0;
  rows_ = 0;
  cols_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleMatrixMsg::~DoubleMatrixMsg() {
  SharedDtor();
}

void DoubleMatrixMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleMatrixMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleMatrixMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleMatrixMsg_descriptor_;
}

const DoubleMatrixMsg& DoubleMatrixMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameObject_2eproto();
  return *default_instance_;
}

DoubleMatrixMsg* DoubleMatrixMsg::default_instance_ = NULL;

DoubleMatrixMsg* DoubleMatrixMsg::New() const {
  return new DoubleMatrixMsg;
}

void DoubleMatrixMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rows_ = 0;
    cols_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleMatrixMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional int32 cols = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated double data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoubleMatrixMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 cols = 2;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cols(), output);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoubleMatrixMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 cols = 2;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cols(), target);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoubleMatrixMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rows = 1;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

    // optional int32 cols = 2;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cols());
    }

  }
  // repeated double data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleMatrixMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleMatrixMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleMatrixMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleMatrixMsg::MergeFrom(const DoubleMatrixMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleMatrixMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleMatrixMsg::CopyFrom(const DoubleMatrixMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMatrixMsg::IsInitialized() const {

  return true;
}

void DoubleMatrixMsg::Swap(DoubleMatrixMsg* other) {
  if (other != this) {
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleMatrixMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleMatrixMsg_descriptor_;
  metadata.reflection = DoubleMatrixMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FrameObjectMsg_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameObjectMsg_Type_descriptor_;
}
bool FrameObjectMsg_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FrameObjectMsg_Type FrameObjectMsg::Cube;
const FrameObjectMsg_Type FrameObjectMsg::Teapot;
const FrameObjectMsg_Type FrameObjectMsg::Text;
const FrameObjectMsg_Type FrameObjectMsg::Type_MIN;
const FrameObjectMsg_Type FrameObjectMsg::Type_MAX;
const int FrameObjectMsg::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FrameObjectMsg::kTypeFieldNumber;
const int FrameObjectMsg::kUuidFieldNumber;
#endif  // !_MSC_VER

FrameObjectMsg::FrameObjectMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameObjectMsg::InitAsDefaultInstance() {
}

FrameObjectMsg::FrameObjectMsg(const FrameObjectMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameObjectMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameObjectMsg::~FrameObjectMsg() {
  SharedDtor();
}

void FrameObjectMsg::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void FrameObjectMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameObjectMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameObjectMsg_descriptor_;
}

const FrameObjectMsg& FrameObjectMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameObject_2eproto();
  return *default_instance_;
}

FrameObjectMsg* FrameObjectMsg::default_instance_ = NULL;

FrameObjectMsg* FrameObjectMsg::New() const {
  return new FrameObjectMsg;
}

void FrameObjectMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameObjectMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.FrameObjectMsg.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::FrameObjectMsg_Type_IsValid(value)) {
            set_type(static_cast< ::pb::FrameObjectMsg_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameObjectMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.FrameObjectMsg.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uuid(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameObjectMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.FrameObjectMsg.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameObjectMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.FrameObjectMsg.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameObjectMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameObjectMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameObjectMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameObjectMsg::MergeFrom(const FrameObjectMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameObjectMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameObjectMsg::CopyFrom(const FrameObjectMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameObjectMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void FrameObjectMsg::Swap(FrameObjectMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata FrameObjectMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameObjectMsg_descriptor_;
  metadata.reflection = FrameObjectMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CubeObjectMsg::kTPoFieldNumber;
const int CubeObjectMsg::kScaleFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CubeObjectMsg::kObjectFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pb::FrameObjectMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::pb::CubeObjectMsg >, 11, false >
  CubeObjectMsg::object(kObjectFieldNumber, ::pb::CubeObjectMsg::default_instance());
CubeObjectMsg::CubeObjectMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CubeObjectMsg::InitAsDefaultInstance() {
  t_po_ = const_cast< ::pb::PoseMsg*>(&::pb::PoseMsg::default_instance());
  scale_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
}

CubeObjectMsg::CubeObjectMsg(const CubeObjectMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CubeObjectMsg::SharedCtor() {
  _cached_size_ = 0;
  t_po_ = NULL;
  scale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CubeObjectMsg::~CubeObjectMsg() {
  SharedDtor();
}

void CubeObjectMsg::SharedDtor() {
  if (this != default_instance_) {
    delete t_po_;
    delete scale_;
  }
}

void CubeObjectMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CubeObjectMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CubeObjectMsg_descriptor_;
}

const CubeObjectMsg& CubeObjectMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameObject_2eproto();
  return *default_instance_;
}

CubeObjectMsg* CubeObjectMsg::default_instance_ = NULL;

CubeObjectMsg* CubeObjectMsg::New() const {
  return new CubeObjectMsg;
}

void CubeObjectMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_t_po()) {
      if (t_po_ != NULL) t_po_->::pb::PoseMsg::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::DoubleMatrixMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CubeObjectMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PoseMsg t_po = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_po()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scale;
        break;
      }

      // optional .pb.DoubleMatrixMsg scale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CubeObjectMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.PoseMsg t_po = 1;
  if (has_t_po()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->t_po(), output);
  }

  // optional .pb.DoubleMatrixMsg scale = 2;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CubeObjectMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.PoseMsg t_po = 1;
  if (has_t_po()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->t_po(), target);
  }

  // optional .pb.DoubleMatrixMsg scale = 2;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CubeObjectMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PoseMsg t_po = 1;
    if (has_t_po()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t_po());
    }

    // optional .pb.DoubleMatrixMsg scale = 2;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CubeObjectMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CubeObjectMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CubeObjectMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CubeObjectMsg::MergeFrom(const CubeObjectMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_po()) {
      mutable_t_po()->::pb::PoseMsg::MergeFrom(from.t_po());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::DoubleMatrixMsg::MergeFrom(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CubeObjectMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CubeObjectMsg::CopyFrom(const CubeObjectMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CubeObjectMsg::IsInitialized() const {

  if (has_t_po()) {
    if (!this->t_po().IsInitialized()) return false;
  }
  return true;
}

void CubeObjectMsg::Swap(CubeObjectMsg* other) {
  if (other != this) {
    std::swap(t_po_, other->t_po_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CubeObjectMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CubeObjectMsg_descriptor_;
  metadata.reflection = CubeObjectMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeapotObjectMsg::kTPoFieldNumber;
const int TeapotObjectMsg::kScaleFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TeapotObjectMsg::kObjectFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pb::FrameObjectMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::pb::TeapotObjectMsg >, 11, false >
  TeapotObjectMsg::object(kObjectFieldNumber, ::pb::TeapotObjectMsg::default_instance());
TeapotObjectMsg::TeapotObjectMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeapotObjectMsg::InitAsDefaultInstance() {
  t_po_ = const_cast< ::pb::PoseMsg*>(&::pb::PoseMsg::default_instance());
  scale_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
}

TeapotObjectMsg::TeapotObjectMsg(const TeapotObjectMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeapotObjectMsg::SharedCtor() {
  _cached_size_ = 0;
  t_po_ = NULL;
  scale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeapotObjectMsg::~TeapotObjectMsg() {
  SharedDtor();
}

void TeapotObjectMsg::SharedDtor() {
  if (this != default_instance_) {
    delete t_po_;
    delete scale_;
  }
}

void TeapotObjectMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeapotObjectMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeapotObjectMsg_descriptor_;
}

const TeapotObjectMsg& TeapotObjectMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameObject_2eproto();
  return *default_instance_;
}

TeapotObjectMsg* TeapotObjectMsg::default_instance_ = NULL;

TeapotObjectMsg* TeapotObjectMsg::New() const {
  return new TeapotObjectMsg;
}

void TeapotObjectMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_t_po()) {
      if (t_po_ != NULL) t_po_->::pb::PoseMsg::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::DoubleMatrixMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeapotObjectMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PoseMsg t_po = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_po()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scale;
        break;
      }

      // optional .pb.DoubleMatrixMsg scale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeapotObjectMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.PoseMsg t_po = 1;
  if (has_t_po()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->t_po(), output);
  }

  // optional .pb.DoubleMatrixMsg scale = 2;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeapotObjectMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.PoseMsg t_po = 1;
  if (has_t_po()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->t_po(), target);
  }

  // optional .pb.DoubleMatrixMsg scale = 2;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeapotObjectMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PoseMsg t_po = 1;
    if (has_t_po()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t_po());
    }

    // optional .pb.DoubleMatrixMsg scale = 2;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeapotObjectMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeapotObjectMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeapotObjectMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeapotObjectMsg::MergeFrom(const TeapotObjectMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_po()) {
      mutable_t_po()->::pb::PoseMsg::MergeFrom(from.t_po());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::DoubleMatrixMsg::MergeFrom(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeapotObjectMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeapotObjectMsg::CopyFrom(const TeapotObjectMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeapotObjectMsg::IsInitialized() const {

  if (has_t_po()) {
    if (!this->t_po().IsInitialized()) return false;
  }
  return true;
}

void TeapotObjectMsg::Swap(TeapotObjectMsg* other) {
  if (other != this) {
    std::swap(t_po_, other->t_po_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeapotObjectMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeapotObjectMsg_descriptor_;
  metadata.reflection = TeapotObjectMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextObjectMsg::kTPoFieldNumber;
const int TextObjectMsg::kScaleFieldNumber;
const int TextObjectMsg::kTextFieldNumber;
const int TextObjectMsg::kColorFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TextObjectMsg::kObjectFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pb::FrameObjectMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::pb::TextObjectMsg >, 11, false >
  TextObjectMsg::object(kObjectFieldNumber, ::pb::TextObjectMsg::default_instance());
TextObjectMsg::TextObjectMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextObjectMsg::InitAsDefaultInstance() {
  t_po_ = const_cast< ::pb::PoseMsg*>(&::pb::PoseMsg::default_instance());
  scale_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
  color_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
}

TextObjectMsg::TextObjectMsg(const TextObjectMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextObjectMsg::SharedCtor() {
  _cached_size_ = 0;
  t_po_ = NULL;
  scale_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextObjectMsg::~TextObjectMsg() {
  SharedDtor();
}

void TextObjectMsg::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete t_po_;
    delete scale_;
    delete color_;
  }
}

void TextObjectMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextObjectMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextObjectMsg_descriptor_;
}

const TextObjectMsg& TextObjectMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameObject_2eproto();
  return *default_instance_;
}

TextObjectMsg* TextObjectMsg::default_instance_ = NULL;

TextObjectMsg* TextObjectMsg::New() const {
  return new TextObjectMsg;
}

void TextObjectMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_t_po()) {
      if (t_po_ != NULL) t_po_->::pb::PoseMsg::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::DoubleMatrixMsg::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_color()) {
      if (color_ != NULL) color_->::pb::DoubleMatrixMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextObjectMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PoseMsg t_po = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_po()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scale;
        break;
      }

      // optional .pb.DoubleMatrixMsg scale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_color;
        break;
      }

      // optional .pb.DoubleMatrixMsg color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextObjectMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.PoseMsg t_po = 1;
  if (has_t_po()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->t_po(), output);
  }

  // optional .pb.DoubleMatrixMsg scale = 2;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scale(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  // optional .pb.DoubleMatrixMsg color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextObjectMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.PoseMsg t_po = 1;
  if (has_t_po()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->t_po(), target);
  }

  // optional .pb.DoubleMatrixMsg scale = 2;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scale(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional .pb.DoubleMatrixMsg color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextObjectMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PoseMsg t_po = 1;
    if (has_t_po()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t_po());
    }

    // optional .pb.DoubleMatrixMsg scale = 2;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .pb.DoubleMatrixMsg color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextObjectMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextObjectMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextObjectMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextObjectMsg::MergeFrom(const TextObjectMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_po()) {
      mutable_t_po()->::pb::PoseMsg::MergeFrom(from.t_po());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::DoubleMatrixMsg::MergeFrom(from.scale());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_color()) {
      mutable_color()->::pb::DoubleMatrixMsg::MergeFrom(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextObjectMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextObjectMsg::CopyFrom(const TextObjectMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextObjectMsg::IsInitialized() const {

  if (has_t_po()) {
    if (!this->t_po().IsInitialized()) return false;
  }
  return true;
}

void TextObjectMsg::Swap(TextObjectMsg* other) {
  if (other != this) {
    std::swap(t_po_, other->t_po_);
    std::swap(scale_, other->scale_);
    std::swap(text_, other->text_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextObjectMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextObjectMsg_descriptor_;
  metadata.reflection = TextObjectMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
