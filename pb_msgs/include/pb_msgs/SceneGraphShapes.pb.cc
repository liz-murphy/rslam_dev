// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneGraphShapes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneGraphShapes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* BoxMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CylinderMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CylinderMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SphereMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SphereMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaneMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaneMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeightmapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeightmapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeshMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeshMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LightMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaypointMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaypointMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneGraphMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneGraphMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRenderReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRenderReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRenderRepMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRenderRepMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneGraphShapes_2eproto() {
  protobuf_AddDesc_SceneGraphShapes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneGraphShapes.proto");
  GOOGLE_CHECK(file != NULL);
  BoxMsg_descriptor_ = file->message_type(0);
  static const int BoxMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxMsg, x_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxMsg, y_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxMsg, z_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxMsg, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxMsg, pose_),
  };
  BoxMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxMsg_descriptor_,
      BoxMsg::default_instance_,
      BoxMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxMsg));
  CylinderMsg_descriptor_ = file->message_type(1);
  static const int CylinderMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderMsg, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderMsg, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderMsg, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderMsg, pose_),
  };
  CylinderMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CylinderMsg_descriptor_,
      CylinderMsg::default_instance_,
      CylinderMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CylinderMsg));
  SphereMsg_descriptor_ = file->message_type(2);
  static const int SphereMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphereMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphereMsg, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphereMsg, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphereMsg, pose_),
  };
  SphereMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SphereMsg_descriptor_,
      SphereMsg::default_instance_,
      SphereMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphereMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphereMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SphereMsg));
  PlaneMsg_descriptor_ = file->message_type(3);
  static const int PlaneMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneMsg, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneMsg, pose_),
  };
  PlaneMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaneMsg_descriptor_,
      PlaneMsg::default_instance_,
      PlaneMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaneMsg));
  HeightmapMsg_descriptor_ = file->message_type(4);
  static const int HeightmapMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapMsg, row_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapMsg, col_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapMsg, x_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapMsg, y_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapMsg, z_data_),
  };
  HeightmapMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeightmapMsg_descriptor_,
      HeightmapMsg::default_instance_,
      HeightmapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeightmapMsg));
  MeshMsg_descriptor_ = file->message_type(5);
  static const int MeshMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshMsg, file_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshMsg, pose_),
  };
  MeshMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeshMsg_descriptor_,
      MeshMsg::default_instance_,
      MeshMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeshMsg));
  LightMsg_descriptor_ = file->message_type(6);
  static const int LightMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightMsg, position_),
  };
  LightMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LightMsg_descriptor_,
      LightMsg::default_instance_,
      LightMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LightMsg));
  WaypointMsg_descriptor_ = file->message_type(7);
  static const int WaypointMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMsg, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMsg, velocity_),
  };
  WaypointMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaypointMsg_descriptor_,
      WaypointMsg::default_instance_,
      WaypointMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaypointMsg));
  SceneGraphMsg_descriptor_ = file->message_type(8);
  static const int SceneGraphMsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, cylinder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, sphere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, plane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, heightmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, waypoint_),
  };
  SceneGraphMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneGraphMsg_descriptor_,
      SceneGraphMsg::default_instance_,
      SceneGraphMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGraphMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneGraphMsg));
  RegisterRenderReqMsg_descriptor_ = file->message_type(9);
  static const int RegisterRenderReqMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRenderReqMsg, new_objects_),
  };
  RegisterRenderReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRenderReqMsg_descriptor_,
      RegisterRenderReqMsg::default_instance_,
      RegisterRenderReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRenderReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRenderReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRenderReqMsg));
  RegisterRenderRepMsg_descriptor_ = file->message_type(10);
  static const int RegisterRenderRepMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRenderRepMsg, success_),
  };
  RegisterRenderRepMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRenderRepMsg_descriptor_,
      RegisterRenderRepMsg::default_instance_,
      RegisterRenderRepMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRenderRepMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRenderRepMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRenderRepMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneGraphShapes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxMsg_descriptor_, &BoxMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CylinderMsg_descriptor_, &CylinderMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SphereMsg_descriptor_, &SphereMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaneMsg_descriptor_, &PlaneMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeightmapMsg_descriptor_, &HeightmapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeshMsg_descriptor_, &MeshMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LightMsg_descriptor_, &LightMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaypointMsg_descriptor_, &WaypointMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneGraphMsg_descriptor_, &SceneGraphMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRenderReqMsg_descriptor_, &RegisterRenderReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRenderRepMsg_descriptor_, &RegisterRenderRepMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneGraphShapes_2eproto() {
  delete BoxMsg::default_instance_;
  delete BoxMsg_reflection_;
  delete CylinderMsg::default_instance_;
  delete CylinderMsg_reflection_;
  delete SphereMsg::default_instance_;
  delete SphereMsg_reflection_;
  delete PlaneMsg::default_instance_;
  delete PlaneMsg_reflection_;
  delete HeightmapMsg::default_instance_;
  delete HeightmapMsg_reflection_;
  delete MeshMsg::default_instance_;
  delete MeshMsg_reflection_;
  delete LightMsg::default_instance_;
  delete LightMsg_reflection_;
  delete WaypointMsg::default_instance_;
  delete WaypointMsg_reflection_;
  delete SceneGraphMsg::default_instance_;
  delete SceneGraphMsg_reflection_;
  delete RegisterRenderReqMsg::default_instance_;
  delete RegisterRenderReqMsg_reflection_;
  delete RegisterRenderRepMsg::default_instance_;
  delete RegisterRenderRepMsg_reflection_;
}

void protobuf_AddDesc_SceneGraphShapes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026SceneGraphShapes.proto\022\002pb\"l\n\006BoxMsg\022\014"
    "\n\004name\030\001 \002(\t\022\020\n\010x_length\030\002 \002(\001\022\020\n\010y_leng"
    "th\030\003 \002(\001\022\020\n\010z_length\030\004 \002(\001\022\014\n\004mass\030\005 \002(\001"
    "\022\020\n\004pose\030\006 \003(\001B\002\020\001\"[\n\013CylinderMsg\022\014\n\004nam"
    "e\030\001 \002(\t\022\016\n\006radius\030\002 \002(\001\022\016\n\006height\030\003 \002(\001\022"
    "\014\n\004mass\030\004 \002(\001\022\020\n\004pose\030\005 \003(\001B\002\020\001\"I\n\tSpher"
    "eMsg\022\014\n\004name\030\001 \002(\t\022\016\n\006radius\030\002 \002(\001\022\014\n\004ma"
    "ss\030\003 \002(\001\022\020\n\004pose\030\004 \003(\001B\002\020\001\">\n\010PlaneMsg\022\014"
    "\n\004name\030\001 \002(\t\022\022\n\006normal\030\002 \003(\001B\002\020\001\022\020\n\004pose"
    "\030\003 \003(\001B\002\020\001\"p\n\014HeightmapMsg\022\021\n\trow_count\030"
    "\001 \002(\005\022\021\n\tcol_count\030\002 \002(\005\022\022\n\006x_data\030\003 \003(\001"
    "B\002\020\001\022\022\n\006y_data\030\004 \003(\001B\002\020\001\022\022\n\006z_data\030\005 \003(\001"
    "B\002\020\001\";\n\007MeshMsg\022\014\n\004name\030\001 \002(\t\022\020\n\010file_di"
    "r\030\002 \002(\t\022\020\n\004pose\030\003 \003(\001B\002\020\001\".\n\010LightMsg\022\014\n"
    "\004name\030\001 \002(\t\022\024\n\010position\030\002 \003(\001B\002\020\001\"\?\n\013Way"
    "pointMsg\022\014\n\004name\030\001 \002(\t\022\020\n\004pose\030\002 \003(\001B\002\020\001"
    "\022\020\n\010velocity\030\003 \002(\001\"\232\002\n\rSceneGraphMsg\022\021\n\t"
    "timestamp\030\001 \001(\001\022\027\n\003box\030\002 \001(\0132\n.pb.BoxMsg"
    "\022!\n\010cylinder\030\003 \001(\0132\017.pb.CylinderMsg\022\035\n\006s"
    "phere\030\004 \001(\0132\r.pb.SphereMsg\022\033\n\005plane\030\005 \001("
    "\0132\014.pb.PlaneMsg\022#\n\theightmap\030\006 \001(\0132\020.pb."
    "HeightmapMsg\022\031\n\004mesh\030\007 \001(\0132\013.pb.MeshMsg\022"
    "\033\n\005light\030\010 \001(\0132\014.pb.LightMsg\022!\n\010waypoint"
    "\030\t \001(\0132\017.pb.WaypointMsg\">\n\024RegisterRende"
    "rReqMsg\022&\n\013new_objects\030\001 \002(\0132\021.pb.SceneG"
    "raphMsg\"\'\n\024RegisterRenderRepMsg\022\017\n\007succe"
    "ss\030\001 \001(\010", 1048);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneGraphShapes.proto", &protobuf_RegisterTypes);
  BoxMsg::default_instance_ = new BoxMsg();
  CylinderMsg::default_instance_ = new CylinderMsg();
  SphereMsg::default_instance_ = new SphereMsg();
  PlaneMsg::default_instance_ = new PlaneMsg();
  HeightmapMsg::default_instance_ = new HeightmapMsg();
  MeshMsg::default_instance_ = new MeshMsg();
  LightMsg::default_instance_ = new LightMsg();
  WaypointMsg::default_instance_ = new WaypointMsg();
  SceneGraphMsg::default_instance_ = new SceneGraphMsg();
  RegisterRenderReqMsg::default_instance_ = new RegisterRenderReqMsg();
  RegisterRenderRepMsg::default_instance_ = new RegisterRenderRepMsg();
  BoxMsg::default_instance_->InitAsDefaultInstance();
  CylinderMsg::default_instance_->InitAsDefaultInstance();
  SphereMsg::default_instance_->InitAsDefaultInstance();
  PlaneMsg::default_instance_->InitAsDefaultInstance();
  HeightmapMsg::default_instance_->InitAsDefaultInstance();
  MeshMsg::default_instance_->InitAsDefaultInstance();
  LightMsg::default_instance_->InitAsDefaultInstance();
  WaypointMsg::default_instance_->InitAsDefaultInstance();
  SceneGraphMsg::default_instance_->InitAsDefaultInstance();
  RegisterRenderReqMsg::default_instance_->InitAsDefaultInstance();
  RegisterRenderRepMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneGraphShapes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneGraphShapes_2eproto {
  StaticDescriptorInitializer_SceneGraphShapes_2eproto() {
    protobuf_AddDesc_SceneGraphShapes_2eproto();
  }
} static_descriptor_initializer_SceneGraphShapes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BoxMsg::kNameFieldNumber;
const int BoxMsg::kXLengthFieldNumber;
const int BoxMsg::kYLengthFieldNumber;
const int BoxMsg::kZLengthFieldNumber;
const int BoxMsg::kMassFieldNumber;
const int BoxMsg::kPoseFieldNumber;
#endif  // !_MSC_VER

BoxMsg::BoxMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoxMsg::InitAsDefaultInstance() {
}

BoxMsg::BoxMsg(const BoxMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoxMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_length_ = 0;
  y_length_ = 0;
  z_length_ = 0;
  mass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxMsg::~BoxMsg() {
  SharedDtor();
}

void BoxMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BoxMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxMsg_descriptor_;
}

const BoxMsg& BoxMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

BoxMsg* BoxMsg::default_instance_ = NULL;

BoxMsg* BoxMsg::New() const {
  return new BoxMsg;
}

void BoxMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    x_length_ = 0;
    y_length_ = 0;
    z_length_ = 0;
    mass_ = 0;
  }
  pose_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_x_length;
        break;
      }

      // required double x_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_length_)));
          set_has_x_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_y_length;
        break;
      }

      // required double y_length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_length_)));
          set_has_y_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_z_length;
        break;
      }

      // required double z_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_length_)));
          set_has_z_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_mass;
        break;
      }

      // required double mass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pose;
        break;
      }

      // repeated double pose = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_pose())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double x_length = 2;
  if (has_x_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x_length(), output);
  }

  // required double y_length = 3;
  if (has_y_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y_length(), output);
  }

  // required double z_length = 4;
  if (has_z_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->z_length(), output);
  }

  // required double mass = 5;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->mass(), output);
  }

  // repeated double pose = 6 [packed = true];
  if (this->pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pose_cached_byte_size_);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->pose(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoxMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double x_length = 2;
  if (has_x_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x_length(), target);
  }

  // required double y_length = 3;
  if (has_y_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y_length(), target);
  }

  // required double z_length = 4;
  if (has_z_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->z_length(), target);
  }

  // required double mass = 5;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->mass(), target);
  }

  // repeated double pose = 6 [packed = true];
  if (this->pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pose_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pose(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoxMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double x_length = 2;
    if (has_x_length()) {
      total_size += 1 + 8;
    }

    // required double y_length = 3;
    if (has_y_length()) {
      total_size += 1 + 8;
    }

    // required double z_length = 4;
    if (has_z_length()) {
      total_size += 1 + 8;
    }

    // required double mass = 5;
    if (has_mass()) {
      total_size += 1 + 8;
    }

  }
  // repeated double pose = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->pose_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxMsg::MergeFrom(const BoxMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pose_.MergeFrom(from.pose_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_x_length()) {
      set_x_length(from.x_length());
    }
    if (from.has_y_length()) {
      set_y_length(from.y_length());
    }
    if (from.has_z_length()) {
      set_z_length(from.z_length());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxMsg::CopyFrom(const BoxMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BoxMsg::Swap(BoxMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(x_length_, other->x_length_);
    std::swap(y_length_, other->y_length_);
    std::swap(z_length_, other->z_length_);
    std::swap(mass_, other->mass_);
    pose_.Swap(&other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxMsg_descriptor_;
  metadata.reflection = BoxMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CylinderMsg::kNameFieldNumber;
const int CylinderMsg::kRadiusFieldNumber;
const int CylinderMsg::kHeightFieldNumber;
const int CylinderMsg::kMassFieldNumber;
const int CylinderMsg::kPoseFieldNumber;
#endif  // !_MSC_VER

CylinderMsg::CylinderMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CylinderMsg::InitAsDefaultInstance() {
}

CylinderMsg::CylinderMsg(const CylinderMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CylinderMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  radius_ = 0;
  height_ = 0;
  mass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CylinderMsg::~CylinderMsg() {
  SharedDtor();
}

void CylinderMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CylinderMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CylinderMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CylinderMsg_descriptor_;
}

const CylinderMsg& CylinderMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

CylinderMsg* CylinderMsg::default_instance_ = NULL;

CylinderMsg* CylinderMsg::New() const {
  return new CylinderMsg;
}

void CylinderMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    radius_ = 0;
    height_ = 0;
    mass_ = 0;
  }
  pose_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CylinderMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_radius;
        break;
      }

      // required double radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_height;
        break;
      }

      // required double height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_mass;
        break;
      }

      // required double mass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }

      // repeated double pose = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_pose())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CylinderMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }

  // required double height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  // required double mass = 4;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->mass(), output);
  }

  // repeated double pose = 5 [packed = true];
  if (this->pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pose_cached_byte_size_);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->pose(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CylinderMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }

  // required double height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  // required double mass = 4;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->mass(), target);
  }

  // repeated double pose = 5 [packed = true];
  if (this->pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pose_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pose(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CylinderMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double radius = 2;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required double height = 3;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // required double mass = 4;
    if (has_mass()) {
      total_size += 1 + 8;
    }

  }
  // repeated double pose = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->pose_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CylinderMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CylinderMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CylinderMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CylinderMsg::MergeFrom(const CylinderMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pose_.MergeFrom(from.pose_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CylinderMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderMsg::CopyFrom(const CylinderMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CylinderMsg::Swap(CylinderMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(radius_, other->radius_);
    std::swap(height_, other->height_);
    std::swap(mass_, other->mass_);
    pose_.Swap(&other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CylinderMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CylinderMsg_descriptor_;
  metadata.reflection = CylinderMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SphereMsg::kNameFieldNumber;
const int SphereMsg::kRadiusFieldNumber;
const int SphereMsg::kMassFieldNumber;
const int SphereMsg::kPoseFieldNumber;
#endif  // !_MSC_VER

SphereMsg::SphereMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SphereMsg::InitAsDefaultInstance() {
}

SphereMsg::SphereMsg(const SphereMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SphereMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  radius_ = 0;
  mass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SphereMsg::~SphereMsg() {
  SharedDtor();
}

void SphereMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SphereMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SphereMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SphereMsg_descriptor_;
}

const SphereMsg& SphereMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

SphereMsg* SphereMsg::default_instance_ = NULL;

SphereMsg* SphereMsg::New() const {
  return new SphereMsg;
}

void SphereMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    radius_ = 0;
    mass_ = 0;
  }
  pose_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SphereMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_radius;
        break;
      }

      // required double radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_mass;
        break;
      }

      // required double mass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pose;
        break;
      }

      // repeated double pose = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_pose())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SphereMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }

  // required double mass = 3;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mass(), output);
  }

  // repeated double pose = 4 [packed = true];
  if (this->pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pose_cached_byte_size_);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->pose(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SphereMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }

  // required double mass = 3;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mass(), target);
  }

  // repeated double pose = 4 [packed = true];
  if (this->pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pose_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pose(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SphereMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double radius = 2;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required double mass = 3;
    if (has_mass()) {
      total_size += 1 + 8;
    }

  }
  // repeated double pose = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->pose_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SphereMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SphereMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SphereMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SphereMsg::MergeFrom(const SphereMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pose_.MergeFrom(from.pose_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SphereMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SphereMsg::CopyFrom(const SphereMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SphereMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SphereMsg::Swap(SphereMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(radius_, other->radius_);
    std::swap(mass_, other->mass_);
    pose_.Swap(&other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SphereMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SphereMsg_descriptor_;
  metadata.reflection = SphereMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaneMsg::kNameFieldNumber;
const int PlaneMsg::kNormalFieldNumber;
const int PlaneMsg::kPoseFieldNumber;
#endif  // !_MSC_VER

PlaneMsg::PlaneMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaneMsg::InitAsDefaultInstance() {
}

PlaneMsg::PlaneMsg(const PlaneMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaneMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaneMsg::~PlaneMsg() {
  SharedDtor();
}

void PlaneMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlaneMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaneMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaneMsg_descriptor_;
}

const PlaneMsg& PlaneMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

PlaneMsg* PlaneMsg::default_instance_ = NULL;

PlaneMsg* PlaneMsg::New() const {
  return new PlaneMsg;
}

void PlaneMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  normal_.Clear();
  pose_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaneMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normal;
        break;
      }

      // repeated double normal = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_normal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_normal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // repeated double pose = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_pose())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaneMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double normal = 2 [packed = true];
  if (this->normal_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_normal_cached_byte_size_);
  }
  for (int i = 0; i < this->normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->normal(i), output);
  }

  // repeated double pose = 3 [packed = true];
  if (this->pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pose_cached_byte_size_);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->pose(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaneMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double normal = 2 [packed = true];
  if (this->normal_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _normal_cached_byte_size_, target);
  }
  for (int i = 0; i < this->normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->normal(i), target);
  }

  // repeated double pose = 3 [packed = true];
  if (this->pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pose_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pose(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaneMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated double normal = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->normal_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _normal_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double pose = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->pose_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaneMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaneMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaneMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaneMsg::MergeFrom(const PlaneMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_.MergeFrom(from.normal_);
  pose_.MergeFrom(from.pose_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaneMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaneMsg::CopyFrom(const PlaneMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlaneMsg::Swap(PlaneMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    normal_.Swap(&other->normal_);
    pose_.Swap(&other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaneMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaneMsg_descriptor_;
  metadata.reflection = PlaneMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeightmapMsg::kRowCountFieldNumber;
const int HeightmapMsg::kColCountFieldNumber;
const int HeightmapMsg::kXDataFieldNumber;
const int HeightmapMsg::kYDataFieldNumber;
const int HeightmapMsg::kZDataFieldNumber;
#endif  // !_MSC_VER

HeightmapMsg::HeightmapMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeightmapMsg::InitAsDefaultInstance() {
}

HeightmapMsg::HeightmapMsg(const HeightmapMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeightmapMsg::SharedCtor() {
  _cached_size_ = 0;
  row_count_ = 0;
  col_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeightmapMsg::~HeightmapMsg() {
  SharedDtor();
}

void HeightmapMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeightmapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightmapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeightmapMsg_descriptor_;
}

const HeightmapMsg& HeightmapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

HeightmapMsg* HeightmapMsg::default_instance_ = NULL;

HeightmapMsg* HeightmapMsg::New() const {
  return new HeightmapMsg;
}

void HeightmapMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_count_ = 0;
    col_count_ = 0;
  }
  x_data_.Clear();
  y_data_.Clear();
  z_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeightmapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_count_)));
          set_has_row_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col_count;
        break;
      }

      // required int32 col_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_count_)));
          set_has_col_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_x_data;
        break;
      }

      // repeated double x_data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_x_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y_data;
        break;
      }

      // repeated double y_data = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_y_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_y_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_z_data;
        break;
      }

      // repeated double z_data = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_z_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_z_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeightmapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row_count = 1;
  if (has_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row_count(), output);
  }

  // required int32 col_count = 2;
  if (has_col_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col_count(), output);
  }

  // repeated double x_data = 3 [packed = true];
  if (this->x_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_data_cached_byte_size_);
  }
  for (int i = 0; i < this->x_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->x_data(i), output);
  }

  // repeated double y_data = 4 [packed = true];
  if (this->y_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_data_cached_byte_size_);
  }
  for (int i = 0; i < this->y_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->y_data(i), output);
  }

  // repeated double z_data = 5 [packed = true];
  if (this->z_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_z_data_cached_byte_size_);
  }
  for (int i = 0; i < this->z_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->z_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeightmapMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row_count = 1;
  if (has_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row_count(), target);
  }

  // required int32 col_count = 2;
  if (has_col_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col_count(), target);
  }

  // repeated double x_data = 3 [packed = true];
  if (this->x_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->x_data(i), target);
  }

  // repeated double y_data = 4 [packed = true];
  if (this->y_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->y_data(i), target);
  }

  // repeated double z_data = 5 [packed = true];
  if (this->z_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _z_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->z_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->z_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeightmapMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row_count = 1;
    if (has_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_count());
    }

    // required int32 col_count = 2;
    if (has_col_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col_count());
    }

  }
  // repeated double x_data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->x_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double y_data = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->y_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double z_data = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->z_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _z_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightmapMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeightmapMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeightmapMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeightmapMsg::MergeFrom(const HeightmapMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_data_.MergeFrom(from.x_data_);
  y_data_.MergeFrom(from.y_data_);
  z_data_.MergeFrom(from.z_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row_count()) {
      set_row_count(from.row_count());
    }
    if (from.has_col_count()) {
      set_col_count(from.col_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeightmapMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapMsg::CopyFrom(const HeightmapMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeightmapMsg::Swap(HeightmapMsg* other) {
  if (other != this) {
    std::swap(row_count_, other->row_count_);
    std::swap(col_count_, other->col_count_);
    x_data_.Swap(&other->x_data_);
    y_data_.Swap(&other->y_data_);
    z_data_.Swap(&other->z_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeightmapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeightmapMsg_descriptor_;
  metadata.reflection = HeightmapMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeshMsg::kNameFieldNumber;
const int MeshMsg::kFileDirFieldNumber;
const int MeshMsg::kPoseFieldNumber;
#endif  // !_MSC_VER

MeshMsg::MeshMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeshMsg::InitAsDefaultInstance() {
}

MeshMsg::MeshMsg(const MeshMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeshMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeshMsg::~MeshMsg() {
  SharedDtor();
}

void MeshMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (file_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete file_dir_;
  }
  if (this != default_instance_) {
  }
}

void MeshMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeshMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeshMsg_descriptor_;
}

const MeshMsg& MeshMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

MeshMsg* MeshMsg::default_instance_ = NULL;

MeshMsg* MeshMsg::New() const {
  return new MeshMsg;
}

void MeshMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_file_dir()) {
      if (file_dir_ != &::google::protobuf::internal::kEmptyString) {
        file_dir_->clear();
      }
    }
  }
  pose_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeshMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_dir;
        break;
      }

      // required string file_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_dir().data(), this->file_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // repeated double pose = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_pose())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeshMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string file_dir = 2;
  if (has_file_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_dir().data(), this->file_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_dir(), output);
  }

  // repeated double pose = 3 [packed = true];
  if (this->pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pose_cached_byte_size_);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->pose(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeshMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string file_dir = 2;
  if (has_file_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_dir().data(), this->file_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_dir(), target);
  }

  // repeated double pose = 3 [packed = true];
  if (this->pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pose_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pose(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeshMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string file_dir = 2;
    if (has_file_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_dir());
    }

  }
  // repeated double pose = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->pose_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeshMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeshMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeshMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeshMsg::MergeFrom(const MeshMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pose_.MergeFrom(from.pose_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_file_dir()) {
      set_file_dir(from.file_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeshMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshMsg::CopyFrom(const MeshMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MeshMsg::Swap(MeshMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(file_dir_, other->file_dir_);
    pose_.Swap(&other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeshMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeshMsg_descriptor_;
  metadata.reflection = MeshMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LightMsg::kNameFieldNumber;
const int LightMsg::kPositionFieldNumber;
#endif  // !_MSC_VER

LightMsg::LightMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LightMsg::InitAsDefaultInstance() {
}

LightMsg::LightMsg(const LightMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LightMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LightMsg::~LightMsg() {
  SharedDtor();
}

void LightMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LightMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightMsg_descriptor_;
}

const LightMsg& LightMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

LightMsg* LightMsg::default_instance_ = NULL;

LightMsg* LightMsg::New() const {
  return new LightMsg;
}

void LightMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  position_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LightMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // repeated double position = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LightMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double position = 2 [packed = true];
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->position(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LightMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double position = 2 [packed = true];
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LightMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated double position = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->position_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LightMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LightMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LightMsg::MergeFrom(const LightMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LightMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightMsg::CopyFrom(const LightMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LightMsg::Swap(LightMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    position_.Swap(&other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LightMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightMsg_descriptor_;
  metadata.reflection = LightMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaypointMsg::kNameFieldNumber;
const int WaypointMsg::kPoseFieldNumber;
const int WaypointMsg::kVelocityFieldNumber;
#endif  // !_MSC_VER

WaypointMsg::WaypointMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WaypointMsg::InitAsDefaultInstance() {
}

WaypointMsg::WaypointMsg(const WaypointMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WaypointMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  velocity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaypointMsg::~WaypointMsg() {
  SharedDtor();
}

void WaypointMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WaypointMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaypointMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaypointMsg_descriptor_;
}

const WaypointMsg& WaypointMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

WaypointMsg* WaypointMsg::default_instance_ = NULL;

WaypointMsg* WaypointMsg::New() const {
  return new WaypointMsg;
}

void WaypointMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    velocity_ = 0;
  }
  pose_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaypointMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // repeated double pose = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_pose())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_velocity;
        break;
      }

      // required double velocity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WaypointMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double pose = 2 [packed = true];
  if (this->pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pose_cached_byte_size_);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->pose(i), output);
  }

  // required double velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WaypointMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double pose = 2 [packed = true];
  if (this->pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pose_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pose(i), target);
  }

  // required double velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WaypointMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double velocity = 3;
    if (has_velocity()) {
      total_size += 1 + 8;
    }

  }
  // repeated double pose = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->pose_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaypointMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaypointMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaypointMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaypointMsg::MergeFrom(const WaypointMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pose_.MergeFrom(from.pose_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaypointMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointMsg::CopyFrom(const WaypointMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void WaypointMsg::Swap(WaypointMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    pose_.Swap(&other->pose_);
    std::swap(velocity_, other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaypointMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaypointMsg_descriptor_;
  metadata.reflection = WaypointMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneGraphMsg::kTimestampFieldNumber;
const int SceneGraphMsg::kBoxFieldNumber;
const int SceneGraphMsg::kCylinderFieldNumber;
const int SceneGraphMsg::kSphereFieldNumber;
const int SceneGraphMsg::kPlaneFieldNumber;
const int SceneGraphMsg::kHeightmapFieldNumber;
const int SceneGraphMsg::kMeshFieldNumber;
const int SceneGraphMsg::kLightFieldNumber;
const int SceneGraphMsg::kWaypointFieldNumber;
#endif  // !_MSC_VER

SceneGraphMsg::SceneGraphMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneGraphMsg::InitAsDefaultInstance() {
  box_ = const_cast< ::pb::BoxMsg*>(&::pb::BoxMsg::default_instance());
  cylinder_ = const_cast< ::pb::CylinderMsg*>(&::pb::CylinderMsg::default_instance());
  sphere_ = const_cast< ::pb::SphereMsg*>(&::pb::SphereMsg::default_instance());
  plane_ = const_cast< ::pb::PlaneMsg*>(&::pb::PlaneMsg::default_instance());
  heightmap_ = const_cast< ::pb::HeightmapMsg*>(&::pb::HeightmapMsg::default_instance());
  mesh_ = const_cast< ::pb::MeshMsg*>(&::pb::MeshMsg::default_instance());
  light_ = const_cast< ::pb::LightMsg*>(&::pb::LightMsg::default_instance());
  waypoint_ = const_cast< ::pb::WaypointMsg*>(&::pb::WaypointMsg::default_instance());
}

SceneGraphMsg::SceneGraphMsg(const SceneGraphMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneGraphMsg::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  box_ = NULL;
  cylinder_ = NULL;
  sphere_ = NULL;
  plane_ = NULL;
  heightmap_ = NULL;
  mesh_ = NULL;
  light_ = NULL;
  waypoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneGraphMsg::~SceneGraphMsg() {
  SharedDtor();
}

void SceneGraphMsg::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
    delete cylinder_;
    delete sphere_;
    delete plane_;
    delete heightmap_;
    delete mesh_;
    delete light_;
    delete waypoint_;
  }
}

void SceneGraphMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGraphMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneGraphMsg_descriptor_;
}

const SceneGraphMsg& SceneGraphMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

SceneGraphMsg* SceneGraphMsg::default_instance_ = NULL;

SceneGraphMsg* SceneGraphMsg::New() const {
  return new SceneGraphMsg;
}

void SceneGraphMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    if (has_box()) {
      if (box_ != NULL) box_->::pb::BoxMsg::Clear();
    }
    if (has_cylinder()) {
      if (cylinder_ != NULL) cylinder_->::pb::CylinderMsg::Clear();
    }
    if (has_sphere()) {
      if (sphere_ != NULL) sphere_->::pb::SphereMsg::Clear();
    }
    if (has_plane()) {
      if (plane_ != NULL) plane_->::pb::PlaneMsg::Clear();
    }
    if (has_heightmap()) {
      if (heightmap_ != NULL) heightmap_->::pb::HeightmapMsg::Clear();
    }
    if (has_mesh()) {
      if (mesh_ != NULL) mesh_->::pb::MeshMsg::Clear();
    }
    if (has_light()) {
      if (light_ != NULL) light_->::pb::LightMsg::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_waypoint()) {
      if (waypoint_ != NULL) waypoint_->::pb::WaypointMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneGraphMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_box;
        break;
      }

      // optional .pb.BoxMsg box = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cylinder;
        break;
      }

      // optional .pb.CylinderMsg cylinder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cylinder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cylinder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sphere;
        break;
      }

      // optional .pb.SphereMsg sphere = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sphere:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sphere()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_plane;
        break;
      }

      // optional .pb.PlaneMsg plane = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plane()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_heightmap;
        break;
      }

      // optional .pb.HeightmapMsg heightmap = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heightmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heightmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mesh;
        break;
      }

      // optional .pb.MeshMsg mesh = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_light;
        break;
      }

      // optional .pb.LightMsg light = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_waypoint;
        break;
      }

      // optional .pb.WaypointMsg waypoint = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waypoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waypoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneGraphMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional .pb.BoxMsg box = 2;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->box(), output);
  }

  // optional .pb.CylinderMsg cylinder = 3;
  if (has_cylinder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cylinder(), output);
  }

  // optional .pb.SphereMsg sphere = 4;
  if (has_sphere()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sphere(), output);
  }

  // optional .pb.PlaneMsg plane = 5;
  if (has_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->plane(), output);
  }

  // optional .pb.HeightmapMsg heightmap = 6;
  if (has_heightmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->heightmap(), output);
  }

  // optional .pb.MeshMsg mesh = 7;
  if (has_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mesh(), output);
  }

  // optional .pb.LightMsg light = 8;
  if (has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->light(), output);
  }

  // optional .pb.WaypointMsg waypoint = 9;
  if (has_waypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->waypoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneGraphMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional .pb.BoxMsg box = 2;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->box(), target);
  }

  // optional .pb.CylinderMsg cylinder = 3;
  if (has_cylinder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cylinder(), target);
  }

  // optional .pb.SphereMsg sphere = 4;
  if (has_sphere()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sphere(), target);
  }

  // optional .pb.PlaneMsg plane = 5;
  if (has_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->plane(), target);
  }

  // optional .pb.HeightmapMsg heightmap = 6;
  if (has_heightmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->heightmap(), target);
  }

  // optional .pb.MeshMsg mesh = 7;
  if (has_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mesh(), target);
  }

  // optional .pb.LightMsg light = 8;
  if (has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->light(), target);
  }

  // optional .pb.WaypointMsg waypoint = 9;
  if (has_waypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->waypoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneGraphMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .pb.BoxMsg box = 2;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box());
    }

    // optional .pb.CylinderMsg cylinder = 3;
    if (has_cylinder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cylinder());
    }

    // optional .pb.SphereMsg sphere = 4;
    if (has_sphere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sphere());
    }

    // optional .pb.PlaneMsg plane = 5;
    if (has_plane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plane());
    }

    // optional .pb.HeightmapMsg heightmap = 6;
    if (has_heightmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heightmap());
    }

    // optional .pb.MeshMsg mesh = 7;
    if (has_mesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesh());
    }

    // optional .pb.LightMsg light = 8;
    if (has_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->light());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.WaypointMsg waypoint = 9;
    if (has_waypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waypoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGraphMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneGraphMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneGraphMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneGraphMsg::MergeFrom(const SceneGraphMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_box()) {
      mutable_box()->::pb::BoxMsg::MergeFrom(from.box());
    }
    if (from.has_cylinder()) {
      mutable_cylinder()->::pb::CylinderMsg::MergeFrom(from.cylinder());
    }
    if (from.has_sphere()) {
      mutable_sphere()->::pb::SphereMsg::MergeFrom(from.sphere());
    }
    if (from.has_plane()) {
      mutable_plane()->::pb::PlaneMsg::MergeFrom(from.plane());
    }
    if (from.has_heightmap()) {
      mutable_heightmap()->::pb::HeightmapMsg::MergeFrom(from.heightmap());
    }
    if (from.has_mesh()) {
      mutable_mesh()->::pb::MeshMsg::MergeFrom(from.mesh());
    }
    if (from.has_light()) {
      mutable_light()->::pb::LightMsg::MergeFrom(from.light());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_waypoint()) {
      mutable_waypoint()->::pb::WaypointMsg::MergeFrom(from.waypoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneGraphMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGraphMsg::CopyFrom(const SceneGraphMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGraphMsg::IsInitialized() const {

  if (has_box()) {
    if (!this->box().IsInitialized()) return false;
  }
  if (has_cylinder()) {
    if (!this->cylinder().IsInitialized()) return false;
  }
  if (has_sphere()) {
    if (!this->sphere().IsInitialized()) return false;
  }
  if (has_plane()) {
    if (!this->plane().IsInitialized()) return false;
  }
  if (has_heightmap()) {
    if (!this->heightmap().IsInitialized()) return false;
  }
  if (has_mesh()) {
    if (!this->mesh().IsInitialized()) return false;
  }
  if (has_light()) {
    if (!this->light().IsInitialized()) return false;
  }
  if (has_waypoint()) {
    if (!this->waypoint().IsInitialized()) return false;
  }
  return true;
}

void SceneGraphMsg::Swap(SceneGraphMsg* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(box_, other->box_);
    std::swap(cylinder_, other->cylinder_);
    std::swap(sphere_, other->sphere_);
    std::swap(plane_, other->plane_);
    std::swap(heightmap_, other->heightmap_);
    std::swap(mesh_, other->mesh_);
    std::swap(light_, other->light_);
    std::swap(waypoint_, other->waypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneGraphMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneGraphMsg_descriptor_;
  metadata.reflection = SceneGraphMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRenderReqMsg::kNewObjectsFieldNumber;
#endif  // !_MSC_VER

RegisterRenderReqMsg::RegisterRenderReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterRenderReqMsg::InitAsDefaultInstance() {
  new_objects_ = const_cast< ::pb::SceneGraphMsg*>(&::pb::SceneGraphMsg::default_instance());
}

RegisterRenderReqMsg::RegisterRenderReqMsg(const RegisterRenderReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterRenderReqMsg::SharedCtor() {
  _cached_size_ = 0;
  new_objects_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRenderReqMsg::~RegisterRenderReqMsg() {
  SharedDtor();
}

void RegisterRenderReqMsg::SharedDtor() {
  if (this != default_instance_) {
    delete new_objects_;
  }
}

void RegisterRenderReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRenderReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRenderReqMsg_descriptor_;
}

const RegisterRenderReqMsg& RegisterRenderReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

RegisterRenderReqMsg* RegisterRenderReqMsg::default_instance_ = NULL;

RegisterRenderReqMsg* RegisterRenderReqMsg::New() const {
  return new RegisterRenderReqMsg;
}

void RegisterRenderReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_objects()) {
      if (new_objects_ != NULL) new_objects_->::pb::SceneGraphMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRenderReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.SceneGraphMsg new_objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterRenderReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.SceneGraphMsg new_objects = 1;
  if (has_new_objects()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->new_objects(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterRenderReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.SceneGraphMsg new_objects = 1;
  if (has_new_objects()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->new_objects(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterRenderReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.SceneGraphMsg new_objects = 1;
    if (has_new_objects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_objects());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRenderReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRenderReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRenderReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRenderReqMsg::MergeFrom(const RegisterRenderReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_objects()) {
      mutable_new_objects()->::pb::SceneGraphMsg::MergeFrom(from.new_objects());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRenderReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRenderReqMsg::CopyFrom(const RegisterRenderReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRenderReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_new_objects()) {
    if (!this->new_objects().IsInitialized()) return false;
  }
  return true;
}

void RegisterRenderReqMsg::Swap(RegisterRenderReqMsg* other) {
  if (other != this) {
    std::swap(new_objects_, other->new_objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRenderReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRenderReqMsg_descriptor_;
  metadata.reflection = RegisterRenderReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRenderRepMsg::kSuccessFieldNumber;
#endif  // !_MSC_VER

RegisterRenderRepMsg::RegisterRenderRepMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterRenderRepMsg::InitAsDefaultInstance() {
}

RegisterRenderRepMsg::RegisterRenderRepMsg(const RegisterRenderRepMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterRenderRepMsg::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRenderRepMsg::~RegisterRenderRepMsg() {
  SharedDtor();
}

void RegisterRenderRepMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterRenderRepMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRenderRepMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRenderRepMsg_descriptor_;
}

const RegisterRenderRepMsg& RegisterRenderRepMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneGraphShapes_2eproto();
  return *default_instance_;
}

RegisterRenderRepMsg* RegisterRenderRepMsg::default_instance_ = NULL;

RegisterRenderRepMsg* RegisterRenderRepMsg::New() const {
  return new RegisterRenderRepMsg;
}

void RegisterRenderRepMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRenderRepMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterRenderRepMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterRenderRepMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterRenderRepMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRenderRepMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRenderRepMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRenderRepMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRenderRepMsg::MergeFrom(const RegisterRenderRepMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRenderRepMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRenderRepMsg::CopyFrom(const RegisterRenderRepMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRenderRepMsg::IsInitialized() const {

  return true;
}

void RegisterRenderRepMsg::Swap(RegisterRenderRepMsg* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRenderRepMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRenderRepMsg_descriptor_;
  metadata.reflection = RegisterRenderRepMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
