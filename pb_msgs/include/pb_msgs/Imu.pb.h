// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Imu.proto

#ifndef PROTOBUF_Imu_2eproto__INCLUDED
#define PROTOBUF_Imu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Imu_2eproto();
void protobuf_AssignDesc_Imu_2eproto();
void protobuf_ShutdownFile_Imu_2eproto();

class ImuMsg;

// ===================================================================

class ImuMsg : public ::google::protobuf::Message {
 public:
  ImuMsg();
  virtual ~ImuMsg();

  ImuMsg(const ImuMsg& from);

  inline ImuMsg& operator=(const ImuMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImuMsg& default_instance();

  void Swap(ImuMsg* other);

  // implements Message ----------------------------------------------

  ImuMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImuMsg& from);
  void MergeFrom(const ImuMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional double device_time = 2;
  inline bool has_device_time() const;
  inline void clear_device_time();
  static const int kDeviceTimeFieldNumber = 2;
  inline double device_time() const;
  inline void set_device_time(double value);

  // optional double system_time = 3;
  inline bool has_system_time() const;
  inline void clear_system_time();
  static const int kSystemTimeFieldNumber = 3;
  inline double system_time() const;
  inline void set_system_time(double value);

  // optional .pb.VectorMsg accel = 4;
  inline bool has_accel() const;
  inline void clear_accel();
  static const int kAccelFieldNumber = 4;
  inline const ::pb::VectorMsg& accel() const;
  inline ::pb::VectorMsg* mutable_accel();
  inline ::pb::VectorMsg* release_accel();
  inline void set_allocated_accel(::pb::VectorMsg* accel);

  // optional .pb.VectorMsg gyro = 5;
  inline bool has_gyro() const;
  inline void clear_gyro();
  static const int kGyroFieldNumber = 5;
  inline const ::pb::VectorMsg& gyro() const;
  inline ::pb::VectorMsg* mutable_gyro();
  inline ::pb::VectorMsg* release_gyro();
  inline void set_allocated_gyro(::pb::VectorMsg* gyro);

  // optional .pb.VectorMsg mag = 6;
  inline bool has_mag() const;
  inline void clear_mag();
  static const int kMagFieldNumber = 6;
  inline const ::pb::VectorMsg& mag() const;
  inline ::pb::VectorMsg* mutable_mag();
  inline ::pb::VectorMsg* release_mag();
  inline void set_allocated_mag(::pb::VectorMsg* mag);

  // @@protoc_insertion_point(class_scope:pb.ImuMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_device_time();
  inline void clear_has_device_time();
  inline void set_has_system_time();
  inline void clear_has_system_time();
  inline void set_has_accel();
  inline void clear_has_accel();
  inline void set_has_gyro();
  inline void clear_has_gyro();
  inline void set_has_mag();
  inline void clear_has_mag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double device_time_;
  double system_time_;
  ::pb::VectorMsg* accel_;
  ::pb::VectorMsg* gyro_;
  ::pb::VectorMsg* mag_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Imu_2eproto();
  friend void protobuf_AssignDesc_Imu_2eproto();
  friend void protobuf_ShutdownFile_Imu_2eproto();

  void InitAsDefaultInstance();
  static ImuMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// ImuMsg

// optional int32 id = 1;
inline bool ImuMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImuMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImuMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImuMsg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ImuMsg::id() const {
  return id_;
}
inline void ImuMsg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional double device_time = 2;
inline bool ImuMsg::has_device_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImuMsg::set_has_device_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImuMsg::clear_has_device_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImuMsg::clear_device_time() {
  device_time_ = 0;
  clear_has_device_time();
}
inline double ImuMsg::device_time() const {
  return device_time_;
}
inline void ImuMsg::set_device_time(double value) {
  set_has_device_time();
  device_time_ = value;
}

// optional double system_time = 3;
inline bool ImuMsg::has_system_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImuMsg::set_has_system_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImuMsg::clear_has_system_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImuMsg::clear_system_time() {
  system_time_ = 0;
  clear_has_system_time();
}
inline double ImuMsg::system_time() const {
  return system_time_;
}
inline void ImuMsg::set_system_time(double value) {
  set_has_system_time();
  system_time_ = value;
}

// optional .pb.VectorMsg accel = 4;
inline bool ImuMsg::has_accel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImuMsg::set_has_accel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImuMsg::clear_has_accel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImuMsg::clear_accel() {
  if (accel_ != NULL) accel_->::pb::VectorMsg::Clear();
  clear_has_accel();
}
inline const ::pb::VectorMsg& ImuMsg::accel() const {
  return accel_ != NULL ? *accel_ : *default_instance_->accel_;
}
inline ::pb::VectorMsg* ImuMsg::mutable_accel() {
  set_has_accel();
  if (accel_ == NULL) accel_ = new ::pb::VectorMsg;
  return accel_;
}
inline ::pb::VectorMsg* ImuMsg::release_accel() {
  clear_has_accel();
  ::pb::VectorMsg* temp = accel_;
  accel_ = NULL;
  return temp;
}
inline void ImuMsg::set_allocated_accel(::pb::VectorMsg* accel) {
  delete accel_;
  accel_ = accel;
  if (accel) {
    set_has_accel();
  } else {
    clear_has_accel();
  }
}

// optional .pb.VectorMsg gyro = 5;
inline bool ImuMsg::has_gyro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImuMsg::set_has_gyro() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImuMsg::clear_has_gyro() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImuMsg::clear_gyro() {
  if (gyro_ != NULL) gyro_->::pb::VectorMsg::Clear();
  clear_has_gyro();
}
inline const ::pb::VectorMsg& ImuMsg::gyro() const {
  return gyro_ != NULL ? *gyro_ : *default_instance_->gyro_;
}
inline ::pb::VectorMsg* ImuMsg::mutable_gyro() {
  set_has_gyro();
  if (gyro_ == NULL) gyro_ = new ::pb::VectorMsg;
  return gyro_;
}
inline ::pb::VectorMsg* ImuMsg::release_gyro() {
  clear_has_gyro();
  ::pb::VectorMsg* temp = gyro_;
  gyro_ = NULL;
  return temp;
}
inline void ImuMsg::set_allocated_gyro(::pb::VectorMsg* gyro) {
  delete gyro_;
  gyro_ = gyro;
  if (gyro) {
    set_has_gyro();
  } else {
    clear_has_gyro();
  }
}

// optional .pb.VectorMsg mag = 6;
inline bool ImuMsg::has_mag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImuMsg::set_has_mag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImuMsg::clear_has_mag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImuMsg::clear_mag() {
  if (mag_ != NULL) mag_->::pb::VectorMsg::Clear();
  clear_has_mag();
}
inline const ::pb::VectorMsg& ImuMsg::mag() const {
  return mag_ != NULL ? *mag_ : *default_instance_->mag_;
}
inline ::pb::VectorMsg* ImuMsg::mutable_mag() {
  set_has_mag();
  if (mag_ == NULL) mag_ = new ::pb::VectorMsg;
  return mag_;
}
inline ::pb::VectorMsg* ImuMsg::release_mag() {
  clear_has_mag();
  ::pb::VectorMsg* temp = mag_;
  mag_ = NULL;
  return temp;
}
inline void ImuMsg::set_allocated_mag(::pb::VectorMsg* mag) {
  delete mag_;
  mag_ = mag;
  if (mag) {
    set_has_mag();
  } else {
    clear_has_mag();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Imu_2eproto__INCLUDED
