// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Image.proto

#ifndef PROTOBUF_Image_2eproto__INCLUDED
#define PROTOBUF_Image_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Image_2eproto();
void protobuf_AssignDesc_Image_2eproto();
void protobuf_ShutdownFile_Image_2eproto();

class ImageInfoMsg;
class ImageMsg;

enum Type {
  PB_BYTE = 5120,
  PB_UNSIGNED_BYTE = 5121,
  PB_SHORT = 5122,
  PB_UNSIGNED_SHORT = 5123,
  PB_INT = 5124,
  PB_UNSIGNED_INT = 5125,
  PB_FLOAT = 5126,
  PB_DOUBLE = 5130
};
bool Type_IsValid(int value);
const Type Type_MIN = PB_BYTE;
const Type Type_MAX = PB_DOUBLE;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Format {
  PB_LUMINANCE = 6409,
  PB_RGB = 6407,
  PB_RGBA = 6408,
  PB_RAW = 1,
  PB_BGR = 32992,
  PB_BGRA = 32993
};
bool Format_IsValid(int value);
const Format Format_MIN = PB_RAW;
const Format Format_MAX = PB_BGRA;
const int Format_ARRAYSIZE = Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* Format_descriptor();
inline const ::std::string& Format_Name(Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    Format_descriptor(), value);
}
inline bool Format_Parse(
    const ::std::string& name, Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Format>(
    Format_descriptor(), name, value);
}
// ===================================================================

class ImageInfoMsg : public ::google::protobuf::Message {
 public:
  ImageInfoMsg();
  virtual ~ImageInfoMsg();

  ImageInfoMsg(const ImageInfoMsg& from);

  inline ImageInfoMsg& operator=(const ImageInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageInfoMsg& default_instance();

  void Swap(ImageInfoMsg* other);

  // implements Message ----------------------------------------------

  ImageInfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageInfoMsg& from);
  void MergeFrom(const ImageInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double exposure = 1;
  inline bool has_exposure() const;
  inline void clear_exposure();
  static const int kExposureFieldNumber = 1;
  inline double exposure() const;
  inline void set_exposure(double value);

  // optional double shutter = 2;
  inline bool has_shutter() const;
  inline void clear_shutter();
  static const int kShutterFieldNumber = 2;
  inline double shutter() const;
  inline void set_shutter(double value);

  // optional double gain = 3;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 3;
  inline double gain() const;
  inline void set_gain(double value);

  // optional double gamma = 4;
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 4;
  inline double gamma() const;
  inline void set_gamma(double value);

  // optional double baseline = 50;
  inline bool has_baseline() const;
  inline void clear_baseline();
  static const int kBaselineFieldNumber = 50;
  inline double baseline() const;
  inline void set_baseline(double value);

  // optional double focal_length = 51;
  inline bool has_focal_length() const;
  inline void clear_focal_length();
  static const int kFocalLengthFieldNumber = 51;
  inline double focal_length() const;
  inline void set_focal_length(double value);

  // @@protoc_insertion_point(class_scope:pb.ImageInfoMsg)
 private:
  inline void set_has_exposure();
  inline void clear_has_exposure();
  inline void set_has_shutter();
  inline void clear_has_shutter();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_baseline();
  inline void clear_has_baseline();
  inline void set_has_focal_length();
  inline void clear_has_focal_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double exposure_;
  double shutter_;
  double gain_;
  double gamma_;
  double baseline_;
  double focal_length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Image_2eproto();
  friend void protobuf_AssignDesc_Image_2eproto();
  friend void protobuf_ShutdownFile_Image_2eproto();

  void InitAsDefaultInstance();
  static ImageInfoMsg* default_instance_;
};
// -------------------------------------------------------------------

class ImageMsg : public ::google::protobuf::Message {
 public:
  ImageMsg();
  virtual ~ImageMsg();

  ImageMsg(const ImageMsg& from);

  inline ImageMsg& operator=(const ImageMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageMsg& default_instance();

  void Swap(ImageMsg* other);

  // implements Message ----------------------------------------------

  ImageMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageMsg& from);
  void MergeFrom(const ImageMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional .pb.Type type = 4 [default = PB_UNSIGNED_BYTE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::pb::Type type() const;
  inline void set_type(::pb::Type value);

  // optional .pb.Format format = 5 [default = PB_RGB];
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 5;
  inline ::pb::Format format() const;
  inline void set_format(::pb::Format value);

  // optional double timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline double timestamp() const;
  inline void set_timestamp(double value);

  // optional .pb.ImageInfoMsg info = 7;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 7;
  inline const ::pb::ImageInfoMsg& info() const;
  inline ::pb::ImageInfoMsg* mutable_info();
  inline ::pb::ImageInfoMsg* release_info();
  inline void set_allocated_info(::pb::ImageInfoMsg* info);

  // @@protoc_insertion_point(class_scope:pb.ImageMsg)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::std::string* data_;
  int type_;
  int format_;
  double timestamp_;
  ::pb::ImageInfoMsg* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Image_2eproto();
  friend void protobuf_AssignDesc_Image_2eproto();
  friend void protobuf_ShutdownFile_Image_2eproto();

  void InitAsDefaultInstance();
  static ImageMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// ImageInfoMsg

// optional double exposure = 1;
inline bool ImageInfoMsg::has_exposure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageInfoMsg::set_has_exposure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageInfoMsg::clear_has_exposure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageInfoMsg::clear_exposure() {
  exposure_ = 0;
  clear_has_exposure();
}
inline double ImageInfoMsg::exposure() const {
  return exposure_;
}
inline void ImageInfoMsg::set_exposure(double value) {
  set_has_exposure();
  exposure_ = value;
}

// optional double shutter = 2;
inline bool ImageInfoMsg::has_shutter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageInfoMsg::set_has_shutter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageInfoMsg::clear_has_shutter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageInfoMsg::clear_shutter() {
  shutter_ = 0;
  clear_has_shutter();
}
inline double ImageInfoMsg::shutter() const {
  return shutter_;
}
inline void ImageInfoMsg::set_shutter(double value) {
  set_has_shutter();
  shutter_ = value;
}

// optional double gain = 3;
inline bool ImageInfoMsg::has_gain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageInfoMsg::set_has_gain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageInfoMsg::clear_has_gain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageInfoMsg::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline double ImageInfoMsg::gain() const {
  return gain_;
}
inline void ImageInfoMsg::set_gain(double value) {
  set_has_gain();
  gain_ = value;
}

// optional double gamma = 4;
inline bool ImageInfoMsg::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageInfoMsg::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageInfoMsg::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageInfoMsg::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline double ImageInfoMsg::gamma() const {
  return gamma_;
}
inline void ImageInfoMsg::set_gamma(double value) {
  set_has_gamma();
  gamma_ = value;
}

// optional double baseline = 50;
inline bool ImageInfoMsg::has_baseline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageInfoMsg::set_has_baseline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageInfoMsg::clear_has_baseline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageInfoMsg::clear_baseline() {
  baseline_ = 0;
  clear_has_baseline();
}
inline double ImageInfoMsg::baseline() const {
  return baseline_;
}
inline void ImageInfoMsg::set_baseline(double value) {
  set_has_baseline();
  baseline_ = value;
}

// optional double focal_length = 51;
inline bool ImageInfoMsg::has_focal_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageInfoMsg::set_has_focal_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageInfoMsg::clear_has_focal_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageInfoMsg::clear_focal_length() {
  focal_length_ = 0;
  clear_has_focal_length();
}
inline double ImageInfoMsg::focal_length() const {
  return focal_length_;
}
inline void ImageInfoMsg::set_focal_length(double value) {
  set_has_focal_length();
  focal_length_ = value;
}

// -------------------------------------------------------------------

// ImageMsg

// optional uint32 width = 1;
inline bool ImageMsg::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageMsg::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageMsg::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageMsg::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ImageMsg::width() const {
  return width_;
}
inline void ImageMsg::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// optional uint32 height = 2;
inline bool ImageMsg::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageMsg::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageMsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageMsg::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 ImageMsg::height() const {
  return height_;
}
inline void ImageMsg::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// optional bytes data = 3;
inline bool ImageMsg::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageMsg::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageMsg::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageMsg::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ImageMsg::data() const {
  return *data_;
}
inline void ImageMsg::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ImageMsg::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ImageMsg::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageMsg::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ImageMsg::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageMsg::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .pb.Type type = 4 [default = PB_UNSIGNED_BYTE];
inline bool ImageMsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageMsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageMsg::clear_type() {
  type_ = 5121;
  clear_has_type();
}
inline ::pb::Type ImageMsg::type() const {
  return static_cast< ::pb::Type >(type_);
}
inline void ImageMsg::set_type(::pb::Type value) {
  assert(::pb::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .pb.Format format = 5 [default = PB_RGB];
inline bool ImageMsg::has_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageMsg::set_has_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageMsg::clear_has_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageMsg::clear_format() {
  format_ = 6407;
  clear_has_format();
}
inline ::pb::Format ImageMsg::format() const {
  return static_cast< ::pb::Format >(format_);
}
inline void ImageMsg::set_format(::pb::Format value) {
  assert(::pb::Format_IsValid(value));
  set_has_format();
  format_ = value;
}

// optional double timestamp = 6;
inline bool ImageMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageMsg::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double ImageMsg::timestamp() const {
  return timestamp_;
}
inline void ImageMsg::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .pb.ImageInfoMsg info = 7;
inline bool ImageMsg::has_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageMsg::set_has_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageMsg::clear_has_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageMsg::clear_info() {
  if (info_ != NULL) info_->::pb::ImageInfoMsg::Clear();
  clear_has_info();
}
inline const ::pb::ImageInfoMsg& ImageMsg::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::ImageInfoMsg* ImageMsg::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::ImageInfoMsg;
  return info_;
}
inline ::pb::ImageInfoMsg* ImageMsg::release_info() {
  clear_has_info();
  ::pb::ImageInfoMsg* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ImageMsg::set_allocated_info(::pb::ImageInfoMsg* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Type>() {
  return ::pb::Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Format>() {
  return ::pb::Format_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Image_2eproto__INCLUDED
