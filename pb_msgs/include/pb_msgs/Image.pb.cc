// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Image.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* ImageInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageInfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Format_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Image_2eproto() {
  protobuf_AddDesc_Image_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Image.proto");
  GOOGLE_CHECK(file != NULL);
  ImageInfoMsg_descriptor_ = file->message_type(0);
  static const int ImageInfoMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfoMsg, exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfoMsg, shutter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfoMsg, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfoMsg, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfoMsg, baseline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfoMsg, focal_length_),
  };
  ImageInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageInfoMsg_descriptor_,
      ImageInfoMsg::default_instance_,
      ImageInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageInfoMsg));
  ImageMsg_descriptor_ = file->message_type(1);
  static const int ImageMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, info_),
  };
  ImageMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageMsg_descriptor_,
      ImageMsg::default_instance_,
      ImageMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageMsg));
  Type_descriptor_ = file->enum_type(0);
  Format_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Image_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageInfoMsg_descriptor_, &ImageInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageMsg_descriptor_, &ImageMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Image_2eproto() {
  delete ImageInfoMsg::default_instance_;
  delete ImageInfoMsg_reflection_;
  delete ImageMsg::default_instance_;
  delete ImageMsg_reflection_;
}

void protobuf_AddDesc_Image_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Image.proto\022\002pb\"v\n\014ImageInfoMsg\022\020\n\010exp"
    "osure\030\001 \001(\001\022\017\n\007shutter\030\002 \001(\001\022\014\n\004gain\030\003 \001"
    "(\001\022\r\n\005gamma\030\004 \001(\001\022\020\n\010baseline\0302 \001(\001\022\024\n\014f"
    "ocal_length\0303 \001(\001\"\270\001\n\010ImageMsg\022\r\n\005width\030"
    "\001 \001(\r\022\016\n\006height\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\022(\n\004t"
    "ype\030\004 \001(\0162\010.pb.Type:\020PB_UNSIGNED_BYTE\022\"\n"
    "\006format\030\005 \001(\0162\n.pb.Format:\006PB_RGB\022\021\n\ttim"
    "estamp\030\006 \001(\001\022\036\n\004info\030\007 \001(\0132\020.pb.ImageInf"
    "oMsg*\224\001\n\004Type\022\014\n\007PB_BYTE\020\200(\022\025\n\020PB_UNSIGN"
    "ED_BYTE\020\201(\022\r\n\010PB_SHORT\020\202(\022\026\n\021PB_UNSIGNED"
    "_SHORT\020\203(\022\013\n\006PB_INT\020\204(\022\024\n\017PB_UNSIGNED_IN"
    "T\020\205(\022\r\n\010PB_FLOAT\020\206(\022\016\n\tPB_DOUBLE\020\212(*_\n\006F"
    "ormat\022\021\n\014PB_LUMINANCE\020\2112\022\013\n\006PB_RGB\020\2072\022\014\n"
    "\007PB_RGBA\020\2102\022\n\n\006PB_RAW\020\001\022\014\n\006PB_BGR\020\340\201\002\022\r\n"
    "\007PB_BGRA\020\341\201\002", 572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Image.proto", &protobuf_RegisterTypes);
  ImageInfoMsg::default_instance_ = new ImageInfoMsg();
  ImageMsg::default_instance_ = new ImageMsg();
  ImageInfoMsg::default_instance_->InitAsDefaultInstance();
  ImageMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Image_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Image_2eproto {
  StaticDescriptorInitializer_Image_2eproto() {
    protobuf_AddDesc_Image_2eproto();
  }
} static_descriptor_initializer_Image_2eproto_;
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 5120:
    case 5121:
    case 5122:
    case 5123:
    case 5124:
    case 5125:
    case 5126:
    case 5130:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Format_descriptor_;
}
bool Format_IsValid(int value) {
  switch(value) {
    case 1:
    case 6407:
    case 6408:
    case 6409:
    case 32992:
    case 32993:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ImageInfoMsg::kExposureFieldNumber;
const int ImageInfoMsg::kShutterFieldNumber;
const int ImageInfoMsg::kGainFieldNumber;
const int ImageInfoMsg::kGammaFieldNumber;
const int ImageInfoMsg::kBaselineFieldNumber;
const int ImageInfoMsg::kFocalLengthFieldNumber;
#endif  // !_MSC_VER

ImageInfoMsg::ImageInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageInfoMsg::InitAsDefaultInstance() {
}

ImageInfoMsg::ImageInfoMsg(const ImageInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  exposure_ = 0;
  shutter_ = 0;
  gain_ = 0;
  gamma_ = 0;
  baseline_ = 0;
  focal_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageInfoMsg::~ImageInfoMsg() {
  SharedDtor();
}

void ImageInfoMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageInfoMsg_descriptor_;
}

const ImageInfoMsg& ImageInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Image_2eproto();
  return *default_instance_;
}

ImageInfoMsg* ImageInfoMsg::default_instance_ = NULL;

ImageInfoMsg* ImageInfoMsg::New() const {
  return new ImageInfoMsg;
}

void ImageInfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exposure_ = 0;
    shutter_ = 0;
    gain_ = 0;
    gamma_ = 0;
    baseline_ = 0;
    focal_length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double exposure = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exposure_)));
          set_has_exposure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_shutter;
        break;
      }

      // optional double shutter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shutter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shutter_)));
          set_has_shutter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_gain;
        break;
      }

      // optional double gain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_gamma;
        break;
      }

      // optional double gamma = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(401)) goto parse_baseline;
        break;
      }

      // optional double baseline = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_baseline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &baseline_)));
          set_has_baseline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(409)) goto parse_focal_length;
        break;
      }

      // optional double focal_length = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_focal_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focal_length_)));
          set_has_focal_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double exposure = 1;
  if (has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->exposure(), output);
  }

  // optional double shutter = 2;
  if (has_shutter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->shutter(), output);
  }

  // optional double gain = 3;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gain(), output);
  }

  // optional double gamma = 4;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gamma(), output);
  }

  // optional double baseline = 50;
  if (has_baseline()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->baseline(), output);
  }

  // optional double focal_length = 51;
  if (has_focal_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->focal_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double exposure = 1;
  if (has_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->exposure(), target);
  }

  // optional double shutter = 2;
  if (has_shutter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->shutter(), target);
  }

  // optional double gain = 3;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gain(), target);
  }

  // optional double gamma = 4;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gamma(), target);
  }

  // optional double baseline = 50;
  if (has_baseline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->baseline(), target);
  }

  // optional double focal_length = 51;
  if (has_focal_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->focal_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageInfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double exposure = 1;
    if (has_exposure()) {
      total_size += 1 + 8;
    }

    // optional double shutter = 2;
    if (has_shutter()) {
      total_size += 1 + 8;
    }

    // optional double gain = 3;
    if (has_gain()) {
      total_size += 1 + 8;
    }

    // optional double gamma = 4;
    if (has_gamma()) {
      total_size += 1 + 8;
    }

    // optional double baseline = 50;
    if (has_baseline()) {
      total_size += 2 + 8;
    }

    // optional double focal_length = 51;
    if (has_focal_length()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageInfoMsg::MergeFrom(const ImageInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exposure()) {
      set_exposure(from.exposure());
    }
    if (from.has_shutter()) {
      set_shutter(from.shutter());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_baseline()) {
      set_baseline(from.baseline());
    }
    if (from.has_focal_length()) {
      set_focal_length(from.focal_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfoMsg::CopyFrom(const ImageInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfoMsg::IsInitialized() const {

  return true;
}

void ImageInfoMsg::Swap(ImageInfoMsg* other) {
  if (other != this) {
    std::swap(exposure_, other->exposure_);
    std::swap(shutter_, other->shutter_);
    std::swap(gain_, other->gain_);
    std::swap(gamma_, other->gamma_);
    std::swap(baseline_, other->baseline_);
    std::swap(focal_length_, other->focal_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageInfoMsg_descriptor_;
  metadata.reflection = ImageInfoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageMsg::kWidthFieldNumber;
const int ImageMsg::kHeightFieldNumber;
const int ImageMsg::kDataFieldNumber;
const int ImageMsg::kTypeFieldNumber;
const int ImageMsg::kFormatFieldNumber;
const int ImageMsg::kTimestampFieldNumber;
const int ImageMsg::kInfoFieldNumber;
#endif  // !_MSC_VER

ImageMsg::ImageMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageMsg::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::ImageInfoMsg*>(&::pb::ImageInfoMsg::default_instance());
}

ImageMsg::ImageMsg(const ImageMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageMsg::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 5121;
  format_ = 6407;
  timestamp_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageMsg::~ImageMsg() {
  SharedDtor();
}

void ImageMsg::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void ImageMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageMsg_descriptor_;
}

const ImageMsg& ImageMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Image_2eproto();
  return *default_instance_;
}

ImageMsg* ImageMsg::default_instance_ = NULL;

ImageMsg* ImageMsg::New() const {
  return new ImageMsg;
}

void ImageMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0u;
    height_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    type_ = 5121;
    format_ = 6407;
    timestamp_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::pb::ImageInfoMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional uint32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .pb.Type type = 4 [default = PB_UNSIGNED_BYTE];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Type_IsValid(value)) {
            set_type(static_cast< ::pb::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_format;
        break;
      }

      // optional .pb.Format format = 5 [default = PB_RGB];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Format_IsValid(value)) {
            set_format(static_cast< ::pb::Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info;
        break;
      }

      // optional .pb.ImageInfoMsg info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // optional uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional .pb.Type type = 4 [default = PB_UNSIGNED_BYTE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .pb.Format format = 5 [default = PB_RGB];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->format(), output);
  }

  // optional double timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->timestamp(), output);
  }

  // optional .pb.ImageInfoMsg info = 7;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // optional uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional .pb.Type type = 4 [default = PB_UNSIGNED_BYTE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .pb.Format format = 5 [default = PB_RGB];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->format(), target);
  }

  // optional double timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->timestamp(), target);
  }

  // optional .pb.ImageInfoMsg info = 7;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .pb.Type type = 4 [default = PB_UNSIGNED_BYTE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pb.Format format = 5 [default = PB_RGB];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional double timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .pb.ImageInfoMsg info = 7;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageMsg::MergeFrom(const ImageMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_info()) {
      mutable_info()->::pb::ImageInfoMsg::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMsg::CopyFrom(const ImageMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMsg::IsInitialized() const {

  return true;
}

void ImageMsg::Swap(ImageMsg* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(data_, other->data_);
    std::swap(type_, other->type_);
    std::swap(format_, other->format_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageMsg_descriptor_;
  metadata.reflection = ImageMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
