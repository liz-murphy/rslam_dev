// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NodeCar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NodeCar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* VehicleMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterControllerReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterControllerReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterControllerRepMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterControllerRepMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NodeCar_2eproto() {
  protobuf_AddDesc_NodeCar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NodeCar.proto");
  GOOGLE_CHECK(file != NULL);
  VehicleMsg_descriptor_ = file->message_type(0);
  static const int VehicleMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMsg, steering_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMsg, desired_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMsg, command_time_),
  };
  VehicleMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleMsg_descriptor_,
      VehicleMsg::default_instance_,
      VehicleMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleMsg));
  RegisterControllerReqMsg_descriptor_ = file->message_type(1);
  static const int RegisterControllerReqMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterControllerReqMsg, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterControllerReqMsg, uri_),
  };
  RegisterControllerReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterControllerReqMsg_descriptor_,
      RegisterControllerReqMsg::default_instance_,
      RegisterControllerReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterControllerReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterControllerReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterControllerReqMsg));
  RegisterControllerRepMsg_descriptor_ = file->message_type(2);
  static const int RegisterControllerRepMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterControllerRepMsg, success_),
  };
  RegisterControllerRepMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterControllerRepMsg_descriptor_,
      RegisterControllerRepMsg::default_instance_,
      RegisterControllerRepMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterControllerRepMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterControllerRepMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterControllerRepMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NodeCar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleMsg_descriptor_, &VehicleMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterControllerReqMsg_descriptor_, &RegisterControllerReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterControllerRepMsg_descriptor_, &RegisterControllerRepMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NodeCar_2eproto() {
  delete VehicleMsg::default_instance_;
  delete VehicleMsg_reflection_;
  delete RegisterControllerReqMsg::default_instance_;
  delete RegisterControllerReqMsg_reflection_;
  delete RegisterControllerRepMsg::default_instance_;
  delete RegisterControllerRepMsg_reflection_;
}

void protobuf_AddDesc_NodeCar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rNodeCar.proto\022\002pb\"Q\n\nVehicleMsg\022\026\n\016ste"
    "ering_angle\030\001 \002(\001\022\025\n\rdesired_force\030\002 \002(\001"
    "\022\024\n\014command_time\030\003 \002(\001\"6\n\030RegisterContro"
    "llerReqMsg\022\r\n\005topic\030\001 \001(\014\022\013\n\003uri\030\002 \001(\t\"+"
    "\n\030RegisterControllerRepMsg\022\017\n\007success\030\001 "
    "\001(\010", 203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NodeCar.proto", &protobuf_RegisterTypes);
  VehicleMsg::default_instance_ = new VehicleMsg();
  RegisterControllerReqMsg::default_instance_ = new RegisterControllerReqMsg();
  RegisterControllerRepMsg::default_instance_ = new RegisterControllerRepMsg();
  VehicleMsg::default_instance_->InitAsDefaultInstance();
  RegisterControllerReqMsg::default_instance_->InitAsDefaultInstance();
  RegisterControllerRepMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NodeCar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NodeCar_2eproto {
  StaticDescriptorInitializer_NodeCar_2eproto() {
    protobuf_AddDesc_NodeCar_2eproto();
  }
} static_descriptor_initializer_NodeCar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VehicleMsg::kSteeringAngleFieldNumber;
const int VehicleMsg::kDesiredForceFieldNumber;
const int VehicleMsg::kCommandTimeFieldNumber;
#endif  // !_MSC_VER

VehicleMsg::VehicleMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VehicleMsg::InitAsDefaultInstance() {
}

VehicleMsg::VehicleMsg(const VehicleMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VehicleMsg::SharedCtor() {
  _cached_size_ = 0;
  steering_angle_ = 0;
  desired_force_ = 0;
  command_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleMsg::~VehicleMsg() {
  SharedDtor();
}

void VehicleMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleMsg_descriptor_;
}

const VehicleMsg& VehicleMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeCar_2eproto();
  return *default_instance_;
}

VehicleMsg* VehicleMsg::default_instance_ = NULL;

VehicleMsg* VehicleMsg::New() const {
  return new VehicleMsg;
}

void VehicleMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steering_angle_ = 0;
    desired_force_ = 0;
    command_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double steering_angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_)));
          set_has_steering_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_desired_force;
        break;
      }

      // required double desired_force = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_desired_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &desired_force_)));
          set_has_desired_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_command_time;
        break;
      }

      // required double command_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_command_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &command_time_)));
          set_has_command_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VehicleMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double steering_angle = 1;
  if (has_steering_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->steering_angle(), output);
  }

  // required double desired_force = 2;
  if (has_desired_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->desired_force(), output);
  }

  // required double command_time = 3;
  if (has_command_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->command_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VehicleMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double steering_angle = 1;
  if (has_steering_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->steering_angle(), target);
  }

  // required double desired_force = 2;
  if (has_desired_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->desired_force(), target);
  }

  // required double command_time = 3;
  if (has_command_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->command_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VehicleMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double steering_angle = 1;
    if (has_steering_angle()) {
      total_size += 1 + 8;
    }

    // required double desired_force = 2;
    if (has_desired_force()) {
      total_size += 1 + 8;
    }

    // required double command_time = 3;
    if (has_command_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleMsg::MergeFrom(const VehicleMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steering_angle()) {
      set_steering_angle(from.steering_angle());
    }
    if (from.has_desired_force()) {
      set_desired_force(from.desired_force());
    }
    if (from.has_command_time()) {
      set_command_time(from.command_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMsg::CopyFrom(const VehicleMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VehicleMsg::Swap(VehicleMsg* other) {
  if (other != this) {
    std::swap(steering_angle_, other->steering_angle_);
    std::swap(desired_force_, other->desired_force_);
    std::swap(command_time_, other->command_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleMsg_descriptor_;
  metadata.reflection = VehicleMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterControllerReqMsg::kTopicFieldNumber;
const int RegisterControllerReqMsg::kUriFieldNumber;
#endif  // !_MSC_VER

RegisterControllerReqMsg::RegisterControllerReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterControllerReqMsg::InitAsDefaultInstance() {
}

RegisterControllerReqMsg::RegisterControllerReqMsg(const RegisterControllerReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterControllerReqMsg::SharedCtor() {
  _cached_size_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterControllerReqMsg::~RegisterControllerReqMsg() {
  SharedDtor();
}

void RegisterControllerReqMsg::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (this != default_instance_) {
  }
}

void RegisterControllerReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterControllerReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterControllerReqMsg_descriptor_;
}

const RegisterControllerReqMsg& RegisterControllerReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeCar_2eproto();
  return *default_instance_;
}

RegisterControllerReqMsg* RegisterControllerReqMsg::default_instance_ = NULL;

RegisterControllerReqMsg* RegisterControllerReqMsg::New() const {
  return new RegisterControllerReqMsg;
}

void RegisterControllerReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::kEmptyString) {
        topic_->clear();
      }
    }
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::kEmptyString) {
        uri_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterControllerReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes topic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uri;
        break;
      }

      // optional string uri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterControllerReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->topic(), output);
  }

  // optional string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterControllerReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes topic = 1;
  if (has_topic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->topic(), target);
  }

  // optional string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterControllerReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->topic());
    }

    // optional string uri = 2;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterControllerReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterControllerReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterControllerReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterControllerReqMsg::MergeFrom(const RegisterControllerReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterControllerReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterControllerReqMsg::CopyFrom(const RegisterControllerReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterControllerReqMsg::IsInitialized() const {

  return true;
}

void RegisterControllerReqMsg::Swap(RegisterControllerReqMsg* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    std::swap(uri_, other->uri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterControllerReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterControllerReqMsg_descriptor_;
  metadata.reflection = RegisterControllerReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterControllerRepMsg::kSuccessFieldNumber;
#endif  // !_MSC_VER

RegisterControllerRepMsg::RegisterControllerRepMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterControllerRepMsg::InitAsDefaultInstance() {
}

RegisterControllerRepMsg::RegisterControllerRepMsg(const RegisterControllerRepMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterControllerRepMsg::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterControllerRepMsg::~RegisterControllerRepMsg() {
  SharedDtor();
}

void RegisterControllerRepMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterControllerRepMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterControllerRepMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterControllerRepMsg_descriptor_;
}

const RegisterControllerRepMsg& RegisterControllerRepMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeCar_2eproto();
  return *default_instance_;
}

RegisterControllerRepMsg* RegisterControllerRepMsg::default_instance_ = NULL;

RegisterControllerRepMsg* RegisterControllerRepMsg::New() const {
  return new RegisterControllerRepMsg;
}

void RegisterControllerRepMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterControllerRepMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterControllerRepMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterControllerRepMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterControllerRepMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterControllerRepMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterControllerRepMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterControllerRepMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterControllerRepMsg::MergeFrom(const RegisterControllerRepMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterControllerRepMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterControllerRepMsg::CopyFrom(const RegisterControllerRepMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterControllerRepMsg::IsInitialized() const {

  return true;
}

void RegisterControllerRepMsg::Swap(RegisterControllerRepMsg* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterControllerRepMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterControllerRepMsg_descriptor_;
  metadata.reflection = RegisterControllerRepMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
