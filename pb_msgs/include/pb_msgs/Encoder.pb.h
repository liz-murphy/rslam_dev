// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Encoder.proto

#ifndef PROTOBUF_Encoder_2eproto__INCLUDED
#define PROTOBUF_Encoder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Encoder_2eproto();
void protobuf_AssignDesc_Encoder_2eproto();
void protobuf_ShutdownFile_Encoder_2eproto();

class EncoderMsg;

// ===================================================================

class EncoderMsg : public ::google::protobuf::Message {
 public:
  EncoderMsg();
  virtual ~EncoderMsg();

  EncoderMsg(const EncoderMsg& from);

  inline EncoderMsg& operator=(const EncoderMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncoderMsg& default_instance();

  void Swap(EncoderMsg* other);

  // implements Message ----------------------------------------------

  EncoderMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncoderMsg& from);
  void MergeFrom(const EncoderMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double device_time = 1;
  inline bool has_device_time() const;
  inline void clear_device_time();
  static const int kDeviceTimeFieldNumber = 1;
  inline double device_time() const;
  inline void set_device_time(double value);

  // repeated string label = 2;
  inline int label_size() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label(int index) const;
  inline ::std::string* mutable_label(int index);
  inline void set_label(int index, const ::std::string& value);
  inline void set_label(int index, const char* value);
  inline void set_label(int index, const char* value, size_t size);
  inline ::std::string* add_label();
  inline void add_label(const ::std::string& value);
  inline void add_label(const char* value);
  inline void add_label(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& label() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_label();

  // repeated double data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:pb.EncoderMsg)
 private:
  inline void set_has_device_time();
  inline void clear_has_device_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double device_time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> label_;
  ::google::protobuf::RepeatedField< double > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Encoder_2eproto();
  friend void protobuf_AssignDesc_Encoder_2eproto();
  friend void protobuf_ShutdownFile_Encoder_2eproto();

  void InitAsDefaultInstance();
  static EncoderMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// EncoderMsg

// optional double device_time = 1;
inline bool EncoderMsg::has_device_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncoderMsg::set_has_device_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncoderMsg::clear_has_device_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncoderMsg::clear_device_time() {
  device_time_ = 0;
  clear_has_device_time();
}
inline double EncoderMsg::device_time() const {
  return device_time_;
}
inline void EncoderMsg::set_device_time(double value) {
  set_has_device_time();
  device_time_ = value;
}

// repeated string label = 2;
inline int EncoderMsg::label_size() const {
  return label_.size();
}
inline void EncoderMsg::clear_label() {
  label_.Clear();
}
inline const ::std::string& EncoderMsg::label(int index) const {
  return label_.Get(index);
}
inline ::std::string* EncoderMsg::mutable_label(int index) {
  return label_.Mutable(index);
}
inline void EncoderMsg::set_label(int index, const ::std::string& value) {
  label_.Mutable(index)->assign(value);
}
inline void EncoderMsg::set_label(int index, const char* value) {
  label_.Mutable(index)->assign(value);
}
inline void EncoderMsg::set_label(int index, const char* value, size_t size) {
  label_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EncoderMsg::add_label() {
  return label_.Add();
}
inline void EncoderMsg::add_label(const ::std::string& value) {
  label_.Add()->assign(value);
}
inline void EncoderMsg::add_label(const char* value) {
  label_.Add()->assign(value);
}
inline void EncoderMsg::add_label(const char* value, size_t size) {
  label_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EncoderMsg::label() const {
  return label_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EncoderMsg::mutable_label() {
  return &label_;
}

// repeated double data = 3;
inline int EncoderMsg::data_size() const {
  return data_.size();
}
inline void EncoderMsg::clear_data() {
  data_.Clear();
}
inline double EncoderMsg::data(int index) const {
  return data_.Get(index);
}
inline void EncoderMsg::set_data(int index, double value) {
  data_.Set(index, value);
}
inline void EncoderMsg::add_data(double value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
EncoderMsg::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
EncoderMsg::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Encoder_2eproto__INCLUDED
