// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* KeyPointMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyPointMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyPointVectorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyPointVectorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryDescriptorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryDescriptorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DescriptorVectorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DescriptorVectorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandmarkIdVectorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandmarkIdVectorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBoWPlaceMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBoWPlaceMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBoWCorpusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBoWCorpusMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbow_2eproto() {
  protobuf_AddDesc_dbow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbow.proto");
  GOOGLE_CHECK(file != NULL);
  KeyPointMsg_descriptor_ = file->message_type(0);
  static const int KeyPointMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPointMsg, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPointMsg, y_),
  };
  KeyPointMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyPointMsg_descriptor_,
      KeyPointMsg::default_instance_,
      KeyPointMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPointMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPointMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyPointMsg));
  KeyPointVectorMsg_descriptor_ = file->message_type(1);
  static const int KeyPointVectorMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPointVectorMsg, keypoint_),
  };
  KeyPointVectorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyPointVectorMsg_descriptor_,
      KeyPointVectorMsg::default_instance_,
      KeyPointVectorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPointVectorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPointVectorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyPointVectorMsg));
  BinaryDescriptorMsg_descriptor_ = file->message_type(2);
  static const int BinaryDescriptorMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDescriptorMsg, data_),
  };
  BinaryDescriptorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryDescriptorMsg_descriptor_,
      BinaryDescriptorMsg::default_instance_,
      BinaryDescriptorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDescriptorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryDescriptorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryDescriptorMsg));
  DescriptorVectorMsg_descriptor_ = file->message_type(3);
  static const int DescriptorVectorMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorVectorMsg, binary_descriptor_),
  };
  DescriptorVectorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DescriptorVectorMsg_descriptor_,
      DescriptorVectorMsg::default_instance_,
      DescriptorVectorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorVectorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorVectorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DescriptorVectorMsg));
  LandmarkIdVectorMsg_descriptor_ = file->message_type(4);
  static const int LandmarkIdVectorMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkIdVectorMsg, landmarks_),
  };
  LandmarkIdVectorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandmarkIdVectorMsg_descriptor_,
      LandmarkIdVectorMsg::default_instance_,
      LandmarkIdVectorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkIdVectorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkIdVectorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandmarkIdVectorMsg));
  DBoWPlaceMsg_descriptor_ = file->message_type(5);
  static const int DBoWPlaceMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWPlaceMsg, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWPlaceMsg, descriptor_vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWPlaceMsg, keypoint_vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWPlaceMsg, landmarks_vector_),
  };
  DBoWPlaceMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBoWPlaceMsg_descriptor_,
      DBoWPlaceMsg::default_instance_,
      DBoWPlaceMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWPlaceMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWPlaceMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBoWPlaceMsg));
  DBoWCorpusMsg_descriptor_ = file->message_type(6);
  static const int DBoWCorpusMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWCorpusMsg, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWCorpusMsg, descriptor_vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWCorpusMsg, keypoint_vector_),
  };
  DBoWCorpusMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBoWCorpusMsg_descriptor_,
      DBoWCorpusMsg::default_instance_,
      DBoWCorpusMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWCorpusMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBoWCorpusMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBoWCorpusMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyPointMsg_descriptor_, &KeyPointMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyPointVectorMsg_descriptor_, &KeyPointVectorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryDescriptorMsg_descriptor_, &BinaryDescriptorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DescriptorVectorMsg_descriptor_, &DescriptorVectorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandmarkIdVectorMsg_descriptor_, &LandmarkIdVectorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBoWPlaceMsg_descriptor_, &DBoWPlaceMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBoWCorpusMsg_descriptor_, &DBoWCorpusMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbow_2eproto() {
  delete KeyPointMsg::default_instance_;
  delete KeyPointMsg_reflection_;
  delete KeyPointVectorMsg::default_instance_;
  delete KeyPointVectorMsg_reflection_;
  delete BinaryDescriptorMsg::default_instance_;
  delete BinaryDescriptorMsg_reflection_;
  delete DescriptorVectorMsg::default_instance_;
  delete DescriptorVectorMsg_reflection_;
  delete LandmarkIdVectorMsg::default_instance_;
  delete LandmarkIdVectorMsg_reflection_;
  delete DBoWPlaceMsg::default_instance_;
  delete DBoWPlaceMsg_reflection_;
  delete DBoWCorpusMsg::default_instance_;
  delete DBoWCorpusMsg_reflection_;
}

void protobuf_AddDesc_dbow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_rslam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndbow.proto\022\002pb\032\013rslam.proto\"#\n\013KeyPoin"
    "tMsg\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"6\n\021KeyPointVe"
    "ctorMsg\022!\n\010keypoint\030\001 \003(\0132\017.pb.KeyPointM"
    "sg\"\'\n\023BinaryDescriptorMsg\022\020\n\004data\030\001 \003(\rB"
    "\002\020\001\"I\n\023DescriptorVectorMsg\0222\n\021binary_des"
    "criptor\030\001 \003(\0132\027.pb.BinaryDescriptorMsg\";"
    "\n\023LandmarkIdVectorMsg\022$\n\tlandmarks\030\001 \003(\013"
    "2\021.pb.LandmarkIdMsg\"\315\001\n\014DBoWPlaceMsg\022&\n\005"
    "index\030\001 \001(\0132\027.pb.ReferenceFrameIdMsg\0222\n\021"
    "descriptor_vector\030\002 \001(\0132\027.pb.DescriptorV"
    "ectorMsg\022.\n\017keypoint_vector\030\003 \001(\0132\025.pb.K"
    "eyPointVectorMsg\0221\n\020landmarks_vector\030\004 \001"
    "(\0132\027.pb.LandmarkIdVectorMsg\"\233\001\n\rDBoWCorp"
    "usMsg\022&\n\005index\030\001 \003(\0132\027.pb.ReferenceFrame"
    "IdMsg\0222\n\021descriptor_vector\030\002 \003(\0132\027.pb.De"
    "scriptorVectorMsg\022.\n\017keypoint_vector\030\003 \003"
    "(\0132\025.pb.KeyPointVectorMsg", 665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbow.proto", &protobuf_RegisterTypes);
  KeyPointMsg::default_instance_ = new KeyPointMsg();
  KeyPointVectorMsg::default_instance_ = new KeyPointVectorMsg();
  BinaryDescriptorMsg::default_instance_ = new BinaryDescriptorMsg();
  DescriptorVectorMsg::default_instance_ = new DescriptorVectorMsg();
  LandmarkIdVectorMsg::default_instance_ = new LandmarkIdVectorMsg();
  DBoWPlaceMsg::default_instance_ = new DBoWPlaceMsg();
  DBoWCorpusMsg::default_instance_ = new DBoWCorpusMsg();
  KeyPointMsg::default_instance_->InitAsDefaultInstance();
  KeyPointVectorMsg::default_instance_->InitAsDefaultInstance();
  BinaryDescriptorMsg::default_instance_->InitAsDefaultInstance();
  DescriptorVectorMsg::default_instance_->InitAsDefaultInstance();
  LandmarkIdVectorMsg::default_instance_->InitAsDefaultInstance();
  DBoWPlaceMsg::default_instance_->InitAsDefaultInstance();
  DBoWCorpusMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbow_2eproto {
  StaticDescriptorInitializer_dbow_2eproto() {
    protobuf_AddDesc_dbow_2eproto();
  }
} static_descriptor_initializer_dbow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeyPointMsg::kXFieldNumber;
const int KeyPointMsg::kYFieldNumber;
#endif  // !_MSC_VER

KeyPointMsg::KeyPointMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyPointMsg::InitAsDefaultInstance() {
}

KeyPointMsg::KeyPointMsg(const KeyPointMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyPointMsg::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyPointMsg::~KeyPointMsg() {
  SharedDtor();
}

void KeyPointMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyPointMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyPointMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyPointMsg_descriptor_;
}

const KeyPointMsg& KeyPointMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbow_2eproto();
  return *default_instance_;
}

KeyPointMsg* KeyPointMsg::default_instance_ = NULL;

KeyPointMsg* KeyPointMsg::New() const {
  return new KeyPointMsg;
}

void KeyPointMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyPointMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyPointMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyPointMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyPointMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyPointMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyPointMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyPointMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyPointMsg::MergeFrom(const KeyPointMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyPointMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPointMsg::CopyFrom(const KeyPointMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPointMsg::IsInitialized() const {

  return true;
}

void KeyPointMsg::Swap(KeyPointMsg* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyPointMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyPointMsg_descriptor_;
  metadata.reflection = KeyPointMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyPointVectorMsg::kKeypointFieldNumber;
#endif  // !_MSC_VER

KeyPointVectorMsg::KeyPointVectorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyPointVectorMsg::InitAsDefaultInstance() {
}

KeyPointVectorMsg::KeyPointVectorMsg(const KeyPointVectorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyPointVectorMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyPointVectorMsg::~KeyPointVectorMsg() {
  SharedDtor();
}

void KeyPointVectorMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyPointVectorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyPointVectorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyPointVectorMsg_descriptor_;
}

const KeyPointVectorMsg& KeyPointVectorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbow_2eproto();
  return *default_instance_;
}

KeyPointVectorMsg* KeyPointVectorMsg::default_instance_ = NULL;

KeyPointVectorMsg* KeyPointVectorMsg::New() const {
  return new KeyPointVectorMsg;
}

void KeyPointVectorMsg::Clear() {
  keypoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyPointVectorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.KeyPointMsg keypoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keypoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keypoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keypoint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyPointVectorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.KeyPointMsg keypoint = 1;
  for (int i = 0; i < this->keypoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keypoint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyPointVectorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.KeyPointMsg keypoint = 1;
  for (int i = 0; i < this->keypoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keypoint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyPointVectorMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.KeyPointMsg keypoint = 1;
  total_size += 1 * this->keypoint_size();
  for (int i = 0; i < this->keypoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keypoint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyPointVectorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyPointVectorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyPointVectorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyPointVectorMsg::MergeFrom(const KeyPointVectorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  keypoint_.MergeFrom(from.keypoint_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyPointVectorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPointVectorMsg::CopyFrom(const KeyPointVectorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPointVectorMsg::IsInitialized() const {

  return true;
}

void KeyPointVectorMsg::Swap(KeyPointVectorMsg* other) {
  if (other != this) {
    keypoint_.Swap(&other->keypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyPointVectorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyPointVectorMsg_descriptor_;
  metadata.reflection = KeyPointVectorMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryDescriptorMsg::kDataFieldNumber;
#endif  // !_MSC_VER

BinaryDescriptorMsg::BinaryDescriptorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BinaryDescriptorMsg::InitAsDefaultInstance() {
}

BinaryDescriptorMsg::BinaryDescriptorMsg(const BinaryDescriptorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BinaryDescriptorMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryDescriptorMsg::~BinaryDescriptorMsg() {
  SharedDtor();
}

void BinaryDescriptorMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryDescriptorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryDescriptorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryDescriptorMsg_descriptor_;
}

const BinaryDescriptorMsg& BinaryDescriptorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbow_2eproto();
  return *default_instance_;
}

BinaryDescriptorMsg* BinaryDescriptorMsg::default_instance_ = NULL;

BinaryDescriptorMsg* BinaryDescriptorMsg::New() const {
  return new BinaryDescriptorMsg;
}

void BinaryDescriptorMsg::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryDescriptorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 data = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinaryDescriptorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 data = 1 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinaryDescriptorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 data = 1 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinaryDescriptorMsg::ByteSize() const {
  int total_size = 0;

  // repeated uint32 data = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryDescriptorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryDescriptorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryDescriptorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryDescriptorMsg::MergeFrom(const BinaryDescriptorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryDescriptorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryDescriptorMsg::CopyFrom(const BinaryDescriptorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDescriptorMsg::IsInitialized() const {

  return true;
}

void BinaryDescriptorMsg::Swap(BinaryDescriptorMsg* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryDescriptorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryDescriptorMsg_descriptor_;
  metadata.reflection = BinaryDescriptorMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DescriptorVectorMsg::kBinaryDescriptorFieldNumber;
#endif  // !_MSC_VER

DescriptorVectorMsg::DescriptorVectorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DescriptorVectorMsg::InitAsDefaultInstance() {
}

DescriptorVectorMsg::DescriptorVectorMsg(const DescriptorVectorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DescriptorVectorMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DescriptorVectorMsg::~DescriptorVectorMsg() {
  SharedDtor();
}

void DescriptorVectorMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DescriptorVectorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DescriptorVectorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DescriptorVectorMsg_descriptor_;
}

const DescriptorVectorMsg& DescriptorVectorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbow_2eproto();
  return *default_instance_;
}

DescriptorVectorMsg* DescriptorVectorMsg::default_instance_ = NULL;

DescriptorVectorMsg* DescriptorVectorMsg::New() const {
  return new DescriptorVectorMsg;
}

void DescriptorVectorMsg::Clear() {
  binary_descriptor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DescriptorVectorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.BinaryDescriptorMsg binary_descriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_binary_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_binary_descriptor;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DescriptorVectorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.BinaryDescriptorMsg binary_descriptor = 1;
  for (int i = 0; i < this->binary_descriptor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->binary_descriptor(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DescriptorVectorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.BinaryDescriptorMsg binary_descriptor = 1;
  for (int i = 0; i < this->binary_descriptor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->binary_descriptor(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DescriptorVectorMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.BinaryDescriptorMsg binary_descriptor = 1;
  total_size += 1 * this->binary_descriptor_size();
  for (int i = 0; i < this->binary_descriptor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->binary_descriptor(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DescriptorVectorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DescriptorVectorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DescriptorVectorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DescriptorVectorMsg::MergeFrom(const DescriptorVectorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  binary_descriptor_.MergeFrom(from.binary_descriptor_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DescriptorVectorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescriptorVectorMsg::CopyFrom(const DescriptorVectorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescriptorVectorMsg::IsInitialized() const {

  return true;
}

void DescriptorVectorMsg::Swap(DescriptorVectorMsg* other) {
  if (other != this) {
    binary_descriptor_.Swap(&other->binary_descriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DescriptorVectorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DescriptorVectorMsg_descriptor_;
  metadata.reflection = DescriptorVectorMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandmarkIdVectorMsg::kLandmarksFieldNumber;
#endif  // !_MSC_VER

LandmarkIdVectorMsg::LandmarkIdVectorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LandmarkIdVectorMsg::InitAsDefaultInstance() {
}

LandmarkIdVectorMsg::LandmarkIdVectorMsg(const LandmarkIdVectorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LandmarkIdVectorMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandmarkIdVectorMsg::~LandmarkIdVectorMsg() {
  SharedDtor();
}

void LandmarkIdVectorMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LandmarkIdVectorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkIdVectorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandmarkIdVectorMsg_descriptor_;
}

const LandmarkIdVectorMsg& LandmarkIdVectorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbow_2eproto();
  return *default_instance_;
}

LandmarkIdVectorMsg* LandmarkIdVectorMsg::default_instance_ = NULL;

LandmarkIdVectorMsg* LandmarkIdVectorMsg::New() const {
  return new LandmarkIdVectorMsg;
}

void LandmarkIdVectorMsg::Clear() {
  landmarks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandmarkIdVectorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.LandmarkIdMsg landmarks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_landmarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmarks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_landmarks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LandmarkIdVectorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.LandmarkIdMsg landmarks = 1;
  for (int i = 0; i < this->landmarks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->landmarks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LandmarkIdVectorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.LandmarkIdMsg landmarks = 1;
  for (int i = 0; i < this->landmarks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->landmarks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LandmarkIdVectorMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.LandmarkIdMsg landmarks = 1;
  total_size += 1 * this->landmarks_size();
  for (int i = 0; i < this->landmarks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmarks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkIdVectorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandmarkIdVectorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandmarkIdVectorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandmarkIdVectorMsg::MergeFrom(const LandmarkIdVectorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  landmarks_.MergeFrom(from.landmarks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandmarkIdVectorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkIdVectorMsg::CopyFrom(const LandmarkIdVectorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkIdVectorMsg::IsInitialized() const {

  return true;
}

void LandmarkIdVectorMsg::Swap(LandmarkIdVectorMsg* other) {
  if (other != this) {
    landmarks_.Swap(&other->landmarks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandmarkIdVectorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandmarkIdVectorMsg_descriptor_;
  metadata.reflection = LandmarkIdVectorMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBoWPlaceMsg::kIndexFieldNumber;
const int DBoWPlaceMsg::kDescriptorVectorFieldNumber;
const int DBoWPlaceMsg::kKeypointVectorFieldNumber;
const int DBoWPlaceMsg::kLandmarksVectorFieldNumber;
#endif  // !_MSC_VER

DBoWPlaceMsg::DBoWPlaceMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBoWPlaceMsg::InitAsDefaultInstance() {
  index_ = const_cast< ::pb::ReferenceFrameIdMsg*>(&::pb::ReferenceFrameIdMsg::default_instance());
  descriptor_vector_ = const_cast< ::pb::DescriptorVectorMsg*>(&::pb::DescriptorVectorMsg::default_instance());
  keypoint_vector_ = const_cast< ::pb::KeyPointVectorMsg*>(&::pb::KeyPointVectorMsg::default_instance());
  landmarks_vector_ = const_cast< ::pb::LandmarkIdVectorMsg*>(&::pb::LandmarkIdVectorMsg::default_instance());
}

DBoWPlaceMsg::DBoWPlaceMsg(const DBoWPlaceMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBoWPlaceMsg::SharedCtor() {
  _cached_size_ = 0;
  index_ = NULL;
  descriptor_vector_ = NULL;
  keypoint_vector_ = NULL;
  landmarks_vector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBoWPlaceMsg::~DBoWPlaceMsg() {
  SharedDtor();
}

void DBoWPlaceMsg::SharedDtor() {
  if (this != default_instance_) {
    delete index_;
    delete descriptor_vector_;
    delete keypoint_vector_;
    delete landmarks_vector_;
  }
}

void DBoWPlaceMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBoWPlaceMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBoWPlaceMsg_descriptor_;
}

const DBoWPlaceMsg& DBoWPlaceMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbow_2eproto();
  return *default_instance_;
}

DBoWPlaceMsg* DBoWPlaceMsg::default_instance_ = NULL;

DBoWPlaceMsg* DBoWPlaceMsg::New() const {
  return new DBoWPlaceMsg;
}

void DBoWPlaceMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_index()) {
      if (index_ != NULL) index_->::pb::ReferenceFrameIdMsg::Clear();
    }
    if (has_descriptor_vector()) {
      if (descriptor_vector_ != NULL) descriptor_vector_->::pb::DescriptorVectorMsg::Clear();
    }
    if (has_keypoint_vector()) {
      if (keypoint_vector_ != NULL) keypoint_vector_->::pb::KeyPointVectorMsg::Clear();
    }
    if (has_landmarks_vector()) {
      if (landmarks_vector_ != NULL) landmarks_vector_->::pb::LandmarkIdVectorMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBoWPlaceMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ReferenceFrameIdMsg index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descriptor_vector;
        break;
      }

      // optional .pb.DescriptorVectorMsg descriptor_vector = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descriptor_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_descriptor_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keypoint_vector;
        break;
      }

      // optional .pb.KeyPointVectorMsg keypoint_vector = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keypoint_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keypoint_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_landmarks_vector;
        break;
      }

      // optional .pb.LandmarkIdVectorMsg landmarks_vector = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_landmarks_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmarks_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBoWPlaceMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ReferenceFrameIdMsg index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->index(), output);
  }

  // optional .pb.DescriptorVectorMsg descriptor_vector = 2;
  if (has_descriptor_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptor_vector(), output);
  }

  // optional .pb.KeyPointVectorMsg keypoint_vector = 3;
  if (has_keypoint_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keypoint_vector(), output);
  }

  // optional .pb.LandmarkIdVectorMsg landmarks_vector = 4;
  if (has_landmarks_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->landmarks_vector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBoWPlaceMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ReferenceFrameIdMsg index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->index(), target);
  }

  // optional .pb.DescriptorVectorMsg descriptor_vector = 2;
  if (has_descriptor_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->descriptor_vector(), target);
  }

  // optional .pb.KeyPointVectorMsg keypoint_vector = 3;
  if (has_keypoint_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keypoint_vector(), target);
  }

  // optional .pb.LandmarkIdVectorMsg landmarks_vector = 4;
  if (has_landmarks_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->landmarks_vector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBoWPlaceMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ReferenceFrameIdMsg index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->index());
    }

    // optional .pb.DescriptorVectorMsg descriptor_vector = 2;
    if (has_descriptor_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->descriptor_vector());
    }

    // optional .pb.KeyPointVectorMsg keypoint_vector = 3;
    if (has_keypoint_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keypoint_vector());
    }

    // optional .pb.LandmarkIdVectorMsg landmarks_vector = 4;
    if (has_landmarks_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmarks_vector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBoWPlaceMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBoWPlaceMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBoWPlaceMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBoWPlaceMsg::MergeFrom(const DBoWPlaceMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      mutable_index()->::pb::ReferenceFrameIdMsg::MergeFrom(from.index());
    }
    if (from.has_descriptor_vector()) {
      mutable_descriptor_vector()->::pb::DescriptorVectorMsg::MergeFrom(from.descriptor_vector());
    }
    if (from.has_keypoint_vector()) {
      mutable_keypoint_vector()->::pb::KeyPointVectorMsg::MergeFrom(from.keypoint_vector());
    }
    if (from.has_landmarks_vector()) {
      mutable_landmarks_vector()->::pb::LandmarkIdVectorMsg::MergeFrom(from.landmarks_vector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBoWPlaceMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBoWPlaceMsg::CopyFrom(const DBoWPlaceMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBoWPlaceMsg::IsInitialized() const {

  return true;
}

void DBoWPlaceMsg::Swap(DBoWPlaceMsg* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(descriptor_vector_, other->descriptor_vector_);
    std::swap(keypoint_vector_, other->keypoint_vector_);
    std::swap(landmarks_vector_, other->landmarks_vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBoWPlaceMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBoWPlaceMsg_descriptor_;
  metadata.reflection = DBoWPlaceMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBoWCorpusMsg::kIndexFieldNumber;
const int DBoWCorpusMsg::kDescriptorVectorFieldNumber;
const int DBoWCorpusMsg::kKeypointVectorFieldNumber;
#endif  // !_MSC_VER

DBoWCorpusMsg::DBoWCorpusMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBoWCorpusMsg::InitAsDefaultInstance() {
}

DBoWCorpusMsg::DBoWCorpusMsg(const DBoWCorpusMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBoWCorpusMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBoWCorpusMsg::~DBoWCorpusMsg() {
  SharedDtor();
}

void DBoWCorpusMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBoWCorpusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBoWCorpusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBoWCorpusMsg_descriptor_;
}

const DBoWCorpusMsg& DBoWCorpusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbow_2eproto();
  return *default_instance_;
}

DBoWCorpusMsg* DBoWCorpusMsg::default_instance_ = NULL;

DBoWCorpusMsg* DBoWCorpusMsg::New() const {
  return new DBoWCorpusMsg;
}

void DBoWCorpusMsg::Clear() {
  index_.Clear();
  descriptor_vector_.Clear();
  keypoint_vector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBoWCorpusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ReferenceFrameIdMsg index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_index;
        if (input->ExpectTag(18)) goto parse_descriptor_vector;
        break;
      }

      // repeated .pb.DescriptorVectorMsg descriptor_vector = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descriptor_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_descriptor_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descriptor_vector;
        if (input->ExpectTag(26)) goto parse_keypoint_vector;
        break;
      }

      // repeated .pb.KeyPointVectorMsg keypoint_vector = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keypoint_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keypoint_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keypoint_vector;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBoWCorpusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.ReferenceFrameIdMsg index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->index(i), output);
  }

  // repeated .pb.DescriptorVectorMsg descriptor_vector = 2;
  for (int i = 0; i < this->descriptor_vector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptor_vector(i), output);
  }

  // repeated .pb.KeyPointVectorMsg keypoint_vector = 3;
  for (int i = 0; i < this->keypoint_vector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keypoint_vector(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBoWCorpusMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.ReferenceFrameIdMsg index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->index(i), target);
  }

  // repeated .pb.DescriptorVectorMsg descriptor_vector = 2;
  for (int i = 0; i < this->descriptor_vector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->descriptor_vector(i), target);
  }

  // repeated .pb.KeyPointVectorMsg keypoint_vector = 3;
  for (int i = 0; i < this->keypoint_vector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keypoint_vector(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBoWCorpusMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.ReferenceFrameIdMsg index = 1;
  total_size += 1 * this->index_size();
  for (int i = 0; i < this->index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->index(i));
  }

  // repeated .pb.DescriptorVectorMsg descriptor_vector = 2;
  total_size += 1 * this->descriptor_vector_size();
  for (int i = 0; i < this->descriptor_vector_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->descriptor_vector(i));
  }

  // repeated .pb.KeyPointVectorMsg keypoint_vector = 3;
  total_size += 1 * this->keypoint_vector_size();
  for (int i = 0; i < this->keypoint_vector_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keypoint_vector(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBoWCorpusMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBoWCorpusMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBoWCorpusMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBoWCorpusMsg::MergeFrom(const DBoWCorpusMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  descriptor_vector_.MergeFrom(from.descriptor_vector_);
  keypoint_vector_.MergeFrom(from.keypoint_vector_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBoWCorpusMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBoWCorpusMsg::CopyFrom(const DBoWCorpusMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBoWCorpusMsg::IsInitialized() const {

  return true;
}

void DBoWCorpusMsg::Swap(DBoWCorpusMsg* other) {
  if (other != this) {
    index_.Swap(&other->index_);
    descriptor_vector_.Swap(&other->descriptor_vector_);
    keypoint_vector_.Swap(&other->keypoint_vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBoWCorpusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBoWCorpusMsg_descriptor_;
  metadata.reflection = DBoWCorpusMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
