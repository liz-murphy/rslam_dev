// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend.proto

#ifndef PROTOBUF_frontend_2eproto__INCLUDED
#define PROTOBUF_frontend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rslam.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_frontend_2eproto();
void protobuf_AssignDesc_frontend_2eproto();
void protobuf_ShutdownFile_frontend_2eproto();

class PlaceFrameMappingMsg;
class FrontendMsg;

// ===================================================================

class PlaceFrameMappingMsg : public ::google::protobuf::Message {
 public:
  PlaceFrameMappingMsg();
  virtual ~PlaceFrameMappingMsg();

  PlaceFrameMappingMsg(const PlaceFrameMappingMsg& from);

  inline PlaceFrameMappingMsg& operator=(const PlaceFrameMappingMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceFrameMappingMsg& default_instance();

  void Swap(PlaceFrameMappingMsg* other);

  // implements Message ----------------------------------------------

  PlaceFrameMappingMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaceFrameMappingMsg& from);
  void MergeFrom(const PlaceFrameMappingMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ReferenceFrameIdMsg frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline const ::pb::ReferenceFrameIdMsg& frame_id() const;
  inline ::pb::ReferenceFrameIdMsg* mutable_frame_id();
  inline ::pb::ReferenceFrameIdMsg* release_frame_id();
  inline void set_allocated_frame_id(::pb::ReferenceFrameIdMsg* frame_id);

  // optional uint32 place_id = 2;
  inline bool has_place_id() const;
  inline void clear_place_id();
  static const int kPlaceIdFieldNumber = 2;
  inline ::google::protobuf::uint32 place_id() const;
  inline void set_place_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.PlaceFrameMappingMsg)
 private:
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_place_id();
  inline void clear_has_place_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::ReferenceFrameIdMsg* frame_id_;
  ::google::protobuf::uint32 place_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_frontend_2eproto();
  friend void protobuf_AssignDesc_frontend_2eproto();
  friend void protobuf_ShutdownFile_frontend_2eproto();

  void InitAsDefaultInstance();
  static PlaceFrameMappingMsg* default_instance_;
};
// -------------------------------------------------------------------

class FrontendMsg : public ::google::protobuf::Message {
 public:
  FrontendMsg();
  virtual ~FrontendMsg();

  FrontendMsg(const FrontendMsg& from);

  inline FrontendMsg& operator=(const FrontendMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrontendMsg& default_instance();

  void Swap(FrontendMsg* other);

  // implements Message ----------------------------------------------

  FrontendMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrontendMsg& from);
  void MergeFrom(const FrontendMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.PlaceFrameMappingMsg place_ids = 1;
  inline int place_ids_size() const;
  inline void clear_place_ids();
  static const int kPlaceIdsFieldNumber = 1;
  inline const ::pb::PlaceFrameMappingMsg& place_ids(int index) const;
  inline ::pb::PlaceFrameMappingMsg* mutable_place_ids(int index);
  inline ::pb::PlaceFrameMappingMsg* add_place_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PlaceFrameMappingMsg >&
      place_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PlaceFrameMappingMsg >*
      mutable_place_ids();

  // @@protoc_insertion_point(class_scope:pb.FrontendMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::PlaceFrameMappingMsg > place_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_frontend_2eproto();
  friend void protobuf_AssignDesc_frontend_2eproto();
  friend void protobuf_ShutdownFile_frontend_2eproto();

  void InitAsDefaultInstance();
  static FrontendMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PlaceFrameMappingMsg

// optional .pb.ReferenceFrameIdMsg frame_id = 1;
inline bool PlaceFrameMappingMsg::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaceFrameMappingMsg::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaceFrameMappingMsg::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaceFrameMappingMsg::clear_frame_id() {
  if (frame_id_ != NULL) frame_id_->::pb::ReferenceFrameIdMsg::Clear();
  clear_has_frame_id();
}
inline const ::pb::ReferenceFrameIdMsg& PlaceFrameMappingMsg::frame_id() const {
  return frame_id_ != NULL ? *frame_id_ : *default_instance_->frame_id_;
}
inline ::pb::ReferenceFrameIdMsg* PlaceFrameMappingMsg::mutable_frame_id() {
  set_has_frame_id();
  if (frame_id_ == NULL) frame_id_ = new ::pb::ReferenceFrameIdMsg;
  return frame_id_;
}
inline ::pb::ReferenceFrameIdMsg* PlaceFrameMappingMsg::release_frame_id() {
  clear_has_frame_id();
  ::pb::ReferenceFrameIdMsg* temp = frame_id_;
  frame_id_ = NULL;
  return temp;
}
inline void PlaceFrameMappingMsg::set_allocated_frame_id(::pb::ReferenceFrameIdMsg* frame_id) {
  delete frame_id_;
  frame_id_ = frame_id;
  if (frame_id) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
}

// optional uint32 place_id = 2;
inline bool PlaceFrameMappingMsg::has_place_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlaceFrameMappingMsg::set_has_place_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlaceFrameMappingMsg::clear_has_place_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlaceFrameMappingMsg::clear_place_id() {
  place_id_ = 0u;
  clear_has_place_id();
}
inline ::google::protobuf::uint32 PlaceFrameMappingMsg::place_id() const {
  return place_id_;
}
inline void PlaceFrameMappingMsg::set_place_id(::google::protobuf::uint32 value) {
  set_has_place_id();
  place_id_ = value;
}

// -------------------------------------------------------------------

// FrontendMsg

// repeated .pb.PlaceFrameMappingMsg place_ids = 1;
inline int FrontendMsg::place_ids_size() const {
  return place_ids_.size();
}
inline void FrontendMsg::clear_place_ids() {
  place_ids_.Clear();
}
inline const ::pb::PlaceFrameMappingMsg& FrontendMsg::place_ids(int index) const {
  return place_ids_.Get(index);
}
inline ::pb::PlaceFrameMappingMsg* FrontendMsg::mutable_place_ids(int index) {
  return place_ids_.Mutable(index);
}
inline ::pb::PlaceFrameMappingMsg* FrontendMsg::add_place_ids() {
  return place_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PlaceFrameMappingMsg >&
FrontendMsg::place_ids() const {
  return place_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PlaceFrameMappingMsg >*
FrontendMsg::mutable_place_ids() {
  return &place_ids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_frontend_2eproto__INCLUDED
