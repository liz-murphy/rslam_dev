// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pose.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pose.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PoseMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoseMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PoseMsg_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pose_2eproto() {
  protobuf_AddDesc_Pose_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pose.proto");
  GOOGLE_CHECK(file != NULL);
  PoseMsg_descriptor_ = file->message_type(0);
  static const int PoseMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseMsg, device_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseMsg, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseMsg, covariance_),
  };
  PoseMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoseMsg_descriptor_,
      PoseMsg::default_instance_,
      PoseMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoseMsg));
  PoseMsg_Type_descriptor_ = PoseMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pose_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoseMsg_descriptor_, &PoseMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pose_2eproto() {
  delete PoseMsg::default_instance_;
  delete PoseMsg_reflection_;
}

void protobuf_AddDesc_Pose_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_Matrix_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nPose.proto\022\002pb\032\014Matrix.proto\"\332\001\n\007PoseM"
    "sg\022\n\n\002id\030\001 \001(\005\022\023\n\013device_time\030\002 \001(\001\022\036\n\004t"
    "ype\030\003 \002(\0162\020.pb.PoseMsg.Type\022\033\n\004pose\030\004 \001("
    "\0132\r.pb.VectorMsg\022!\n\ncovariance\030\005 \001(\0132\r.p"
    "b.MatrixMsg\"N\n\004Type\022\007\n\003SO2\020\001\022\007\n\003SE2\020\002\022\007\n"
    "\003SO3\020\003\022\007\n\003SE3\020\004\022\016\n\nLatLongAlt\020\005\022\t\n\005Euler"
    "\020\006\022\007\n\003RAW\020\t", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pose.proto", &protobuf_RegisterTypes);
  PoseMsg::default_instance_ = new PoseMsg();
  PoseMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pose_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pose_2eproto {
  StaticDescriptorInitializer_Pose_2eproto() {
    protobuf_AddDesc_Pose_2eproto();
  }
} static_descriptor_initializer_Pose_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* PoseMsg_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoseMsg_Type_descriptor_;
}
bool PoseMsg_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PoseMsg_Type PoseMsg::SO2;
const PoseMsg_Type PoseMsg::SE2;
const PoseMsg_Type PoseMsg::SO3;
const PoseMsg_Type PoseMsg::SE3;
const PoseMsg_Type PoseMsg::LatLongAlt;
const PoseMsg_Type PoseMsg::Euler;
const PoseMsg_Type PoseMsg::RAW;
const PoseMsg_Type PoseMsg::Type_MIN;
const PoseMsg_Type PoseMsg::Type_MAX;
const int PoseMsg::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PoseMsg::kIdFieldNumber;
const int PoseMsg::kDeviceTimeFieldNumber;
const int PoseMsg::kTypeFieldNumber;
const int PoseMsg::kPoseFieldNumber;
const int PoseMsg::kCovarianceFieldNumber;
#endif  // !_MSC_VER

PoseMsg::PoseMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoseMsg::InitAsDefaultInstance() {
  pose_ = const_cast< ::pb::VectorMsg*>(&::pb::VectorMsg::default_instance());
  covariance_ = const_cast< ::pb::MatrixMsg*>(&::pb::MatrixMsg::default_instance());
}

PoseMsg::PoseMsg(const PoseMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoseMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  device_time_ = 0;
  type_ = 1;
  pose_ = NULL;
  covariance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoseMsg::~PoseMsg() {
  SharedDtor();
}

void PoseMsg::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
    delete covariance_;
  }
}

void PoseMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoseMsg_descriptor_;
}

const PoseMsg& PoseMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pose_2eproto();
  return *default_instance_;
}

PoseMsg* PoseMsg::default_instance_ = NULL;

PoseMsg* PoseMsg::New() const {
  return new PoseMsg;
}

void PoseMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    device_time_ = 0;
    type_ = 1;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::pb::VectorMsg::Clear();
    }
    if (has_covariance()) {
      if (covariance_ != NULL) covariance_->::pb::MatrixMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoseMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_time;
        break;
      }

      // optional double device_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &device_time_)));
          set_has_device_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .pb.PoseMsg.Type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::PoseMsg_Type_IsValid(value)) {
            set_type(static_cast< ::pb::PoseMsg_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pose;
        break;
      }

      // optional .pb.VectorMsg pose = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_covariance;
        break;
      }

      // optional .pb.MatrixMsg covariance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_covariance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_covariance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoseMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double device_time = 2;
  if (has_device_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->device_time(), output);
  }

  // required .pb.PoseMsg.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .pb.VectorMsg pose = 4;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pose(), output);
  }

  // optional .pb.MatrixMsg covariance = 5;
  if (has_covariance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->covariance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoseMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double device_time = 2;
  if (has_device_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->device_time(), target);
  }

  // required .pb.PoseMsg.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .pb.VectorMsg pose = 4;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pose(), target);
  }

  // optional .pb.MatrixMsg covariance = 5;
  if (has_covariance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->covariance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoseMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional double device_time = 2;
    if (has_device_time()) {
      total_size += 1 + 8;
    }

    // required .pb.PoseMsg.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pb.VectorMsg pose = 4;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .pb.MatrixMsg covariance = 5;
    if (has_covariance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->covariance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoseMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoseMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoseMsg::MergeFrom(const PoseMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_device_time()) {
      set_device_time(from.device_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pose()) {
      mutable_pose()->::pb::VectorMsg::MergeFrom(from.pose());
    }
    if (from.has_covariance()) {
      mutable_covariance()->::pb::MatrixMsg::MergeFrom(from.covariance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoseMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseMsg::CopyFrom(const PoseMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_covariance()) {
    if (!this->covariance().IsInitialized()) return false;
  }
  return true;
}

void PoseMsg::Swap(PoseMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(device_time_, other->device_time_);
    std::swap(type_, other->type_);
    std::swap(pose_, other->pose_);
    std::swap(covariance_, other->covariance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoseMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoseMsg_descriptor_;
  metadata.reflection = PoseMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
