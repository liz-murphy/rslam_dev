// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rslam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rslam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SessionIdMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionIdMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceFrameIdMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceFrameIdMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformEdgeIdMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformEdgeIdMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandmarkIdMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandmarkIdMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeasurementIdMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeasurementIdMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PixelMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PixelMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatchHomographyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatchHomographyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeasurementMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeasurementMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiViewMeasurementMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiViewMeasurementMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandmarkMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandmarkMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformEdgeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformEdgeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceFrameMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceFrameMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraRigMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraRigMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlamMapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlamMapMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rslam_2eproto() {
  protobuf_AddDesc_rslam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rslam.proto");
  GOOGLE_CHECK(file != NULL);
  SessionIdMsg_descriptor_ = file->message_type(0);
  static const int SessionIdMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionIdMsg, uuid_),
  };
  SessionIdMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionIdMsg_descriptor_,
      SessionIdMsg::default_instance_,
      SessionIdMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionIdMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionIdMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionIdMsg));
  ReferenceFrameIdMsg_descriptor_ = file->message_type(1);
  static const int ReferenceFrameIdMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameIdMsg, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameIdMsg, session_id_),
  };
  ReferenceFrameIdMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceFrameIdMsg_descriptor_,
      ReferenceFrameIdMsg::default_instance_,
      ReferenceFrameIdMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameIdMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameIdMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceFrameIdMsg));
  TransformEdgeIdMsg_descriptor_ = file->message_type(2);
  static const int TransformEdgeIdMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeIdMsg, edge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeIdMsg, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeIdMsg, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeIdMsg, end_),
  };
  TransformEdgeIdMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformEdgeIdMsg_descriptor_,
      TransformEdgeIdMsg::default_instance_,
      TransformEdgeIdMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeIdMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeIdMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformEdgeIdMsg));
  LandmarkIdMsg_descriptor_ = file->message_type(3);
  static const int LandmarkIdMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkIdMsg, ref_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkIdMsg, landmark_id_),
  };
  LandmarkIdMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandmarkIdMsg_descriptor_,
      LandmarkIdMsg::default_instance_,
      LandmarkIdMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkIdMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkIdMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandmarkIdMsg));
  MeasurementIdMsg_descriptor_ = file->message_type(4);
  static const int MeasurementIdMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementIdMsg, ref_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementIdMsg, measurement_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementIdMsg, landmark_id_),
  };
  MeasurementIdMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeasurementIdMsg_descriptor_,
      MeasurementIdMsg::default_instance_,
      MeasurementIdMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementIdMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementIdMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeasurementIdMsg));
  PixelMsg_descriptor_ = file->message_type(5);
  static const int PixelMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelMsg, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelMsg, v_),
  };
  PixelMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PixelMsg_descriptor_,
      PixelMsg::default_instance_,
      PixelMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PixelMsg));
  PatchHomographyMsg_descriptor_ = file->message_type(6);
  static const int PatchHomographyMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchHomographyMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchHomographyMsg, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchHomographyMsg, h_),
  };
  PatchHomographyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatchHomographyMsg_descriptor_,
      PatchHomographyMsg::default_instance_,
      PatchHomographyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchHomographyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchHomographyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatchHomographyMsg));
  MeasurementMsg_descriptor_ = file->message_type(7);
  static const int MeasurementMsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, pixel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, match_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, matching_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, reprojection_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, patch_homography_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, patch_vector_),
  };
  MeasurementMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeasurementMsg_descriptor_,
      MeasurementMsg::default_instance_,
      MeasurementMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeasurementMsg));
  MultiViewMeasurementMsg_descriptor_ = file->message_type(8);
  static const int MultiViewMeasurementMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiViewMeasurementMsg, measurements_),
  };
  MultiViewMeasurementMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiViewMeasurementMsg_descriptor_,
      MultiViewMeasurementMsg::default_instance_,
      MultiViewMeasurementMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiViewMeasurementMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiViewMeasurementMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiViewMeasurementMsg));
  LandmarkMsg_descriptor_ = file->message_type(9);
  static const int LandmarkMsg_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, base_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, feature_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, feature_track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, num_failed_track_attempts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, pyramid_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, landmark_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, extent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, relative_pos_),
  };
  LandmarkMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandmarkMsg_descriptor_,
      LandmarkMsg::default_instance_,
      LandmarkMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandmarkMsg));
  TransformEdgeMsg_descriptor_ = file->message_type(10);
  static const int TransformEdgeMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeMsg, last_modified_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeMsg, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeMsg, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeMsg, is_broken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeMsg, is_loop_closure_),
  };
  TransformEdgeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformEdgeMsg_descriptor_,
      TransformEdgeMsg::default_instance_,
      TransformEdgeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformEdgeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformEdgeMsg));
  ReferenceFrameMsg_descriptor_ = file->message_type(11);
  static const int ReferenceFrameMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, parent_edge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, neighbor_edge_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, sensor_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, is_isolated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, landmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, measurements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, last_modified_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, gravity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, biases_),
  };
  ReferenceFrameMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceFrameMsg_descriptor_,
      ReferenceFrameMsg::default_instance_,
      ReferenceFrameMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceFrameMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceFrameMsg));
  CameraRigMsg_descriptor_ = file->message_type(12);
  static const int CameraRigMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRigMsg, cameras_),
  };
  CameraRigMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraRigMsg_descriptor_,
      CameraRigMsg::default_instance_,
      CameraRigMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRigMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRigMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraRigMsg));
  SlamMapMsg_descriptor_ = file->message_type(13);
  static const int SlamMapMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMapMsg, session_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMapMsg, rigs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMapMsg, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMapMsg, edges_),
  };
  SlamMapMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlamMapMsg_descriptor_,
      SlamMapMsg::default_instance_,
      SlamMapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMapMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMapMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlamMapMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rslam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionIdMsg_descriptor_, &SessionIdMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceFrameIdMsg_descriptor_, &ReferenceFrameIdMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformEdgeIdMsg_descriptor_, &TransformEdgeIdMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandmarkIdMsg_descriptor_, &LandmarkIdMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeasurementIdMsg_descriptor_, &MeasurementIdMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PixelMsg_descriptor_, &PixelMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatchHomographyMsg_descriptor_, &PatchHomographyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeasurementMsg_descriptor_, &MeasurementMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiViewMeasurementMsg_descriptor_, &MultiViewMeasurementMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandmarkMsg_descriptor_, &LandmarkMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformEdgeMsg_descriptor_, &TransformEdgeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceFrameMsg_descriptor_, &ReferenceFrameMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraRigMsg_descriptor_, &CameraRigMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlamMapMsg_descriptor_, &SlamMapMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rslam_2eproto() {
  delete SessionIdMsg::default_instance_;
  delete SessionIdMsg_reflection_;
  delete ReferenceFrameIdMsg::default_instance_;
  delete ReferenceFrameIdMsg_reflection_;
  delete TransformEdgeIdMsg::default_instance_;
  delete TransformEdgeIdMsg_reflection_;
  delete LandmarkIdMsg::default_instance_;
  delete LandmarkIdMsg_reflection_;
  delete MeasurementIdMsg::default_instance_;
  delete MeasurementIdMsg_reflection_;
  delete PixelMsg::default_instance_;
  delete PixelMsg_reflection_;
  delete PatchHomographyMsg::default_instance_;
  delete PatchHomographyMsg_reflection_;
  delete MeasurementMsg::default_instance_;
  delete MeasurementMsg_reflection_;
  delete MultiViewMeasurementMsg::default_instance_;
  delete MultiViewMeasurementMsg_reflection_;
  delete LandmarkMsg::default_instance_;
  delete LandmarkMsg_reflection_;
  delete TransformEdgeMsg::default_instance_;
  delete TransformEdgeMsg_reflection_;
  delete ReferenceFrameMsg::default_instance_;
  delete ReferenceFrameMsg_reflection_;
  delete CameraRigMsg::default_instance_;
  delete CameraRigMsg_reflection_;
  delete SlamMapMsg::default_instance_;
  delete SlamMapMsg_reflection_;
}

void protobuf_AddDesc_rslam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_FrameObject_2eproto();
  ::pb::protobuf_AddDesc_CameraModel_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013rslam.proto\022\002pb\032\021FrameObject.proto\032\021Ca"
    "meraModel.proto\"\034\n\014SessionIdMsg\022\014\n\004uuid\030"
    "\001 \001(\014\"M\n\023ReferenceFrameIdMsg\022\020\n\010frame_id"
    "\030\001 \001(\r\022$\n\nsession_id\030\002 \001(\0132\020.pb.SessionI"
    "dMsg\"\231\001\n\022TransformEdgeIdMsg\022\017\n\007edge_id\030\001"
    " \001(\005\022$\n\nsession_id\030\002 \001(\0132\020.pb.SessionIdM"
    "sg\022&\n\005start\030\003 \001(\0132\027.pb.ReferenceFrameIdM"
    "sg\022$\n\003end\030\004 \001(\0132\027.pb.ReferenceFrameIdMsg"
    "\"S\n\rLandmarkIdMsg\022-\n\014ref_frame_id\030\001 \001(\0132"
    "\027.pb.ReferenceFrameIdMsg\022\023\n\013landmark_id\030"
    "\002 \001(\005\"\201\001\n\020MeasurementIdMsg\022-\n\014ref_frame_"
    "id\030\001 \001(\0132\027.pb.ReferenceFrameIdMsg\022\026\n\016mea"
    "surement_id\030\002 \001(\005\022&\n\013landmark_id\030\003 \001(\0132\021"
    ".pb.LandmarkIdMsg\" \n\010PixelMsg\022\t\n\001u\030\001 \001(\001"
    "\022\t\n\001v\030\002 \001(\001\"R\n\022PatchHomographyMsg\022\r\n\005sta"
    "te\030\001 \001(\005\022\r\n\005scale\030\002 \001(\001\022\036\n\001h\030\003 \001(\0132\023.pb."
    "DoubleMatrixMsg\"\230\002\n\016MeasurementMsg\022 \n\002id"
    "\030\001 \001(\0132\024.pb.MeasurementIdMsg\022\033\n\005pixel\030\002 "
    "\001(\0132\014.pb.PixelMsg\022\022\n\nmatch_flag\030\003 \001(\r\022\026\n"
    "\016matching_error\030\004 \001(\001\022\032\n\022reprojection_er"
    "ror\030\005 \001(\001\022\r\n\005scale\030\006 \001(\002\022\023\n\013orientation\030"
    "\007 \001(\002\0220\n\020patch_homography\030\010 \001(\0132\026.pb.Pat"
    "chHomographyMsg\022)\n\014patch_vector\030\t \001(\0132\023."
    "pb.DoubleMatrixMsg\"C\n\027MultiViewMeasureme"
    "ntMsg\022(\n\014measurements\030\001 \003(\0132\022.pb.Measure"
    "mentMsg\"\203\003\n\013LandmarkMsg\022\035\n\002id\030\001 \001(\0132\021.pb"
    ".LandmarkIdMsg\022\023\n\013base_camera\030\002 \001(\r\022\"\n\005p"
    "atch\030\003 \001(\0132\023.pb.DoubleMatrixMsg\022\032\n\022featu"
    "re_descriptor\030\004 \001(\014\022+\n\rfeature_track\030\006 \003"
    "(\0132\024.pb.MeasurementIdMsg\022\014\n\004name\030\007 \001(\t\022\016"
    "\n\006active\030\010 \001(\010\022!\n\031num_failed_track_attem"
    "pts\030\t \001(\r\022\025\n\rpyramid_level\030\n \001(\r\022\026\n\016land"
    "mark_state\030\013 \001(\005\022\016\n\006extent\030\014 \001(\001\022(\n\013orie"
    "ntation\030\r \001(\0132\023.pb.DoubleMatrixMsg\022)\n\014re"
    "lative_pos\030\016 \001(\0132\023.pb.DoubleMatrixMsg\"\306\001"
    "\n\020TransformEdgeMsg\022\"\n\002id\030\001 \001(\0132\026.pb.Tran"
    "sformEdgeIdMsg\022\032\n\022last_modified_time\030\002 \001"
    "(\001\022&\n\ttransform\030\004 \001(\0132\023.pb.DoubleMatrixM"
    "sg\022\036\n\001g\030\005 \001(\0132\023.pb.DoubleMatrixMsg\022\021\n\tis"
    "_broken\030\006 \001(\010\022\027\n\017is_loop_closure\030\007 \001(\010\"\317"
    "\003\n\021ReferenceFrameMsg\022#\n\002id\030\001 \001(\0132\027.pb.Re"
    "ferenceFrameIdMsg\022.\n\016parent_edge_id\030\002 \001("
    "\0132\026.pb.TransformEdgeIdMsg\0221\n\021neighbor_ed"
    "ge_ids\030\003 \003(\0132\026.pb.TransformEdgeIdMsg\022\023\n\013"
    "sensor_time\030\004 \001(\001\022\023\n\013is_isolated\030\005 \001(\010\022\""
    "\n\tlandmarks\030\006 \003(\0132\017.pb.LandmarkMsg\0221\n\014me"
    "asurements\030\007 \003(\0132\033.pb.MultiViewMeasureme"
    "ntMsg\022%\n\010velocity\030\010 \001(\0132\023.pb.DoubleMatri"
    "xMsg\022\032\n\022last_modified_time\030\t \001(\001\022#\n\007obje"
    "cts\030\n \003(\0132\022.pb.FrameObjectMsg\022$\n\007gravity"
    "\030\013 \001(\0132\023.pb.DoubleMatrixMsg\022#\n\006biases\030\014 "
    "\001(\0132\023.pb.DoubleMatrixMsg\"3\n\014CameraRigMsg"
    "\022#\n\007cameras\030\001 \003(\0132\022.pb.CameraModelMsg\"\236\001"
    "\n\nSlamMapMsg\022%\n\013session_ids\030\001 \003(\0132\020.pb.S"
    "essionIdMsg\022\036\n\004rigs\030\002 \003(\0132\020.pb.CameraRig"
    "Msg\022$\n\005nodes\030\003 \003(\0132\025.pb.ReferenceFrameMs"
    "g\022#\n\005edges\030\004 \003(\0132\024.pb.TransformEdgeMsg", 2278);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rslam.proto", &protobuf_RegisterTypes);
  SessionIdMsg::default_instance_ = new SessionIdMsg();
  ReferenceFrameIdMsg::default_instance_ = new ReferenceFrameIdMsg();
  TransformEdgeIdMsg::default_instance_ = new TransformEdgeIdMsg();
  LandmarkIdMsg::default_instance_ = new LandmarkIdMsg();
  MeasurementIdMsg::default_instance_ = new MeasurementIdMsg();
  PixelMsg::default_instance_ = new PixelMsg();
  PatchHomographyMsg::default_instance_ = new PatchHomographyMsg();
  MeasurementMsg::default_instance_ = new MeasurementMsg();
  MultiViewMeasurementMsg::default_instance_ = new MultiViewMeasurementMsg();
  LandmarkMsg::default_instance_ = new LandmarkMsg();
  TransformEdgeMsg::default_instance_ = new TransformEdgeMsg();
  ReferenceFrameMsg::default_instance_ = new ReferenceFrameMsg();
  CameraRigMsg::default_instance_ = new CameraRigMsg();
  SlamMapMsg::default_instance_ = new SlamMapMsg();
  SessionIdMsg::default_instance_->InitAsDefaultInstance();
  ReferenceFrameIdMsg::default_instance_->InitAsDefaultInstance();
  TransformEdgeIdMsg::default_instance_->InitAsDefaultInstance();
  LandmarkIdMsg::default_instance_->InitAsDefaultInstance();
  MeasurementIdMsg::default_instance_->InitAsDefaultInstance();
  PixelMsg::default_instance_->InitAsDefaultInstance();
  PatchHomographyMsg::default_instance_->InitAsDefaultInstance();
  MeasurementMsg::default_instance_->InitAsDefaultInstance();
  MultiViewMeasurementMsg::default_instance_->InitAsDefaultInstance();
  LandmarkMsg::default_instance_->InitAsDefaultInstance();
  TransformEdgeMsg::default_instance_->InitAsDefaultInstance();
  ReferenceFrameMsg::default_instance_->InitAsDefaultInstance();
  CameraRigMsg::default_instance_->InitAsDefaultInstance();
  SlamMapMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rslam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rslam_2eproto {
  StaticDescriptorInitializer_rslam_2eproto() {
    protobuf_AddDesc_rslam_2eproto();
  }
} static_descriptor_initializer_rslam_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SessionIdMsg::kUuidFieldNumber;
#endif  // !_MSC_VER

SessionIdMsg::SessionIdMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionIdMsg::InitAsDefaultInstance() {
}

SessionIdMsg::SessionIdMsg(const SessionIdMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionIdMsg::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionIdMsg::~SessionIdMsg() {
  SharedDtor();
}

void SessionIdMsg::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void SessionIdMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionIdMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionIdMsg_descriptor_;
}

const SessionIdMsg& SessionIdMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

SessionIdMsg* SessionIdMsg::default_instance_ = NULL;

SessionIdMsg* SessionIdMsg::New() const {
  return new SessionIdMsg;
}

void SessionIdMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionIdMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionIdMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionIdMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionIdMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionIdMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionIdMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionIdMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionIdMsg::MergeFrom(const SessionIdMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionIdMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionIdMsg::CopyFrom(const SessionIdMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionIdMsg::IsInitialized() const {

  return true;
}

void SessionIdMsg::Swap(SessionIdMsg* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionIdMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionIdMsg_descriptor_;
  metadata.reflection = SessionIdMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReferenceFrameIdMsg::kFrameIdFieldNumber;
const int ReferenceFrameIdMsg::kSessionIdFieldNumber;
#endif  // !_MSC_VER

ReferenceFrameIdMsg::ReferenceFrameIdMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceFrameIdMsg::InitAsDefaultInstance() {
  session_id_ = const_cast< ::pb::SessionIdMsg*>(&::pb::SessionIdMsg::default_instance());
}

ReferenceFrameIdMsg::ReferenceFrameIdMsg(const ReferenceFrameIdMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceFrameIdMsg::SharedCtor() {
  _cached_size_ = 0;
  frame_id_ = 0u;
  session_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceFrameIdMsg::~ReferenceFrameIdMsg() {
  SharedDtor();
}

void ReferenceFrameIdMsg::SharedDtor() {
  if (this != default_instance_) {
    delete session_id_;
  }
}

void ReferenceFrameIdMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceFrameIdMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceFrameIdMsg_descriptor_;
}

const ReferenceFrameIdMsg& ReferenceFrameIdMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

ReferenceFrameIdMsg* ReferenceFrameIdMsg::default_instance_ = NULL;

ReferenceFrameIdMsg* ReferenceFrameIdMsg::New() const {
  return new ReferenceFrameIdMsg;
}

void ReferenceFrameIdMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frame_id_ = 0u;
    if (has_session_id()) {
      if (session_id_ != NULL) session_id_->::pb::SessionIdMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceFrameIdMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 frame_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional .pb.SessionIdMsg session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceFrameIdMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 frame_id = 1;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_id(), output);
  }

  // optional .pb.SessionIdMsg session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceFrameIdMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 frame_id = 1;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_id(), target);
  }

  // optional .pb.SessionIdMsg session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceFrameIdMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 frame_id = 1;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_id());
    }

    // optional .pb.SessionIdMsg session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceFrameIdMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceFrameIdMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceFrameIdMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceFrameIdMsg::MergeFrom(const ReferenceFrameIdMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_session_id()) {
      mutable_session_id()->::pb::SessionIdMsg::MergeFrom(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceFrameIdMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceFrameIdMsg::CopyFrom(const ReferenceFrameIdMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceFrameIdMsg::IsInitialized() const {

  return true;
}

void ReferenceFrameIdMsg::Swap(ReferenceFrameIdMsg* other) {
  if (other != this) {
    std::swap(frame_id_, other->frame_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceFrameIdMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceFrameIdMsg_descriptor_;
  metadata.reflection = ReferenceFrameIdMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransformEdgeIdMsg::kEdgeIdFieldNumber;
const int TransformEdgeIdMsg::kSessionIdFieldNumber;
const int TransformEdgeIdMsg::kStartFieldNumber;
const int TransformEdgeIdMsg::kEndFieldNumber;
#endif  // !_MSC_VER

TransformEdgeIdMsg::TransformEdgeIdMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransformEdgeIdMsg::InitAsDefaultInstance() {
  session_id_ = const_cast< ::pb::SessionIdMsg*>(&::pb::SessionIdMsg::default_instance());
  start_ = const_cast< ::pb::ReferenceFrameIdMsg*>(&::pb::ReferenceFrameIdMsg::default_instance());
  end_ = const_cast< ::pb::ReferenceFrameIdMsg*>(&::pb::ReferenceFrameIdMsg::default_instance());
}

TransformEdgeIdMsg::TransformEdgeIdMsg(const TransformEdgeIdMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransformEdgeIdMsg::SharedCtor() {
  _cached_size_ = 0;
  edge_id_ = 0;
  session_id_ = NULL;
  start_ = NULL;
  end_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformEdgeIdMsg::~TransformEdgeIdMsg() {
  SharedDtor();
}

void TransformEdgeIdMsg::SharedDtor() {
  if (this != default_instance_) {
    delete session_id_;
    delete start_;
    delete end_;
  }
}

void TransformEdgeIdMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformEdgeIdMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformEdgeIdMsg_descriptor_;
}

const TransformEdgeIdMsg& TransformEdgeIdMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

TransformEdgeIdMsg* TransformEdgeIdMsg::default_instance_ = NULL;

TransformEdgeIdMsg* TransformEdgeIdMsg::New() const {
  return new TransformEdgeIdMsg;
}

void TransformEdgeIdMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    edge_id_ = 0;
    if (has_session_id()) {
      if (session_id_ != NULL) session_id_->::pb::SessionIdMsg::Clear();
    }
    if (has_start()) {
      if (start_ != NULL) start_->::pb::ReferenceFrameIdMsg::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::pb::ReferenceFrameIdMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformEdgeIdMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 edge_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edge_id_)));
          set_has_edge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional .pb.SessionIdMsg session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start;
        break;
      }

      // optional .pb.ReferenceFrameIdMsg start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end;
        break;
      }

      // optional .pb.ReferenceFrameIdMsg end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformEdgeIdMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 edge_id = 1;
  if (has_edge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->edge_id(), output);
  }

  // optional .pb.SessionIdMsg session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session_id(), output);
  }

  // optional .pb.ReferenceFrameIdMsg start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start(), output);
  }

  // optional .pb.ReferenceFrameIdMsg end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransformEdgeIdMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 edge_id = 1;
  if (has_edge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->edge_id(), target);
  }

  // optional .pb.SessionIdMsg session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session_id(), target);
  }

  // optional .pb.ReferenceFrameIdMsg start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start(), target);
  }

  // optional .pb.ReferenceFrameIdMsg end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransformEdgeIdMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 edge_id = 1;
    if (has_edge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edge_id());
    }

    // optional .pb.SessionIdMsg session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_id());
    }

    // optional .pb.ReferenceFrameIdMsg start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // optional .pb.ReferenceFrameIdMsg end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformEdgeIdMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformEdgeIdMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformEdgeIdMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformEdgeIdMsg::MergeFrom(const TransformEdgeIdMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edge_id()) {
      set_edge_id(from.edge_id());
    }
    if (from.has_session_id()) {
      mutable_session_id()->::pb::SessionIdMsg::MergeFrom(from.session_id());
    }
    if (from.has_start()) {
      mutable_start()->::pb::ReferenceFrameIdMsg::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::pb::ReferenceFrameIdMsg::MergeFrom(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformEdgeIdMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformEdgeIdMsg::CopyFrom(const TransformEdgeIdMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformEdgeIdMsg::IsInitialized() const {

  return true;
}

void TransformEdgeIdMsg::Swap(TransformEdgeIdMsg* other) {
  if (other != this) {
    std::swap(edge_id_, other->edge_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformEdgeIdMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformEdgeIdMsg_descriptor_;
  metadata.reflection = TransformEdgeIdMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandmarkIdMsg::kRefFrameIdFieldNumber;
const int LandmarkIdMsg::kLandmarkIdFieldNumber;
#endif  // !_MSC_VER

LandmarkIdMsg::LandmarkIdMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LandmarkIdMsg::InitAsDefaultInstance() {
  ref_frame_id_ = const_cast< ::pb::ReferenceFrameIdMsg*>(&::pb::ReferenceFrameIdMsg::default_instance());
}

LandmarkIdMsg::LandmarkIdMsg(const LandmarkIdMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LandmarkIdMsg::SharedCtor() {
  _cached_size_ = 0;
  ref_frame_id_ = NULL;
  landmark_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandmarkIdMsg::~LandmarkIdMsg() {
  SharedDtor();
}

void LandmarkIdMsg::SharedDtor() {
  if (this != default_instance_) {
    delete ref_frame_id_;
  }
}

void LandmarkIdMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkIdMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandmarkIdMsg_descriptor_;
}

const LandmarkIdMsg& LandmarkIdMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

LandmarkIdMsg* LandmarkIdMsg::default_instance_ = NULL;

LandmarkIdMsg* LandmarkIdMsg::New() const {
  return new LandmarkIdMsg;
}

void LandmarkIdMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ref_frame_id()) {
      if (ref_frame_id_ != NULL) ref_frame_id_->::pb::ReferenceFrameIdMsg::Clear();
    }
    landmark_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandmarkIdMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ReferenceFrameIdMsg ref_frame_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref_frame_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_landmark_id;
        break;
      }

      // optional int32 landmark_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landmark_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landmark_id_)));
          set_has_landmark_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LandmarkIdMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ReferenceFrameIdMsg ref_frame_id = 1;
  if (has_ref_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ref_frame_id(), output);
  }

  // optional int32 landmark_id = 2;
  if (has_landmark_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->landmark_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LandmarkIdMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ReferenceFrameIdMsg ref_frame_id = 1;
  if (has_ref_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ref_frame_id(), target);
  }

  // optional int32 landmark_id = 2;
  if (has_landmark_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->landmark_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LandmarkIdMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ReferenceFrameIdMsg ref_frame_id = 1;
    if (has_ref_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ref_frame_id());
    }

    // optional int32 landmark_id = 2;
    if (has_landmark_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landmark_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkIdMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandmarkIdMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandmarkIdMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandmarkIdMsg::MergeFrom(const LandmarkIdMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ref_frame_id()) {
      mutable_ref_frame_id()->::pb::ReferenceFrameIdMsg::MergeFrom(from.ref_frame_id());
    }
    if (from.has_landmark_id()) {
      set_landmark_id(from.landmark_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandmarkIdMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkIdMsg::CopyFrom(const LandmarkIdMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkIdMsg::IsInitialized() const {

  return true;
}

void LandmarkIdMsg::Swap(LandmarkIdMsg* other) {
  if (other != this) {
    std::swap(ref_frame_id_, other->ref_frame_id_);
    std::swap(landmark_id_, other->landmark_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandmarkIdMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandmarkIdMsg_descriptor_;
  metadata.reflection = LandmarkIdMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeasurementIdMsg::kRefFrameIdFieldNumber;
const int MeasurementIdMsg::kMeasurementIdFieldNumber;
const int MeasurementIdMsg::kLandmarkIdFieldNumber;
#endif  // !_MSC_VER

MeasurementIdMsg::MeasurementIdMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeasurementIdMsg::InitAsDefaultInstance() {
  ref_frame_id_ = const_cast< ::pb::ReferenceFrameIdMsg*>(&::pb::ReferenceFrameIdMsg::default_instance());
  landmark_id_ = const_cast< ::pb::LandmarkIdMsg*>(&::pb::LandmarkIdMsg::default_instance());
}

MeasurementIdMsg::MeasurementIdMsg(const MeasurementIdMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeasurementIdMsg::SharedCtor() {
  _cached_size_ = 0;
  ref_frame_id_ = NULL;
  measurement_id_ = 0;
  landmark_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeasurementIdMsg::~MeasurementIdMsg() {
  SharedDtor();
}

void MeasurementIdMsg::SharedDtor() {
  if (this != default_instance_) {
    delete ref_frame_id_;
    delete landmark_id_;
  }
}

void MeasurementIdMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeasurementIdMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeasurementIdMsg_descriptor_;
}

const MeasurementIdMsg& MeasurementIdMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

MeasurementIdMsg* MeasurementIdMsg::default_instance_ = NULL;

MeasurementIdMsg* MeasurementIdMsg::New() const {
  return new MeasurementIdMsg;
}

void MeasurementIdMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ref_frame_id()) {
      if (ref_frame_id_ != NULL) ref_frame_id_->::pb::ReferenceFrameIdMsg::Clear();
    }
    measurement_id_ = 0;
    if (has_landmark_id()) {
      if (landmark_id_ != NULL) landmark_id_->::pb::LandmarkIdMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeasurementIdMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ReferenceFrameIdMsg ref_frame_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref_frame_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_measurement_id;
        break;
      }

      // optional int32 measurement_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_measurement_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &measurement_id_)));
          set_has_measurement_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_landmark_id;
        break;
      }

      // optional .pb.LandmarkIdMsg landmark_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_landmark_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmark_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeasurementIdMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ReferenceFrameIdMsg ref_frame_id = 1;
  if (has_ref_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ref_frame_id(), output);
  }

  // optional int32 measurement_id = 2;
  if (has_measurement_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->measurement_id(), output);
  }

  // optional .pb.LandmarkIdMsg landmark_id = 3;
  if (has_landmark_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->landmark_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeasurementIdMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ReferenceFrameIdMsg ref_frame_id = 1;
  if (has_ref_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ref_frame_id(), target);
  }

  // optional int32 measurement_id = 2;
  if (has_measurement_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->measurement_id(), target);
  }

  // optional .pb.LandmarkIdMsg landmark_id = 3;
  if (has_landmark_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->landmark_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeasurementIdMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ReferenceFrameIdMsg ref_frame_id = 1;
    if (has_ref_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ref_frame_id());
    }

    // optional int32 measurement_id = 2;
    if (has_measurement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->measurement_id());
    }

    // optional .pb.LandmarkIdMsg landmark_id = 3;
    if (has_landmark_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmark_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeasurementIdMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeasurementIdMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeasurementIdMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeasurementIdMsg::MergeFrom(const MeasurementIdMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ref_frame_id()) {
      mutable_ref_frame_id()->::pb::ReferenceFrameIdMsg::MergeFrom(from.ref_frame_id());
    }
    if (from.has_measurement_id()) {
      set_measurement_id(from.measurement_id());
    }
    if (from.has_landmark_id()) {
      mutable_landmark_id()->::pb::LandmarkIdMsg::MergeFrom(from.landmark_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeasurementIdMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasurementIdMsg::CopyFrom(const MeasurementIdMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementIdMsg::IsInitialized() const {

  return true;
}

void MeasurementIdMsg::Swap(MeasurementIdMsg* other) {
  if (other != this) {
    std::swap(ref_frame_id_, other->ref_frame_id_);
    std::swap(measurement_id_, other->measurement_id_);
    std::swap(landmark_id_, other->landmark_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeasurementIdMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeasurementIdMsg_descriptor_;
  metadata.reflection = MeasurementIdMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PixelMsg::kUFieldNumber;
const int PixelMsg::kVFieldNumber;
#endif  // !_MSC_VER

PixelMsg::PixelMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PixelMsg::InitAsDefaultInstance() {
}

PixelMsg::PixelMsg(const PixelMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PixelMsg::SharedCtor() {
  _cached_size_ = 0;
  u_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PixelMsg::~PixelMsg() {
  SharedDtor();
}

void PixelMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PixelMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PixelMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PixelMsg_descriptor_;
}

const PixelMsg& PixelMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

PixelMsg* PixelMsg::default_instance_ = NULL;

PixelMsg* PixelMsg::New() const {
  return new PixelMsg;
}

void PixelMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    u_ = 0;
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PixelMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double u = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_v;
        break;
      }

      // optional double v = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PixelMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double u = 1;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->u(), output);
  }

  // optional double v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PixelMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double u = 1;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->u(), target);
  }

  // optional double v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PixelMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double u = 1;
    if (has_u()) {
      total_size += 1 + 8;
    }

    // optional double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PixelMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PixelMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PixelMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PixelMsg::MergeFrom(const PixelMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PixelMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelMsg::CopyFrom(const PixelMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelMsg::IsInitialized() const {

  return true;
}

void PixelMsg::Swap(PixelMsg* other) {
  if (other != this) {
    std::swap(u_, other->u_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PixelMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PixelMsg_descriptor_;
  metadata.reflection = PixelMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatchHomographyMsg::kStateFieldNumber;
const int PatchHomographyMsg::kScaleFieldNumber;
const int PatchHomographyMsg::kHFieldNumber;
#endif  // !_MSC_VER

PatchHomographyMsg::PatchHomographyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PatchHomographyMsg::InitAsDefaultInstance() {
  h_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
}

PatchHomographyMsg::PatchHomographyMsg(const PatchHomographyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PatchHomographyMsg::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  scale_ = 0;
  h_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatchHomographyMsg::~PatchHomographyMsg() {
  SharedDtor();
}

void PatchHomographyMsg::SharedDtor() {
  if (this != default_instance_) {
    delete h_;
  }
}

void PatchHomographyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatchHomographyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatchHomographyMsg_descriptor_;
}

const PatchHomographyMsg& PatchHomographyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

PatchHomographyMsg* PatchHomographyMsg::default_instance_ = NULL;

PatchHomographyMsg* PatchHomographyMsg::New() const {
  return new PatchHomographyMsg;
}

void PatchHomographyMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    scale_ = 0;
    if (has_h()) {
      if (h_ != NULL) h_->::pb::DoubleMatrixMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatchHomographyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_scale;
        break;
      }

      // optional double scale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_h;
        break;
      }

      // optional .pb.DoubleMatrixMsg h = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_h:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_h()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PatchHomographyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional double scale = 2;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->scale(), output);
  }

  // optional .pb.DoubleMatrixMsg h = 3;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->h(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PatchHomographyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional double scale = 2;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->scale(), target);
  }

  // optional .pb.DoubleMatrixMsg h = 3;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->h(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PatchHomographyMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional double scale = 2;
    if (has_scale()) {
      total_size += 1 + 8;
    }

    // optional .pb.DoubleMatrixMsg h = 3;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->h());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatchHomographyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatchHomographyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatchHomographyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatchHomographyMsg::MergeFrom(const PatchHomographyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_h()) {
      mutable_h()->::pb::DoubleMatrixMsg::MergeFrom(from.h());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatchHomographyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchHomographyMsg::CopyFrom(const PatchHomographyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchHomographyMsg::IsInitialized() const {

  return true;
}

void PatchHomographyMsg::Swap(PatchHomographyMsg* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(scale_, other->scale_);
    std::swap(h_, other->h_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatchHomographyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatchHomographyMsg_descriptor_;
  metadata.reflection = PatchHomographyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeasurementMsg::kIdFieldNumber;
const int MeasurementMsg::kPixelFieldNumber;
const int MeasurementMsg::kMatchFlagFieldNumber;
const int MeasurementMsg::kMatchingErrorFieldNumber;
const int MeasurementMsg::kReprojectionErrorFieldNumber;
const int MeasurementMsg::kScaleFieldNumber;
const int MeasurementMsg::kOrientationFieldNumber;
const int MeasurementMsg::kPatchHomographyFieldNumber;
const int MeasurementMsg::kPatchVectorFieldNumber;
#endif  // !_MSC_VER

MeasurementMsg::MeasurementMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeasurementMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::pb::MeasurementIdMsg*>(&::pb::MeasurementIdMsg::default_instance());
  pixel_ = const_cast< ::pb::PixelMsg*>(&::pb::PixelMsg::default_instance());
  patch_homography_ = const_cast< ::pb::PatchHomographyMsg*>(&::pb::PatchHomographyMsg::default_instance());
  patch_vector_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
}

MeasurementMsg::MeasurementMsg(const MeasurementMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeasurementMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  pixel_ = NULL;
  match_flag_ = 0u;
  matching_error_ = 0;
  reprojection_error_ = 0;
  scale_ = 0;
  orientation_ = 0;
  patch_homography_ = NULL;
  patch_vector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeasurementMsg::~MeasurementMsg() {
  SharedDtor();
}

void MeasurementMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete pixel_;
    delete patch_homography_;
    delete patch_vector_;
  }
}

void MeasurementMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeasurementMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeasurementMsg_descriptor_;
}

const MeasurementMsg& MeasurementMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

MeasurementMsg* MeasurementMsg::default_instance_ = NULL;

MeasurementMsg* MeasurementMsg::New() const {
  return new MeasurementMsg;
}

void MeasurementMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pb::MeasurementIdMsg::Clear();
    }
    if (has_pixel()) {
      if (pixel_ != NULL) pixel_->::pb::PixelMsg::Clear();
    }
    match_flag_ = 0u;
    matching_error_ = 0;
    reprojection_error_ = 0;
    scale_ = 0;
    orientation_ = 0;
    if (has_patch_homography()) {
      if (patch_homography_ != NULL) patch_homography_->::pb::PatchHomographyMsg::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_patch_vector()) {
      if (patch_vector_ != NULL) patch_vector_->::pb::DoubleMatrixMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeasurementMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.MeasurementIdMsg id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pixel;
        break;
      }

      // optional .pb.PixelMsg pixel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pixel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pixel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_match_flag;
        break;
      }

      // optional uint32 match_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_flag_)));
          set_has_match_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_matching_error;
        break;
      }

      // optional double matching_error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_matching_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matching_error_)));
          set_has_matching_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_reprojection_error;
        break;
      }

      // optional double reprojection_error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_reprojection_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reprojection_error_)));
          set_has_reprojection_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_scale;
        break;
      }

      // optional float scale = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_orientation;
        break;
      }

      // optional float orientation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_patch_homography;
        break;
      }

      // optional .pb.PatchHomographyMsg patch_homography = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patch_homography:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patch_homography()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_patch_vector;
        break;
      }

      // optional .pb.DoubleMatrixMsg patch_vector = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patch_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patch_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeasurementMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.MeasurementIdMsg id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .pb.PixelMsg pixel = 2;
  if (has_pixel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pixel(), output);
  }

  // optional uint32 match_flag = 3;
  if (has_match_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->match_flag(), output);
  }

  // optional double matching_error = 4;
  if (has_matching_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->matching_error(), output);
  }

  // optional double reprojection_error = 5;
  if (has_reprojection_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->reprojection_error(), output);
  }

  // optional float scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scale(), output);
  }

  // optional float orientation = 7;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->orientation(), output);
  }

  // optional .pb.PatchHomographyMsg patch_homography = 8;
  if (has_patch_homography()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->patch_homography(), output);
  }

  // optional .pb.DoubleMatrixMsg patch_vector = 9;
  if (has_patch_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->patch_vector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeasurementMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.MeasurementIdMsg id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .pb.PixelMsg pixel = 2;
  if (has_pixel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pixel(), target);
  }

  // optional uint32 match_flag = 3;
  if (has_match_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->match_flag(), target);
  }

  // optional double matching_error = 4;
  if (has_matching_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->matching_error(), target);
  }

  // optional double reprojection_error = 5;
  if (has_reprojection_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->reprojection_error(), target);
  }

  // optional float scale = 6;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->scale(), target);
  }

  // optional float orientation = 7;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->orientation(), target);
  }

  // optional .pb.PatchHomographyMsg patch_homography = 8;
  if (has_patch_homography()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->patch_homography(), target);
  }

  // optional .pb.DoubleMatrixMsg patch_vector = 9;
  if (has_patch_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->patch_vector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeasurementMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.MeasurementIdMsg id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .pb.PixelMsg pixel = 2;
    if (has_pixel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pixel());
    }

    // optional uint32 match_flag = 3;
    if (has_match_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_flag());
    }

    // optional double matching_error = 4;
    if (has_matching_error()) {
      total_size += 1 + 8;
    }

    // optional double reprojection_error = 5;
    if (has_reprojection_error()) {
      total_size += 1 + 8;
    }

    // optional float scale = 6;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float orientation = 7;
    if (has_orientation()) {
      total_size += 1 + 4;
    }

    // optional .pb.PatchHomographyMsg patch_homography = 8;
    if (has_patch_homography()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patch_homography());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.DoubleMatrixMsg patch_vector = 9;
    if (has_patch_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patch_vector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeasurementMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeasurementMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeasurementMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeasurementMsg::MergeFrom(const MeasurementMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pb::MeasurementIdMsg::MergeFrom(from.id());
    }
    if (from.has_pixel()) {
      mutable_pixel()->::pb::PixelMsg::MergeFrom(from.pixel());
    }
    if (from.has_match_flag()) {
      set_match_flag(from.match_flag());
    }
    if (from.has_matching_error()) {
      set_matching_error(from.matching_error());
    }
    if (from.has_reprojection_error()) {
      set_reprojection_error(from.reprojection_error());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_patch_homography()) {
      mutable_patch_homography()->::pb::PatchHomographyMsg::MergeFrom(from.patch_homography());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_patch_vector()) {
      mutable_patch_vector()->::pb::DoubleMatrixMsg::MergeFrom(from.patch_vector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeasurementMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasurementMsg::CopyFrom(const MeasurementMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementMsg::IsInitialized() const {

  return true;
}

void MeasurementMsg::Swap(MeasurementMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pixel_, other->pixel_);
    std::swap(match_flag_, other->match_flag_);
    std::swap(matching_error_, other->matching_error_);
    std::swap(reprojection_error_, other->reprojection_error_);
    std::swap(scale_, other->scale_);
    std::swap(orientation_, other->orientation_);
    std::swap(patch_homography_, other->patch_homography_);
    std::swap(patch_vector_, other->patch_vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeasurementMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeasurementMsg_descriptor_;
  metadata.reflection = MeasurementMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiViewMeasurementMsg::kMeasurementsFieldNumber;
#endif  // !_MSC_VER

MultiViewMeasurementMsg::MultiViewMeasurementMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiViewMeasurementMsg::InitAsDefaultInstance() {
}

MultiViewMeasurementMsg::MultiViewMeasurementMsg(const MultiViewMeasurementMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiViewMeasurementMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiViewMeasurementMsg::~MultiViewMeasurementMsg() {
  SharedDtor();
}

void MultiViewMeasurementMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiViewMeasurementMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiViewMeasurementMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiViewMeasurementMsg_descriptor_;
}

const MultiViewMeasurementMsg& MultiViewMeasurementMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

MultiViewMeasurementMsg* MultiViewMeasurementMsg::default_instance_ = NULL;

MultiViewMeasurementMsg* MultiViewMeasurementMsg::New() const {
  return new MultiViewMeasurementMsg;
}

void MultiViewMeasurementMsg::Clear() {
  measurements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiViewMeasurementMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.MeasurementMsg measurements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_measurements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_measurements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_measurements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiViewMeasurementMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.MeasurementMsg measurements = 1;
  for (int i = 0; i < this->measurements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->measurements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiViewMeasurementMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.MeasurementMsg measurements = 1;
  for (int i = 0; i < this->measurements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->measurements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiViewMeasurementMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.MeasurementMsg measurements = 1;
  total_size += 1 * this->measurements_size();
  for (int i = 0; i < this->measurements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->measurements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiViewMeasurementMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiViewMeasurementMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiViewMeasurementMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiViewMeasurementMsg::MergeFrom(const MultiViewMeasurementMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  measurements_.MergeFrom(from.measurements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiViewMeasurementMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiViewMeasurementMsg::CopyFrom(const MultiViewMeasurementMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiViewMeasurementMsg::IsInitialized() const {

  return true;
}

void MultiViewMeasurementMsg::Swap(MultiViewMeasurementMsg* other) {
  if (other != this) {
    measurements_.Swap(&other->measurements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiViewMeasurementMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiViewMeasurementMsg_descriptor_;
  metadata.reflection = MultiViewMeasurementMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandmarkMsg::kIdFieldNumber;
const int LandmarkMsg::kBaseCameraFieldNumber;
const int LandmarkMsg::kPatchFieldNumber;
const int LandmarkMsg::kFeatureDescriptorFieldNumber;
const int LandmarkMsg::kFeatureTrackFieldNumber;
const int LandmarkMsg::kNameFieldNumber;
const int LandmarkMsg::kActiveFieldNumber;
const int LandmarkMsg::kNumFailedTrackAttemptsFieldNumber;
const int LandmarkMsg::kPyramidLevelFieldNumber;
const int LandmarkMsg::kLandmarkStateFieldNumber;
const int LandmarkMsg::kExtentFieldNumber;
const int LandmarkMsg::kOrientationFieldNumber;
const int LandmarkMsg::kRelativePosFieldNumber;
#endif  // !_MSC_VER

LandmarkMsg::LandmarkMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LandmarkMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::pb::LandmarkIdMsg*>(&::pb::LandmarkIdMsg::default_instance());
  patch_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
  orientation_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
  relative_pos_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
}

LandmarkMsg::LandmarkMsg(const LandmarkMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LandmarkMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  base_camera_ = 0u;
  patch_ = NULL;
  feature_descriptor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_ = false;
  num_failed_track_attempts_ = 0u;
  pyramid_level_ = 0u;
  landmark_state_ = 0;
  extent_ = 0;
  orientation_ = NULL;
  relative_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandmarkMsg::~LandmarkMsg() {
  SharedDtor();
}

void LandmarkMsg::SharedDtor() {
  if (feature_descriptor_ != &::google::protobuf::internal::kEmptyString) {
    delete feature_descriptor_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete id_;
    delete patch_;
    delete orientation_;
    delete relative_pos_;
  }
}

void LandmarkMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandmarkMsg_descriptor_;
}

const LandmarkMsg& LandmarkMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

LandmarkMsg* LandmarkMsg::default_instance_ = NULL;

LandmarkMsg* LandmarkMsg::New() const {
  return new LandmarkMsg;
}

void LandmarkMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pb::LandmarkIdMsg::Clear();
    }
    base_camera_ = 0u;
    if (has_patch()) {
      if (patch_ != NULL) patch_->::pb::DoubleMatrixMsg::Clear();
    }
    if (has_feature_descriptor()) {
      if (feature_descriptor_ != &::google::protobuf::internal::kEmptyString) {
        feature_descriptor_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    active_ = false;
    num_failed_track_attempts_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pyramid_level_ = 0u;
    landmark_state_ = 0;
    extent_ = 0;
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::pb::DoubleMatrixMsg::Clear();
    }
    if (has_relative_pos()) {
      if (relative_pos_ != NULL) relative_pos_->::pb::DoubleMatrixMsg::Clear();
    }
  }
  feature_track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandmarkMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.LandmarkIdMsg id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_base_camera;
        break;
      }

      // optional uint32 base_camera = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_camera_)));
          set_has_base_camera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_patch;
        break;
      }

      // optional .pb.DoubleMatrixMsg patch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_feature_descriptor;
        break;
      }

      // optional bytes feature_descriptor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feature_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_feature_track;
        break;
      }

      // repeated .pb.MeasurementIdMsg feature_track = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feature_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_feature_track;
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_active;
        break;
      }

      // optional bool active = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_num_failed_track_attempts;
        break;
      }

      // optional uint32 num_failed_track_attempts = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_failed_track_attempts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_failed_track_attempts_)));
          set_has_num_failed_track_attempts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pyramid_level;
        break;
      }

      // optional uint32 pyramid_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pyramid_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pyramid_level_)));
          set_has_pyramid_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_landmark_state;
        break;
      }

      // optional int32 landmark_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landmark_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landmark_state_)));
          set_has_landmark_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_extent;
        break;
      }

      // optional double extent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_extent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extent_)));
          set_has_extent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_orientation;
        break;
      }

      // optional .pb.DoubleMatrixMsg orientation = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_relative_pos;
        break;
      }

      // optional .pb.DoubleMatrixMsg relative_pos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relative_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LandmarkMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.LandmarkIdMsg id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional uint32 base_camera = 2;
  if (has_base_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->base_camera(), output);
  }

  // optional .pb.DoubleMatrixMsg patch = 3;
  if (has_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->patch(), output);
  }

  // optional bytes feature_descriptor = 4;
  if (has_feature_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->feature_descriptor(), output);
  }

  // repeated .pb.MeasurementIdMsg feature_track = 6;
  for (int i = 0; i < this->feature_track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->feature_track(i), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // optional bool active = 8;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->active(), output);
  }

  // optional uint32 num_failed_track_attempts = 9;
  if (has_num_failed_track_attempts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_failed_track_attempts(), output);
  }

  // optional uint32 pyramid_level = 10;
  if (has_pyramid_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pyramid_level(), output);
  }

  // optional int32 landmark_state = 11;
  if (has_landmark_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->landmark_state(), output);
  }

  // optional double extent = 12;
  if (has_extent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->extent(), output);
  }

  // optional .pb.DoubleMatrixMsg orientation = 13;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->orientation(), output);
  }

  // optional .pb.DoubleMatrixMsg relative_pos = 14;
  if (has_relative_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->relative_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LandmarkMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.LandmarkIdMsg id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional uint32 base_camera = 2;
  if (has_base_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->base_camera(), target);
  }

  // optional .pb.DoubleMatrixMsg patch = 3;
  if (has_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->patch(), target);
  }

  // optional bytes feature_descriptor = 4;
  if (has_feature_descriptor()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->feature_descriptor(), target);
  }

  // repeated .pb.MeasurementIdMsg feature_track = 6;
  for (int i = 0; i < this->feature_track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->feature_track(i), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional bool active = 8;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->active(), target);
  }

  // optional uint32 num_failed_track_attempts = 9;
  if (has_num_failed_track_attempts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_failed_track_attempts(), target);
  }

  // optional uint32 pyramid_level = 10;
  if (has_pyramid_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pyramid_level(), target);
  }

  // optional int32 landmark_state = 11;
  if (has_landmark_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->landmark_state(), target);
  }

  // optional double extent = 12;
  if (has_extent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->extent(), target);
  }

  // optional .pb.DoubleMatrixMsg orientation = 13;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->orientation(), target);
  }

  // optional .pb.DoubleMatrixMsg relative_pos = 14;
  if (has_relative_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->relative_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LandmarkMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.LandmarkIdMsg id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional uint32 base_camera = 2;
    if (has_base_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_camera());
    }

    // optional .pb.DoubleMatrixMsg patch = 3;
    if (has_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patch());
    }

    // optional bytes feature_descriptor = 4;
    if (has_feature_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->feature_descriptor());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool active = 8;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_failed_track_attempts = 9;
    if (has_num_failed_track_attempts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_failed_track_attempts());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pyramid_level = 10;
    if (has_pyramid_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pyramid_level());
    }

    // optional int32 landmark_state = 11;
    if (has_landmark_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landmark_state());
    }

    // optional double extent = 12;
    if (has_extent()) {
      total_size += 1 + 8;
    }

    // optional .pb.DoubleMatrixMsg orientation = 13;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation());
    }

    // optional .pb.DoubleMatrixMsg relative_pos = 14;
    if (has_relative_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relative_pos());
    }

  }
  // repeated .pb.MeasurementIdMsg feature_track = 6;
  total_size += 1 * this->feature_track_size();
  for (int i = 0; i < this->feature_track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature_track(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandmarkMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandmarkMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandmarkMsg::MergeFrom(const LandmarkMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  feature_track_.MergeFrom(from.feature_track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pb::LandmarkIdMsg::MergeFrom(from.id());
    }
    if (from.has_base_camera()) {
      set_base_camera(from.base_camera());
    }
    if (from.has_patch()) {
      mutable_patch()->::pb::DoubleMatrixMsg::MergeFrom(from.patch());
    }
    if (from.has_feature_descriptor()) {
      set_feature_descriptor(from.feature_descriptor());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_num_failed_track_attempts()) {
      set_num_failed_track_attempts(from.num_failed_track_attempts());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pyramid_level()) {
      set_pyramid_level(from.pyramid_level());
    }
    if (from.has_landmark_state()) {
      set_landmark_state(from.landmark_state());
    }
    if (from.has_extent()) {
      set_extent(from.extent());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::pb::DoubleMatrixMsg::MergeFrom(from.orientation());
    }
    if (from.has_relative_pos()) {
      mutable_relative_pos()->::pb::DoubleMatrixMsg::MergeFrom(from.relative_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandmarkMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkMsg::CopyFrom(const LandmarkMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkMsg::IsInitialized() const {

  return true;
}

void LandmarkMsg::Swap(LandmarkMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(base_camera_, other->base_camera_);
    std::swap(patch_, other->patch_);
    std::swap(feature_descriptor_, other->feature_descriptor_);
    feature_track_.Swap(&other->feature_track_);
    std::swap(name_, other->name_);
    std::swap(active_, other->active_);
    std::swap(num_failed_track_attempts_, other->num_failed_track_attempts_);
    std::swap(pyramid_level_, other->pyramid_level_);
    std::swap(landmark_state_, other->landmark_state_);
    std::swap(extent_, other->extent_);
    std::swap(orientation_, other->orientation_);
    std::swap(relative_pos_, other->relative_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandmarkMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandmarkMsg_descriptor_;
  metadata.reflection = LandmarkMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransformEdgeMsg::kIdFieldNumber;
const int TransformEdgeMsg::kLastModifiedTimeFieldNumber;
const int TransformEdgeMsg::kTransformFieldNumber;
const int TransformEdgeMsg::kGFieldNumber;
const int TransformEdgeMsg::kIsBrokenFieldNumber;
const int TransformEdgeMsg::kIsLoopClosureFieldNumber;
#endif  // !_MSC_VER

TransformEdgeMsg::TransformEdgeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransformEdgeMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::pb::TransformEdgeIdMsg*>(&::pb::TransformEdgeIdMsg::default_instance());
  transform_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
  g_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
}

TransformEdgeMsg::TransformEdgeMsg(const TransformEdgeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransformEdgeMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  last_modified_time_ = 0;
  transform_ = NULL;
  g_ = NULL;
  is_broken_ = false;
  is_loop_closure_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformEdgeMsg::~TransformEdgeMsg() {
  SharedDtor();
}

void TransformEdgeMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete transform_;
    delete g_;
  }
}

void TransformEdgeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformEdgeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformEdgeMsg_descriptor_;
}

const TransformEdgeMsg& TransformEdgeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

TransformEdgeMsg* TransformEdgeMsg::default_instance_ = NULL;

TransformEdgeMsg* TransformEdgeMsg::New() const {
  return new TransformEdgeMsg;
}

void TransformEdgeMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pb::TransformEdgeIdMsg::Clear();
    }
    last_modified_time_ = 0;
    if (has_transform()) {
      if (transform_ != NULL) transform_->::pb::DoubleMatrixMsg::Clear();
    }
    if (has_g()) {
      if (g_ != NULL) g_->::pb::DoubleMatrixMsg::Clear();
    }
    is_broken_ = false;
    is_loop_closure_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformEdgeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TransformEdgeIdMsg id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_last_modified_time;
        break;
      }

      // optional double last_modified_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_modified_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_modified_time_)));
          set_has_last_modified_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transform;
        break;
      }

      // optional .pb.DoubleMatrixMsg transform = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_g;
        break;
      }

      // optional .pb.DoubleMatrixMsg g = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_g:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_broken;
        break;
      }

      // optional bool is_broken = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_broken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_broken_)));
          set_has_is_broken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_loop_closure;
        break;
      }

      // optional bool is_loop_closure = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_loop_closure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_loop_closure_)));
          set_has_is_loop_closure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformEdgeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.TransformEdgeIdMsg id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional double last_modified_time = 2;
  if (has_last_modified_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->last_modified_time(), output);
  }

  // optional .pb.DoubleMatrixMsg transform = 4;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transform(), output);
  }

  // optional .pb.DoubleMatrixMsg g = 5;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->g(), output);
  }

  // optional bool is_broken = 6;
  if (has_is_broken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_broken(), output);
  }

  // optional bool is_loop_closure = 7;
  if (has_is_loop_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_loop_closure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransformEdgeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.TransformEdgeIdMsg id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional double last_modified_time = 2;
  if (has_last_modified_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->last_modified_time(), target);
  }

  // optional .pb.DoubleMatrixMsg transform = 4;
  if (has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transform(), target);
  }

  // optional .pb.DoubleMatrixMsg g = 5;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->g(), target);
  }

  // optional bool is_broken = 6;
  if (has_is_broken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_broken(), target);
  }

  // optional bool is_loop_closure = 7;
  if (has_is_loop_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_loop_closure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransformEdgeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TransformEdgeIdMsg id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional double last_modified_time = 2;
    if (has_last_modified_time()) {
      total_size += 1 + 8;
    }

    // optional .pb.DoubleMatrixMsg transform = 4;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform());
    }

    // optional .pb.DoubleMatrixMsg g = 5;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->g());
    }

    // optional bool is_broken = 6;
    if (has_is_broken()) {
      total_size += 1 + 1;
    }

    // optional bool is_loop_closure = 7;
    if (has_is_loop_closure()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformEdgeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformEdgeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformEdgeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformEdgeMsg::MergeFrom(const TransformEdgeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pb::TransformEdgeIdMsg::MergeFrom(from.id());
    }
    if (from.has_last_modified_time()) {
      set_last_modified_time(from.last_modified_time());
    }
    if (from.has_transform()) {
      mutable_transform()->::pb::DoubleMatrixMsg::MergeFrom(from.transform());
    }
    if (from.has_g()) {
      mutable_g()->::pb::DoubleMatrixMsg::MergeFrom(from.g());
    }
    if (from.has_is_broken()) {
      set_is_broken(from.is_broken());
    }
    if (from.has_is_loop_closure()) {
      set_is_loop_closure(from.is_loop_closure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformEdgeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformEdgeMsg::CopyFrom(const TransformEdgeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformEdgeMsg::IsInitialized() const {

  return true;
}

void TransformEdgeMsg::Swap(TransformEdgeMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(last_modified_time_, other->last_modified_time_);
    std::swap(transform_, other->transform_);
    std::swap(g_, other->g_);
    std::swap(is_broken_, other->is_broken_);
    std::swap(is_loop_closure_, other->is_loop_closure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformEdgeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformEdgeMsg_descriptor_;
  metadata.reflection = TransformEdgeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReferenceFrameMsg::kIdFieldNumber;
const int ReferenceFrameMsg::kParentEdgeIdFieldNumber;
const int ReferenceFrameMsg::kNeighborEdgeIdsFieldNumber;
const int ReferenceFrameMsg::kSensorTimeFieldNumber;
const int ReferenceFrameMsg::kIsIsolatedFieldNumber;
const int ReferenceFrameMsg::kLandmarksFieldNumber;
const int ReferenceFrameMsg::kMeasurementsFieldNumber;
const int ReferenceFrameMsg::kVelocityFieldNumber;
const int ReferenceFrameMsg::kLastModifiedTimeFieldNumber;
const int ReferenceFrameMsg::kObjectsFieldNumber;
const int ReferenceFrameMsg::kGravityFieldNumber;
const int ReferenceFrameMsg::kBiasesFieldNumber;
#endif  // !_MSC_VER

ReferenceFrameMsg::ReferenceFrameMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceFrameMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::pb::ReferenceFrameIdMsg*>(&::pb::ReferenceFrameIdMsg::default_instance());
  parent_edge_id_ = const_cast< ::pb::TransformEdgeIdMsg*>(&::pb::TransformEdgeIdMsg::default_instance());
  velocity_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
  gravity_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
  biases_ = const_cast< ::pb::DoubleMatrixMsg*>(&::pb::DoubleMatrixMsg::default_instance());
}

ReferenceFrameMsg::ReferenceFrameMsg(const ReferenceFrameMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceFrameMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  parent_edge_id_ = NULL;
  sensor_time_ = 0;
  is_isolated_ = false;
  velocity_ = NULL;
  last_modified_time_ = 0;
  gravity_ = NULL;
  biases_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceFrameMsg::~ReferenceFrameMsg() {
  SharedDtor();
}

void ReferenceFrameMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete parent_edge_id_;
    delete velocity_;
    delete gravity_;
    delete biases_;
  }
}

void ReferenceFrameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceFrameMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceFrameMsg_descriptor_;
}

const ReferenceFrameMsg& ReferenceFrameMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

ReferenceFrameMsg* ReferenceFrameMsg::default_instance_ = NULL;

ReferenceFrameMsg* ReferenceFrameMsg::New() const {
  return new ReferenceFrameMsg;
}

void ReferenceFrameMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pb::ReferenceFrameIdMsg::Clear();
    }
    if (has_parent_edge_id()) {
      if (parent_edge_id_ != NULL) parent_edge_id_->::pb::TransformEdgeIdMsg::Clear();
    }
    sensor_time_ = 0;
    is_isolated_ = false;
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::pb::DoubleMatrixMsg::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_modified_time_ = 0;
    if (has_gravity()) {
      if (gravity_ != NULL) gravity_->::pb::DoubleMatrixMsg::Clear();
    }
    if (has_biases()) {
      if (biases_ != NULL) biases_->::pb::DoubleMatrixMsg::Clear();
    }
  }
  neighbor_edge_ids_.Clear();
  landmarks_.Clear();
  measurements_.Clear();
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceFrameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ReferenceFrameIdMsg id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parent_edge_id;
        break;
      }

      // optional .pb.TransformEdgeIdMsg parent_edge_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_edge_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent_edge_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_neighbor_edge_ids;
        break;
      }

      // repeated .pb.TransformEdgeIdMsg neighbor_edge_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_neighbor_edge_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_neighbor_edge_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_neighbor_edge_ids;
        if (input->ExpectTag(33)) goto parse_sensor_time;
        break;
      }

      // optional double sensor_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sensor_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sensor_time_)));
          set_has_sensor_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_isolated;
        break;
      }

      // optional bool is_isolated = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_isolated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_isolated_)));
          set_has_is_isolated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_landmarks;
        break;
      }

      // repeated .pb.LandmarkMsg landmarks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_landmarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmarks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_landmarks;
        if (input->ExpectTag(58)) goto parse_measurements;
        break;
      }

      // repeated .pb.MultiViewMeasurementMsg measurements = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_measurements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_measurements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_measurements;
        if (input->ExpectTag(66)) goto parse_velocity;
        break;
      }

      // optional .pb.DoubleMatrixMsg velocity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_last_modified_time;
        break;
      }

      // optional double last_modified_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_modified_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_modified_time_)));
          set_has_last_modified_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_objects;
        break;
      }

      // repeated .pb.FrameObjectMsg objects = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_objects;
        if (input->ExpectTag(90)) goto parse_gravity;
        break;
      }

      // optional .pb.DoubleMatrixMsg gravity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gravity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gravity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_biases;
        break;
      }

      // optional .pb.DoubleMatrixMsg biases = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_biases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_biases()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceFrameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ReferenceFrameIdMsg id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .pb.TransformEdgeIdMsg parent_edge_id = 2;
  if (has_parent_edge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parent_edge_id(), output);
  }

  // repeated .pb.TransformEdgeIdMsg neighbor_edge_ids = 3;
  for (int i = 0; i < this->neighbor_edge_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->neighbor_edge_ids(i), output);
  }

  // optional double sensor_time = 4;
  if (has_sensor_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sensor_time(), output);
  }

  // optional bool is_isolated = 5;
  if (has_is_isolated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_isolated(), output);
  }

  // repeated .pb.LandmarkMsg landmarks = 6;
  for (int i = 0; i < this->landmarks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->landmarks(i), output);
  }

  // repeated .pb.MultiViewMeasurementMsg measurements = 7;
  for (int i = 0; i < this->measurements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->measurements(i), output);
  }

  // optional .pb.DoubleMatrixMsg velocity = 8;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->velocity(), output);
  }

  // optional double last_modified_time = 9;
  if (has_last_modified_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->last_modified_time(), output);
  }

  // repeated .pb.FrameObjectMsg objects = 10;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->objects(i), output);
  }

  // optional .pb.DoubleMatrixMsg gravity = 11;
  if (has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->gravity(), output);
  }

  // optional .pb.DoubleMatrixMsg biases = 12;
  if (has_biases()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->biases(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceFrameMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ReferenceFrameIdMsg id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .pb.TransformEdgeIdMsg parent_edge_id = 2;
  if (has_parent_edge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parent_edge_id(), target);
  }

  // repeated .pb.TransformEdgeIdMsg neighbor_edge_ids = 3;
  for (int i = 0; i < this->neighbor_edge_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->neighbor_edge_ids(i), target);
  }

  // optional double sensor_time = 4;
  if (has_sensor_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sensor_time(), target);
  }

  // optional bool is_isolated = 5;
  if (has_is_isolated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_isolated(), target);
  }

  // repeated .pb.LandmarkMsg landmarks = 6;
  for (int i = 0; i < this->landmarks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->landmarks(i), target);
  }

  // repeated .pb.MultiViewMeasurementMsg measurements = 7;
  for (int i = 0; i < this->measurements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->measurements(i), target);
  }

  // optional .pb.DoubleMatrixMsg velocity = 8;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->velocity(), target);
  }

  // optional double last_modified_time = 9;
  if (has_last_modified_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->last_modified_time(), target);
  }

  // repeated .pb.FrameObjectMsg objects = 10;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->objects(i), target);
  }

  // optional .pb.DoubleMatrixMsg gravity = 11;
  if (has_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->gravity(), target);
  }

  // optional .pb.DoubleMatrixMsg biases = 12;
  if (has_biases()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->biases(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceFrameMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ReferenceFrameIdMsg id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .pb.TransformEdgeIdMsg parent_edge_id = 2;
    if (has_parent_edge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent_edge_id());
    }

    // optional double sensor_time = 4;
    if (has_sensor_time()) {
      total_size += 1 + 8;
    }

    // optional bool is_isolated = 5;
    if (has_is_isolated()) {
      total_size += 1 + 1;
    }

    // optional .pb.DoubleMatrixMsg velocity = 8;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double last_modified_time = 9;
    if (has_last_modified_time()) {
      total_size += 1 + 8;
    }

    // optional .pb.DoubleMatrixMsg gravity = 11;
    if (has_gravity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gravity());
    }

    // optional .pb.DoubleMatrixMsg biases = 12;
    if (has_biases()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->biases());
    }

  }
  // repeated .pb.TransformEdgeIdMsg neighbor_edge_ids = 3;
  total_size += 1 * this->neighbor_edge_ids_size();
  for (int i = 0; i < this->neighbor_edge_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->neighbor_edge_ids(i));
  }

  // repeated .pb.LandmarkMsg landmarks = 6;
  total_size += 1 * this->landmarks_size();
  for (int i = 0; i < this->landmarks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmarks(i));
  }

  // repeated .pb.MultiViewMeasurementMsg measurements = 7;
  total_size += 1 * this->measurements_size();
  for (int i = 0; i < this->measurements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->measurements(i));
  }

  // repeated .pb.FrameObjectMsg objects = 10;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceFrameMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceFrameMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceFrameMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceFrameMsg::MergeFrom(const ReferenceFrameMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  neighbor_edge_ids_.MergeFrom(from.neighbor_edge_ids_);
  landmarks_.MergeFrom(from.landmarks_);
  measurements_.MergeFrom(from.measurements_);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pb::ReferenceFrameIdMsg::MergeFrom(from.id());
    }
    if (from.has_parent_edge_id()) {
      mutable_parent_edge_id()->::pb::TransformEdgeIdMsg::MergeFrom(from.parent_edge_id());
    }
    if (from.has_sensor_time()) {
      set_sensor_time(from.sensor_time());
    }
    if (from.has_is_isolated()) {
      set_is_isolated(from.is_isolated());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::pb::DoubleMatrixMsg::MergeFrom(from.velocity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_modified_time()) {
      set_last_modified_time(from.last_modified_time());
    }
    if (from.has_gravity()) {
      mutable_gravity()->::pb::DoubleMatrixMsg::MergeFrom(from.gravity());
    }
    if (from.has_biases()) {
      mutable_biases()->::pb::DoubleMatrixMsg::MergeFrom(from.biases());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceFrameMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceFrameMsg::CopyFrom(const ReferenceFrameMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceFrameMsg::IsInitialized() const {

  for (int i = 0; i < objects_size(); i++) {
    if (!this->objects(i).IsInitialized()) return false;
  }
  return true;
}

void ReferenceFrameMsg::Swap(ReferenceFrameMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(parent_edge_id_, other->parent_edge_id_);
    neighbor_edge_ids_.Swap(&other->neighbor_edge_ids_);
    std::swap(sensor_time_, other->sensor_time_);
    std::swap(is_isolated_, other->is_isolated_);
    landmarks_.Swap(&other->landmarks_);
    measurements_.Swap(&other->measurements_);
    std::swap(velocity_, other->velocity_);
    std::swap(last_modified_time_, other->last_modified_time_);
    objects_.Swap(&other->objects_);
    std::swap(gravity_, other->gravity_);
    std::swap(biases_, other->biases_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceFrameMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceFrameMsg_descriptor_;
  metadata.reflection = ReferenceFrameMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraRigMsg::kCamerasFieldNumber;
#endif  // !_MSC_VER

CameraRigMsg::CameraRigMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraRigMsg::InitAsDefaultInstance() {
}

CameraRigMsg::CameraRigMsg(const CameraRigMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraRigMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraRigMsg::~CameraRigMsg() {
  SharedDtor();
}

void CameraRigMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraRigMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraRigMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraRigMsg_descriptor_;
}

const CameraRigMsg& CameraRigMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

CameraRigMsg* CameraRigMsg::default_instance_ = NULL;

CameraRigMsg* CameraRigMsg::New() const {
  return new CameraRigMsg;
}

void CameraRigMsg::Clear() {
  cameras_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraRigMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CameraModelMsg cameras = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameras()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cameras;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraRigMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CameraModelMsg cameras = 1;
  for (int i = 0; i < this->cameras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cameras(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraRigMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CameraModelMsg cameras = 1;
  for (int i = 0; i < this->cameras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cameras(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraRigMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.CameraModelMsg cameras = 1;
  total_size += 1 * this->cameras_size();
  for (int i = 0; i < this->cameras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameras(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraRigMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraRigMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraRigMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraRigMsg::MergeFrom(const CameraRigMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cameras_.MergeFrom(from.cameras_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraRigMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraRigMsg::CopyFrom(const CameraRigMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraRigMsg::IsInitialized() const {

  for (int i = 0; i < cameras_size(); i++) {
    if (!this->cameras(i).IsInitialized()) return false;
  }
  return true;
}

void CameraRigMsg::Swap(CameraRigMsg* other) {
  if (other != this) {
    cameras_.Swap(&other->cameras_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraRigMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraRigMsg_descriptor_;
  metadata.reflection = CameraRigMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlamMapMsg::kSessionIdsFieldNumber;
const int SlamMapMsg::kRigsFieldNumber;
const int SlamMapMsg::kNodesFieldNumber;
const int SlamMapMsg::kEdgesFieldNumber;
#endif  // !_MSC_VER

SlamMapMsg::SlamMapMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlamMapMsg::InitAsDefaultInstance() {
}

SlamMapMsg::SlamMapMsg(const SlamMapMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlamMapMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlamMapMsg::~SlamMapMsg() {
  SharedDtor();
}

void SlamMapMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlamMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlamMapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlamMapMsg_descriptor_;
}

const SlamMapMsg& SlamMapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rslam_2eproto();
  return *default_instance_;
}

SlamMapMsg* SlamMapMsg::default_instance_ = NULL;

SlamMapMsg* SlamMapMsg::New() const {
  return new SlamMapMsg;
}

void SlamMapMsg::Clear() {
  session_ids_.Clear();
  rigs_.Clear();
  nodes_.Clear();
  edges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlamMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SessionIdMsg session_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_session_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_session_ids;
        if (input->ExpectTag(18)) goto parse_rigs;
        break;
      }

      // repeated .pb.CameraRigMsg rigs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rigs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rigs;
        if (input->ExpectTag(26)) goto parse_nodes;
        break;
      }

      // repeated .pb.ReferenceFrameMsg nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        if (input->ExpectTag(34)) goto parse_edges;
        break;
      }

      // repeated .pb.TransformEdgeMsg edges = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_edges;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlamMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.SessionIdMsg session_ids = 1;
  for (int i = 0; i < this->session_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session_ids(i), output);
  }

  // repeated .pb.CameraRigMsg rigs = 2;
  for (int i = 0; i < this->rigs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rigs(i), output);
  }

  // repeated .pb.ReferenceFrameMsg nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodes(i), output);
  }

  // repeated .pb.TransformEdgeMsg edges = 4;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlamMapMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.SessionIdMsg session_ids = 1;
  for (int i = 0; i < this->session_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session_ids(i), target);
  }

  // repeated .pb.CameraRigMsg rigs = 2;
  for (int i = 0; i < this->rigs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rigs(i), target);
  }

  // repeated .pb.ReferenceFrameMsg nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nodes(i), target);
  }

  // repeated .pb.TransformEdgeMsg edges = 4;
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->edges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlamMapMsg::ByteSize() const {
  int total_size = 0;

  // repeated .pb.SessionIdMsg session_ids = 1;
  total_size += 1 * this->session_ids_size();
  for (int i = 0; i < this->session_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->session_ids(i));
  }

  // repeated .pb.CameraRigMsg rigs = 2;
  total_size += 1 * this->rigs_size();
  for (int i = 0; i < this->rigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rigs(i));
  }

  // repeated .pb.ReferenceFrameMsg nodes = 3;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  // repeated .pb.TransformEdgeMsg edges = 4;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlamMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlamMapMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlamMapMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlamMapMsg::MergeFrom(const SlamMapMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  session_ids_.MergeFrom(from.session_ids_);
  rigs_.MergeFrom(from.rigs_);
  nodes_.MergeFrom(from.nodes_);
  edges_.MergeFrom(from.edges_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlamMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlamMapMsg::CopyFrom(const SlamMapMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlamMapMsg::IsInitialized() const {

  for (int i = 0; i < rigs_size(); i++) {
    if (!this->rigs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void SlamMapMsg::Swap(SlamMapMsg* other) {
  if (other != this) {
    session_ids_.Swap(&other->session_ids_);
    rigs_.Swap(&other->rigs_);
    nodes_.Swap(&other->nodes_);
    edges_.Swap(&other->edges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlamMapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlamMapMsg_descriptor_;
  metadata.reflection = SlamMapMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
