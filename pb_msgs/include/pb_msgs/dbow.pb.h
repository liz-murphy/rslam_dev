// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbow.proto

#ifndef PROTOBUF_dbow_2eproto__INCLUDED
#define PROTOBUF_dbow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rslam.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dbow_2eproto();
void protobuf_AssignDesc_dbow_2eproto();
void protobuf_ShutdownFile_dbow_2eproto();

class KeyPointMsg;
class KeyPointVectorMsg;
class BinaryDescriptorMsg;
class DescriptorVectorMsg;
class LandmarkIdVectorMsg;
class DBoWPlaceMsg;
class DBoWCorpusMsg;

// ===================================================================

class KeyPointMsg : public ::google::protobuf::Message {
 public:
  KeyPointMsg();
  virtual ~KeyPointMsg();

  KeyPointMsg(const KeyPointMsg& from);

  inline KeyPointMsg& operator=(const KeyPointMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyPointMsg& default_instance();

  void Swap(KeyPointMsg* other);

  // implements Message ----------------------------------------------

  KeyPointMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyPointMsg& from);
  void MergeFrom(const KeyPointMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:pb.KeyPointMsg)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dbow_2eproto();
  friend void protobuf_AssignDesc_dbow_2eproto();
  friend void protobuf_ShutdownFile_dbow_2eproto();

  void InitAsDefaultInstance();
  static KeyPointMsg* default_instance_;
};
// -------------------------------------------------------------------

class KeyPointVectorMsg : public ::google::protobuf::Message {
 public:
  KeyPointVectorMsg();
  virtual ~KeyPointVectorMsg();

  KeyPointVectorMsg(const KeyPointVectorMsg& from);

  inline KeyPointVectorMsg& operator=(const KeyPointVectorMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyPointVectorMsg& default_instance();

  void Swap(KeyPointVectorMsg* other);

  // implements Message ----------------------------------------------

  KeyPointVectorMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyPointVectorMsg& from);
  void MergeFrom(const KeyPointVectorMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.KeyPointMsg keypoint = 1;
  inline int keypoint_size() const;
  inline void clear_keypoint();
  static const int kKeypointFieldNumber = 1;
  inline const ::pb::KeyPointMsg& keypoint(int index) const;
  inline ::pb::KeyPointMsg* mutable_keypoint(int index);
  inline ::pb::KeyPointMsg* add_keypoint();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::KeyPointMsg >&
      keypoint() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::KeyPointMsg >*
      mutable_keypoint();

  // @@protoc_insertion_point(class_scope:pb.KeyPointVectorMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::KeyPointMsg > keypoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dbow_2eproto();
  friend void protobuf_AssignDesc_dbow_2eproto();
  friend void protobuf_ShutdownFile_dbow_2eproto();

  void InitAsDefaultInstance();
  static KeyPointVectorMsg* default_instance_;
};
// -------------------------------------------------------------------

class BinaryDescriptorMsg : public ::google::protobuf::Message {
 public:
  BinaryDescriptorMsg();
  virtual ~BinaryDescriptorMsg();

  BinaryDescriptorMsg(const BinaryDescriptorMsg& from);

  inline BinaryDescriptorMsg& operator=(const BinaryDescriptorMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryDescriptorMsg& default_instance();

  void Swap(BinaryDescriptorMsg* other);

  // implements Message ----------------------------------------------

  BinaryDescriptorMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinaryDescriptorMsg& from);
  void MergeFrom(const BinaryDescriptorMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 data = 1 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline ::google::protobuf::uint32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::uint32 value);
  inline void add_data(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:pb.BinaryDescriptorMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_;
  mutable int _data_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dbow_2eproto();
  friend void protobuf_AssignDesc_dbow_2eproto();
  friend void protobuf_ShutdownFile_dbow_2eproto();

  void InitAsDefaultInstance();
  static BinaryDescriptorMsg* default_instance_;
};
// -------------------------------------------------------------------

class DescriptorVectorMsg : public ::google::protobuf::Message {
 public:
  DescriptorVectorMsg();
  virtual ~DescriptorVectorMsg();

  DescriptorVectorMsg(const DescriptorVectorMsg& from);

  inline DescriptorVectorMsg& operator=(const DescriptorVectorMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DescriptorVectorMsg& default_instance();

  void Swap(DescriptorVectorMsg* other);

  // implements Message ----------------------------------------------

  DescriptorVectorMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DescriptorVectorMsg& from);
  void MergeFrom(const DescriptorVectorMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.BinaryDescriptorMsg binary_descriptor = 1;
  inline int binary_descriptor_size() const;
  inline void clear_binary_descriptor();
  static const int kBinaryDescriptorFieldNumber = 1;
  inline const ::pb::BinaryDescriptorMsg& binary_descriptor(int index) const;
  inline ::pb::BinaryDescriptorMsg* mutable_binary_descriptor(int index);
  inline ::pb::BinaryDescriptorMsg* add_binary_descriptor();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BinaryDescriptorMsg >&
      binary_descriptor() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BinaryDescriptorMsg >*
      mutable_binary_descriptor();

  // @@protoc_insertion_point(class_scope:pb.DescriptorVectorMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::BinaryDescriptorMsg > binary_descriptor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dbow_2eproto();
  friend void protobuf_AssignDesc_dbow_2eproto();
  friend void protobuf_ShutdownFile_dbow_2eproto();

  void InitAsDefaultInstance();
  static DescriptorVectorMsg* default_instance_;
};
// -------------------------------------------------------------------

class LandmarkIdVectorMsg : public ::google::protobuf::Message {
 public:
  LandmarkIdVectorMsg();
  virtual ~LandmarkIdVectorMsg();

  LandmarkIdVectorMsg(const LandmarkIdVectorMsg& from);

  inline LandmarkIdVectorMsg& operator=(const LandmarkIdVectorMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LandmarkIdVectorMsg& default_instance();

  void Swap(LandmarkIdVectorMsg* other);

  // implements Message ----------------------------------------------

  LandmarkIdVectorMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LandmarkIdVectorMsg& from);
  void MergeFrom(const LandmarkIdVectorMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.LandmarkIdMsg landmarks = 1;
  inline int landmarks_size() const;
  inline void clear_landmarks();
  static const int kLandmarksFieldNumber = 1;
  inline const ::pb::LandmarkIdMsg& landmarks(int index) const;
  inline ::pb::LandmarkIdMsg* mutable_landmarks(int index);
  inline ::pb::LandmarkIdMsg* add_landmarks();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::LandmarkIdMsg >&
      landmarks() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::LandmarkIdMsg >*
      mutable_landmarks();

  // @@protoc_insertion_point(class_scope:pb.LandmarkIdVectorMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::LandmarkIdMsg > landmarks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dbow_2eproto();
  friend void protobuf_AssignDesc_dbow_2eproto();
  friend void protobuf_ShutdownFile_dbow_2eproto();

  void InitAsDefaultInstance();
  static LandmarkIdVectorMsg* default_instance_;
};
// -------------------------------------------------------------------

class DBoWPlaceMsg : public ::google::protobuf::Message {
 public:
  DBoWPlaceMsg();
  virtual ~DBoWPlaceMsg();

  DBoWPlaceMsg(const DBoWPlaceMsg& from);

  inline DBoWPlaceMsg& operator=(const DBoWPlaceMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBoWPlaceMsg& default_instance();

  void Swap(DBoWPlaceMsg* other);

  // implements Message ----------------------------------------------

  DBoWPlaceMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBoWPlaceMsg& from);
  void MergeFrom(const DBoWPlaceMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ReferenceFrameIdMsg index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline const ::pb::ReferenceFrameIdMsg& index() const;
  inline ::pb::ReferenceFrameIdMsg* mutable_index();
  inline ::pb::ReferenceFrameIdMsg* release_index();
  inline void set_allocated_index(::pb::ReferenceFrameIdMsg* index);

  // optional .pb.DescriptorVectorMsg descriptor_vector = 2;
  inline bool has_descriptor_vector() const;
  inline void clear_descriptor_vector();
  static const int kDescriptorVectorFieldNumber = 2;
  inline const ::pb::DescriptorVectorMsg& descriptor_vector() const;
  inline ::pb::DescriptorVectorMsg* mutable_descriptor_vector();
  inline ::pb::DescriptorVectorMsg* release_descriptor_vector();
  inline void set_allocated_descriptor_vector(::pb::DescriptorVectorMsg* descriptor_vector);

  // optional .pb.KeyPointVectorMsg keypoint_vector = 3;
  inline bool has_keypoint_vector() const;
  inline void clear_keypoint_vector();
  static const int kKeypointVectorFieldNumber = 3;
  inline const ::pb::KeyPointVectorMsg& keypoint_vector() const;
  inline ::pb::KeyPointVectorMsg* mutable_keypoint_vector();
  inline ::pb::KeyPointVectorMsg* release_keypoint_vector();
  inline void set_allocated_keypoint_vector(::pb::KeyPointVectorMsg* keypoint_vector);

  // optional .pb.LandmarkIdVectorMsg landmarks_vector = 4;
  inline bool has_landmarks_vector() const;
  inline void clear_landmarks_vector();
  static const int kLandmarksVectorFieldNumber = 4;
  inline const ::pb::LandmarkIdVectorMsg& landmarks_vector() const;
  inline ::pb::LandmarkIdVectorMsg* mutable_landmarks_vector();
  inline ::pb::LandmarkIdVectorMsg* release_landmarks_vector();
  inline void set_allocated_landmarks_vector(::pb::LandmarkIdVectorMsg* landmarks_vector);

  // @@protoc_insertion_point(class_scope:pb.DBoWPlaceMsg)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_descriptor_vector();
  inline void clear_has_descriptor_vector();
  inline void set_has_keypoint_vector();
  inline void clear_has_keypoint_vector();
  inline void set_has_landmarks_vector();
  inline void clear_has_landmarks_vector();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::ReferenceFrameIdMsg* index_;
  ::pb::DescriptorVectorMsg* descriptor_vector_;
  ::pb::KeyPointVectorMsg* keypoint_vector_;
  ::pb::LandmarkIdVectorMsg* landmarks_vector_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dbow_2eproto();
  friend void protobuf_AssignDesc_dbow_2eproto();
  friend void protobuf_ShutdownFile_dbow_2eproto();

  void InitAsDefaultInstance();
  static DBoWPlaceMsg* default_instance_;
};
// -------------------------------------------------------------------

class DBoWCorpusMsg : public ::google::protobuf::Message {
 public:
  DBoWCorpusMsg();
  virtual ~DBoWCorpusMsg();

  DBoWCorpusMsg(const DBoWCorpusMsg& from);

  inline DBoWCorpusMsg& operator=(const DBoWCorpusMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBoWCorpusMsg& default_instance();

  void Swap(DBoWCorpusMsg* other);

  // implements Message ----------------------------------------------

  DBoWCorpusMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBoWCorpusMsg& from);
  void MergeFrom(const DBoWCorpusMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.ReferenceFrameIdMsg index = 1;
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline const ::pb::ReferenceFrameIdMsg& index(int index) const;
  inline ::pb::ReferenceFrameIdMsg* mutable_index(int index);
  inline ::pb::ReferenceFrameIdMsg* add_index();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::ReferenceFrameIdMsg >&
      index() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::ReferenceFrameIdMsg >*
      mutable_index();

  // repeated .pb.DescriptorVectorMsg descriptor_vector = 2;
  inline int descriptor_vector_size() const;
  inline void clear_descriptor_vector();
  static const int kDescriptorVectorFieldNumber = 2;
  inline const ::pb::DescriptorVectorMsg& descriptor_vector(int index) const;
  inline ::pb::DescriptorVectorMsg* mutable_descriptor_vector(int index);
  inline ::pb::DescriptorVectorMsg* add_descriptor_vector();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::DescriptorVectorMsg >&
      descriptor_vector() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::DescriptorVectorMsg >*
      mutable_descriptor_vector();

  // repeated .pb.KeyPointVectorMsg keypoint_vector = 3;
  inline int keypoint_vector_size() const;
  inline void clear_keypoint_vector();
  static const int kKeypointVectorFieldNumber = 3;
  inline const ::pb::KeyPointVectorMsg& keypoint_vector(int index) const;
  inline ::pb::KeyPointVectorMsg* mutable_keypoint_vector(int index);
  inline ::pb::KeyPointVectorMsg* add_keypoint_vector();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::KeyPointVectorMsg >&
      keypoint_vector() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::KeyPointVectorMsg >*
      mutable_keypoint_vector();

  // @@protoc_insertion_point(class_scope:pb.DBoWCorpusMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::ReferenceFrameIdMsg > index_;
  ::google::protobuf::RepeatedPtrField< ::pb::DescriptorVectorMsg > descriptor_vector_;
  ::google::protobuf::RepeatedPtrField< ::pb::KeyPointVectorMsg > keypoint_vector_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dbow_2eproto();
  friend void protobuf_AssignDesc_dbow_2eproto();
  friend void protobuf_ShutdownFile_dbow_2eproto();

  void InitAsDefaultInstance();
  static DBoWCorpusMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// KeyPointMsg

// optional float x = 1;
inline bool KeyPointMsg::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyPointMsg::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyPointMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyPointMsg::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float KeyPointMsg::x() const {
  return x_;
}
inline void KeyPointMsg::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool KeyPointMsg::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyPointMsg::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyPointMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyPointMsg::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float KeyPointMsg::y() const {
  return y_;
}
inline void KeyPointMsg::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// KeyPointVectorMsg

// repeated .pb.KeyPointMsg keypoint = 1;
inline int KeyPointVectorMsg::keypoint_size() const {
  return keypoint_.size();
}
inline void KeyPointVectorMsg::clear_keypoint() {
  keypoint_.Clear();
}
inline const ::pb::KeyPointMsg& KeyPointVectorMsg::keypoint(int index) const {
  return keypoint_.Get(index);
}
inline ::pb::KeyPointMsg* KeyPointVectorMsg::mutable_keypoint(int index) {
  return keypoint_.Mutable(index);
}
inline ::pb::KeyPointMsg* KeyPointVectorMsg::add_keypoint() {
  return keypoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::KeyPointMsg >&
KeyPointVectorMsg::keypoint() const {
  return keypoint_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::KeyPointMsg >*
KeyPointVectorMsg::mutable_keypoint() {
  return &keypoint_;
}

// -------------------------------------------------------------------

// BinaryDescriptorMsg

// repeated uint32 data = 1 [packed = true];
inline int BinaryDescriptorMsg::data_size() const {
  return data_.size();
}
inline void BinaryDescriptorMsg::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::uint32 BinaryDescriptorMsg::data(int index) const {
  return data_.Get(index);
}
inline void BinaryDescriptorMsg::set_data(int index, ::google::protobuf::uint32 value) {
  data_.Set(index, value);
}
inline void BinaryDescriptorMsg::add_data(::google::protobuf::uint32 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BinaryDescriptorMsg::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BinaryDescriptorMsg::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// DescriptorVectorMsg

// repeated .pb.BinaryDescriptorMsg binary_descriptor = 1;
inline int DescriptorVectorMsg::binary_descriptor_size() const {
  return binary_descriptor_.size();
}
inline void DescriptorVectorMsg::clear_binary_descriptor() {
  binary_descriptor_.Clear();
}
inline const ::pb::BinaryDescriptorMsg& DescriptorVectorMsg::binary_descriptor(int index) const {
  return binary_descriptor_.Get(index);
}
inline ::pb::BinaryDescriptorMsg* DescriptorVectorMsg::mutable_binary_descriptor(int index) {
  return binary_descriptor_.Mutable(index);
}
inline ::pb::BinaryDescriptorMsg* DescriptorVectorMsg::add_binary_descriptor() {
  return binary_descriptor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BinaryDescriptorMsg >&
DescriptorVectorMsg::binary_descriptor() const {
  return binary_descriptor_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BinaryDescriptorMsg >*
DescriptorVectorMsg::mutable_binary_descriptor() {
  return &binary_descriptor_;
}

// -------------------------------------------------------------------

// LandmarkIdVectorMsg

// repeated .pb.LandmarkIdMsg landmarks = 1;
inline int LandmarkIdVectorMsg::landmarks_size() const {
  return landmarks_.size();
}
inline void LandmarkIdVectorMsg::clear_landmarks() {
  landmarks_.Clear();
}
inline const ::pb::LandmarkIdMsg& LandmarkIdVectorMsg::landmarks(int index) const {
  return landmarks_.Get(index);
}
inline ::pb::LandmarkIdMsg* LandmarkIdVectorMsg::mutable_landmarks(int index) {
  return landmarks_.Mutable(index);
}
inline ::pb::LandmarkIdMsg* LandmarkIdVectorMsg::add_landmarks() {
  return landmarks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::LandmarkIdMsg >&
LandmarkIdVectorMsg::landmarks() const {
  return landmarks_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::LandmarkIdMsg >*
LandmarkIdVectorMsg::mutable_landmarks() {
  return &landmarks_;
}

// -------------------------------------------------------------------

// DBoWPlaceMsg

// optional .pb.ReferenceFrameIdMsg index = 1;
inline bool DBoWPlaceMsg::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBoWPlaceMsg::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBoWPlaceMsg::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBoWPlaceMsg::clear_index() {
  if (index_ != NULL) index_->::pb::ReferenceFrameIdMsg::Clear();
  clear_has_index();
}
inline const ::pb::ReferenceFrameIdMsg& DBoWPlaceMsg::index() const {
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
inline ::pb::ReferenceFrameIdMsg* DBoWPlaceMsg::mutable_index() {
  set_has_index();
  if (index_ == NULL) index_ = new ::pb::ReferenceFrameIdMsg;
  return index_;
}
inline ::pb::ReferenceFrameIdMsg* DBoWPlaceMsg::release_index() {
  clear_has_index();
  ::pb::ReferenceFrameIdMsg* temp = index_;
  index_ = NULL;
  return temp;
}
inline void DBoWPlaceMsg::set_allocated_index(::pb::ReferenceFrameIdMsg* index) {
  delete index_;
  index_ = index;
  if (index) {
    set_has_index();
  } else {
    clear_has_index();
  }
}

// optional .pb.DescriptorVectorMsg descriptor_vector = 2;
inline bool DBoWPlaceMsg::has_descriptor_vector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBoWPlaceMsg::set_has_descriptor_vector() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBoWPlaceMsg::clear_has_descriptor_vector() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBoWPlaceMsg::clear_descriptor_vector() {
  if (descriptor_vector_ != NULL) descriptor_vector_->::pb::DescriptorVectorMsg::Clear();
  clear_has_descriptor_vector();
}
inline const ::pb::DescriptorVectorMsg& DBoWPlaceMsg::descriptor_vector() const {
  return descriptor_vector_ != NULL ? *descriptor_vector_ : *default_instance_->descriptor_vector_;
}
inline ::pb::DescriptorVectorMsg* DBoWPlaceMsg::mutable_descriptor_vector() {
  set_has_descriptor_vector();
  if (descriptor_vector_ == NULL) descriptor_vector_ = new ::pb::DescriptorVectorMsg;
  return descriptor_vector_;
}
inline ::pb::DescriptorVectorMsg* DBoWPlaceMsg::release_descriptor_vector() {
  clear_has_descriptor_vector();
  ::pb::DescriptorVectorMsg* temp = descriptor_vector_;
  descriptor_vector_ = NULL;
  return temp;
}
inline void DBoWPlaceMsg::set_allocated_descriptor_vector(::pb::DescriptorVectorMsg* descriptor_vector) {
  delete descriptor_vector_;
  descriptor_vector_ = descriptor_vector;
  if (descriptor_vector) {
    set_has_descriptor_vector();
  } else {
    clear_has_descriptor_vector();
  }
}

// optional .pb.KeyPointVectorMsg keypoint_vector = 3;
inline bool DBoWPlaceMsg::has_keypoint_vector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBoWPlaceMsg::set_has_keypoint_vector() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBoWPlaceMsg::clear_has_keypoint_vector() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBoWPlaceMsg::clear_keypoint_vector() {
  if (keypoint_vector_ != NULL) keypoint_vector_->::pb::KeyPointVectorMsg::Clear();
  clear_has_keypoint_vector();
}
inline const ::pb::KeyPointVectorMsg& DBoWPlaceMsg::keypoint_vector() const {
  return keypoint_vector_ != NULL ? *keypoint_vector_ : *default_instance_->keypoint_vector_;
}
inline ::pb::KeyPointVectorMsg* DBoWPlaceMsg::mutable_keypoint_vector() {
  set_has_keypoint_vector();
  if (keypoint_vector_ == NULL) keypoint_vector_ = new ::pb::KeyPointVectorMsg;
  return keypoint_vector_;
}
inline ::pb::KeyPointVectorMsg* DBoWPlaceMsg::release_keypoint_vector() {
  clear_has_keypoint_vector();
  ::pb::KeyPointVectorMsg* temp = keypoint_vector_;
  keypoint_vector_ = NULL;
  return temp;
}
inline void DBoWPlaceMsg::set_allocated_keypoint_vector(::pb::KeyPointVectorMsg* keypoint_vector) {
  delete keypoint_vector_;
  keypoint_vector_ = keypoint_vector;
  if (keypoint_vector) {
    set_has_keypoint_vector();
  } else {
    clear_has_keypoint_vector();
  }
}

// optional .pb.LandmarkIdVectorMsg landmarks_vector = 4;
inline bool DBoWPlaceMsg::has_landmarks_vector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBoWPlaceMsg::set_has_landmarks_vector() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBoWPlaceMsg::clear_has_landmarks_vector() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBoWPlaceMsg::clear_landmarks_vector() {
  if (landmarks_vector_ != NULL) landmarks_vector_->::pb::LandmarkIdVectorMsg::Clear();
  clear_has_landmarks_vector();
}
inline const ::pb::LandmarkIdVectorMsg& DBoWPlaceMsg::landmarks_vector() const {
  return landmarks_vector_ != NULL ? *landmarks_vector_ : *default_instance_->landmarks_vector_;
}
inline ::pb::LandmarkIdVectorMsg* DBoWPlaceMsg::mutable_landmarks_vector() {
  set_has_landmarks_vector();
  if (landmarks_vector_ == NULL) landmarks_vector_ = new ::pb::LandmarkIdVectorMsg;
  return landmarks_vector_;
}
inline ::pb::LandmarkIdVectorMsg* DBoWPlaceMsg::release_landmarks_vector() {
  clear_has_landmarks_vector();
  ::pb::LandmarkIdVectorMsg* temp = landmarks_vector_;
  landmarks_vector_ = NULL;
  return temp;
}
inline void DBoWPlaceMsg::set_allocated_landmarks_vector(::pb::LandmarkIdVectorMsg* landmarks_vector) {
  delete landmarks_vector_;
  landmarks_vector_ = landmarks_vector;
  if (landmarks_vector) {
    set_has_landmarks_vector();
  } else {
    clear_has_landmarks_vector();
  }
}

// -------------------------------------------------------------------

// DBoWCorpusMsg

// repeated .pb.ReferenceFrameIdMsg index = 1;
inline int DBoWCorpusMsg::index_size() const {
  return index_.size();
}
inline void DBoWCorpusMsg::clear_index() {
  index_.Clear();
}
inline const ::pb::ReferenceFrameIdMsg& DBoWCorpusMsg::index(int index) const {
  return index_.Get(index);
}
inline ::pb::ReferenceFrameIdMsg* DBoWCorpusMsg::mutable_index(int index) {
  return index_.Mutable(index);
}
inline ::pb::ReferenceFrameIdMsg* DBoWCorpusMsg::add_index() {
  return index_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ReferenceFrameIdMsg >&
DBoWCorpusMsg::index() const {
  return index_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ReferenceFrameIdMsg >*
DBoWCorpusMsg::mutable_index() {
  return &index_;
}

// repeated .pb.DescriptorVectorMsg descriptor_vector = 2;
inline int DBoWCorpusMsg::descriptor_vector_size() const {
  return descriptor_vector_.size();
}
inline void DBoWCorpusMsg::clear_descriptor_vector() {
  descriptor_vector_.Clear();
}
inline const ::pb::DescriptorVectorMsg& DBoWCorpusMsg::descriptor_vector(int index) const {
  return descriptor_vector_.Get(index);
}
inline ::pb::DescriptorVectorMsg* DBoWCorpusMsg::mutable_descriptor_vector(int index) {
  return descriptor_vector_.Mutable(index);
}
inline ::pb::DescriptorVectorMsg* DBoWCorpusMsg::add_descriptor_vector() {
  return descriptor_vector_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::DescriptorVectorMsg >&
DBoWCorpusMsg::descriptor_vector() const {
  return descriptor_vector_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::DescriptorVectorMsg >*
DBoWCorpusMsg::mutable_descriptor_vector() {
  return &descriptor_vector_;
}

// repeated .pb.KeyPointVectorMsg keypoint_vector = 3;
inline int DBoWCorpusMsg::keypoint_vector_size() const {
  return keypoint_vector_.size();
}
inline void DBoWCorpusMsg::clear_keypoint_vector() {
  keypoint_vector_.Clear();
}
inline const ::pb::KeyPointVectorMsg& DBoWCorpusMsg::keypoint_vector(int index) const {
  return keypoint_vector_.Get(index);
}
inline ::pb::KeyPointVectorMsg* DBoWCorpusMsg::mutable_keypoint_vector(int index) {
  return keypoint_vector_.Mutable(index);
}
inline ::pb::KeyPointVectorMsg* DBoWCorpusMsg::add_keypoint_vector() {
  return keypoint_vector_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::KeyPointVectorMsg >&
DBoWCorpusMsg::keypoint_vector() const {
  return keypoint_vector_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::KeyPointVectorMsg >*
DBoWCorpusMsg::mutable_keypoint_vector() {
  return &keypoint_vector_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dbow_2eproto__INCLUDED
