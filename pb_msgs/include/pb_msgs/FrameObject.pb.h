// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameObject.proto

#ifndef PROTOBUF_FrameObject_2eproto__INCLUDED
#define PROTOBUF_FrameObject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Pose.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FrameObject_2eproto();
void protobuf_AssignDesc_FrameObject_2eproto();
void protobuf_ShutdownFile_FrameObject_2eproto();

class DoubleMatrixMsg;
class FrameObjectMsg;
class CubeObjectMsg;
class TeapotObjectMsg;
class TextObjectMsg;

enum FrameObjectMsg_Type {
  FrameObjectMsg_Type_Cube = 1,
  FrameObjectMsg_Type_Teapot = 2,
  FrameObjectMsg_Type_Text = 3
};
bool FrameObjectMsg_Type_IsValid(int value);
const FrameObjectMsg_Type FrameObjectMsg_Type_Type_MIN = FrameObjectMsg_Type_Cube;
const FrameObjectMsg_Type FrameObjectMsg_Type_Type_MAX = FrameObjectMsg_Type_Text;
const int FrameObjectMsg_Type_Type_ARRAYSIZE = FrameObjectMsg_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameObjectMsg_Type_descriptor();
inline const ::std::string& FrameObjectMsg_Type_Name(FrameObjectMsg_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameObjectMsg_Type_descriptor(), value);
}
inline bool FrameObjectMsg_Type_Parse(
    const ::std::string& name, FrameObjectMsg_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameObjectMsg_Type>(
    FrameObjectMsg_Type_descriptor(), name, value);
}
// ===================================================================

class DoubleMatrixMsg : public ::google::protobuf::Message {
 public:
  DoubleMatrixMsg();
  virtual ~DoubleMatrixMsg();

  DoubleMatrixMsg(const DoubleMatrixMsg& from);

  inline DoubleMatrixMsg& operator=(const DoubleMatrixMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleMatrixMsg& default_instance();

  void Swap(DoubleMatrixMsg* other);

  // implements Message ----------------------------------------------

  DoubleMatrixMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoubleMatrixMsg& from);
  void MergeFrom(const DoubleMatrixMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rows = 1;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 1;
  inline ::google::protobuf::int32 rows() const;
  inline void set_rows(::google::protobuf::int32 value);

  // optional int32 cols = 2;
  inline bool has_cols() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 2;
  inline ::google::protobuf::int32 cols() const;
  inline void set_cols(::google::protobuf::int32 value);

  // repeated double data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:pb.DoubleMatrixMsg)
 private:
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_cols();
  inline void clear_has_cols();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FrameObject_2eproto();
  friend void protobuf_AssignDesc_FrameObject_2eproto();
  friend void protobuf_ShutdownFile_FrameObject_2eproto();

  void InitAsDefaultInstance();
  static DoubleMatrixMsg* default_instance_;
};
// -------------------------------------------------------------------

class FrameObjectMsg : public ::google::protobuf::Message {
 public:
  FrameObjectMsg();
  virtual ~FrameObjectMsg();

  FrameObjectMsg(const FrameObjectMsg& from);

  inline FrameObjectMsg& operator=(const FrameObjectMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameObjectMsg& default_instance();

  void Swap(FrameObjectMsg* other);

  // implements Message ----------------------------------------------

  FrameObjectMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameObjectMsg& from);
  void MergeFrom(const FrameObjectMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FrameObjectMsg_Type Type;
  static const Type Cube = FrameObjectMsg_Type_Cube;
  static const Type Teapot = FrameObjectMsg_Type_Teapot;
  static const Type Text = FrameObjectMsg_Type_Text;
  static inline bool Type_IsValid(int value) {
    return FrameObjectMsg_Type_IsValid(value);
  }
  static const Type Type_MIN =
    FrameObjectMsg_Type_Type_MIN;
  static const Type Type_MAX =
    FrameObjectMsg_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    FrameObjectMsg_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return FrameObjectMsg_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return FrameObjectMsg_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return FrameObjectMsg_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .pb.FrameObjectMsg.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::pb::FrameObjectMsg_Type type() const;
  inline void set_type(::pb::FrameObjectMsg_Type value);

  // optional bytes uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FrameObjectMsg)
  // @@protoc_insertion_point(class_scope:pb.FrameObjectMsg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FrameObject_2eproto();
  friend void protobuf_AssignDesc_FrameObject_2eproto();
  friend void protobuf_ShutdownFile_FrameObject_2eproto();

  void InitAsDefaultInstance();
  static FrameObjectMsg* default_instance_;
};
// -------------------------------------------------------------------

class CubeObjectMsg : public ::google::protobuf::Message {
 public:
  CubeObjectMsg();
  virtual ~CubeObjectMsg();

  CubeObjectMsg(const CubeObjectMsg& from);

  inline CubeObjectMsg& operator=(const CubeObjectMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CubeObjectMsg& default_instance();

  void Swap(CubeObjectMsg* other);

  // implements Message ----------------------------------------------

  CubeObjectMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CubeObjectMsg& from);
  void MergeFrom(const CubeObjectMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PoseMsg t_po = 1;
  inline bool has_t_po() const;
  inline void clear_t_po();
  static const int kTPoFieldNumber = 1;
  inline const ::pb::PoseMsg& t_po() const;
  inline ::pb::PoseMsg* mutable_t_po();
  inline ::pb::PoseMsg* release_t_po();
  inline void set_allocated_t_po(::pb::PoseMsg* t_po);

  // optional .pb.DoubleMatrixMsg scale = 2;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline const ::pb::DoubleMatrixMsg& scale() const;
  inline ::pb::DoubleMatrixMsg* mutable_scale();
  inline ::pb::DoubleMatrixMsg* release_scale();
  inline void set_allocated_scale(::pb::DoubleMatrixMsg* scale);

  static const int kObjectFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::pb::FrameObjectMsg,
      ::google::protobuf::internal::MessageTypeTraits< ::pb::CubeObjectMsg >, 11, false >
    object;
  // @@protoc_insertion_point(class_scope:pb.CubeObjectMsg)
 private:
  inline void set_has_t_po();
  inline void clear_has_t_po();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::PoseMsg* t_po_;
  ::pb::DoubleMatrixMsg* scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FrameObject_2eproto();
  friend void protobuf_AssignDesc_FrameObject_2eproto();
  friend void protobuf_ShutdownFile_FrameObject_2eproto();

  void InitAsDefaultInstance();
  static CubeObjectMsg* default_instance_;
};
// -------------------------------------------------------------------

class TeapotObjectMsg : public ::google::protobuf::Message {
 public:
  TeapotObjectMsg();
  virtual ~TeapotObjectMsg();

  TeapotObjectMsg(const TeapotObjectMsg& from);

  inline TeapotObjectMsg& operator=(const TeapotObjectMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeapotObjectMsg& default_instance();

  void Swap(TeapotObjectMsg* other);

  // implements Message ----------------------------------------------

  TeapotObjectMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeapotObjectMsg& from);
  void MergeFrom(const TeapotObjectMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PoseMsg t_po = 1;
  inline bool has_t_po() const;
  inline void clear_t_po();
  static const int kTPoFieldNumber = 1;
  inline const ::pb::PoseMsg& t_po() const;
  inline ::pb::PoseMsg* mutable_t_po();
  inline ::pb::PoseMsg* release_t_po();
  inline void set_allocated_t_po(::pb::PoseMsg* t_po);

  // optional .pb.DoubleMatrixMsg scale = 2;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline const ::pb::DoubleMatrixMsg& scale() const;
  inline ::pb::DoubleMatrixMsg* mutable_scale();
  inline ::pb::DoubleMatrixMsg* release_scale();
  inline void set_allocated_scale(::pb::DoubleMatrixMsg* scale);

  static const int kObjectFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::pb::FrameObjectMsg,
      ::google::protobuf::internal::MessageTypeTraits< ::pb::TeapotObjectMsg >, 11, false >
    object;
  // @@protoc_insertion_point(class_scope:pb.TeapotObjectMsg)
 private:
  inline void set_has_t_po();
  inline void clear_has_t_po();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::PoseMsg* t_po_;
  ::pb::DoubleMatrixMsg* scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FrameObject_2eproto();
  friend void protobuf_AssignDesc_FrameObject_2eproto();
  friend void protobuf_ShutdownFile_FrameObject_2eproto();

  void InitAsDefaultInstance();
  static TeapotObjectMsg* default_instance_;
};
// -------------------------------------------------------------------

class TextObjectMsg : public ::google::protobuf::Message {
 public:
  TextObjectMsg();
  virtual ~TextObjectMsg();

  TextObjectMsg(const TextObjectMsg& from);

  inline TextObjectMsg& operator=(const TextObjectMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TextObjectMsg& default_instance();

  void Swap(TextObjectMsg* other);

  // implements Message ----------------------------------------------

  TextObjectMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TextObjectMsg& from);
  void MergeFrom(const TextObjectMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PoseMsg t_po = 1;
  inline bool has_t_po() const;
  inline void clear_t_po();
  static const int kTPoFieldNumber = 1;
  inline const ::pb::PoseMsg& t_po() const;
  inline ::pb::PoseMsg* mutable_t_po();
  inline ::pb::PoseMsg* release_t_po();
  inline void set_allocated_t_po(::pb::PoseMsg* t_po);

  // optional .pb.DoubleMatrixMsg scale = 2;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline const ::pb::DoubleMatrixMsg& scale() const;
  inline ::pb::DoubleMatrixMsg* mutable_scale();
  inline ::pb::DoubleMatrixMsg* release_scale();
  inline void set_allocated_scale(::pb::DoubleMatrixMsg* scale);

  // optional string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional .pb.DoubleMatrixMsg color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline const ::pb::DoubleMatrixMsg& color() const;
  inline ::pb::DoubleMatrixMsg* mutable_color();
  inline ::pb::DoubleMatrixMsg* release_color();
  inline void set_allocated_color(::pb::DoubleMatrixMsg* color);

  static const int kObjectFieldNumber = 102;
  static ::google::protobuf::internal::ExtensionIdentifier< ::pb::FrameObjectMsg,
      ::google::protobuf::internal::MessageTypeTraits< ::pb::TextObjectMsg >, 11, false >
    object;
  // @@protoc_insertion_point(class_scope:pb.TextObjectMsg)
 private:
  inline void set_has_t_po();
  inline void clear_has_t_po();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::PoseMsg* t_po_;
  ::pb::DoubleMatrixMsg* scale_;
  ::std::string* text_;
  ::pb::DoubleMatrixMsg* color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FrameObject_2eproto();
  friend void protobuf_AssignDesc_FrameObject_2eproto();
  friend void protobuf_ShutdownFile_FrameObject_2eproto();

  void InitAsDefaultInstance();
  static TextObjectMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// DoubleMatrixMsg

// optional int32 rows = 1;
inline bool DoubleMatrixMsg::has_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoubleMatrixMsg::set_has_rows() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoubleMatrixMsg::clear_has_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoubleMatrixMsg::clear_rows() {
  rows_ = 0;
  clear_has_rows();
}
inline ::google::protobuf::int32 DoubleMatrixMsg::rows() const {
  return rows_;
}
inline void DoubleMatrixMsg::set_rows(::google::protobuf::int32 value) {
  set_has_rows();
  rows_ = value;
}

// optional int32 cols = 2;
inline bool DoubleMatrixMsg::has_cols() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DoubleMatrixMsg::set_has_cols() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DoubleMatrixMsg::clear_has_cols() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DoubleMatrixMsg::clear_cols() {
  cols_ = 0;
  clear_has_cols();
}
inline ::google::protobuf::int32 DoubleMatrixMsg::cols() const {
  return cols_;
}
inline void DoubleMatrixMsg::set_cols(::google::protobuf::int32 value) {
  set_has_cols();
  cols_ = value;
}

// repeated double data = 3 [packed = true];
inline int DoubleMatrixMsg::data_size() const {
  return data_.size();
}
inline void DoubleMatrixMsg::clear_data() {
  data_.Clear();
}
inline double DoubleMatrixMsg::data(int index) const {
  return data_.Get(index);
}
inline void DoubleMatrixMsg::set_data(int index, double value) {
  data_.Set(index, value);
}
inline void DoubleMatrixMsg::add_data(double value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleMatrixMsg::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleMatrixMsg::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// FrameObjectMsg

// required .pb.FrameObjectMsg.Type type = 1;
inline bool FrameObjectMsg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameObjectMsg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameObjectMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameObjectMsg::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::FrameObjectMsg_Type FrameObjectMsg::type() const {
  return static_cast< ::pb::FrameObjectMsg_Type >(type_);
}
inline void FrameObjectMsg::set_type(::pb::FrameObjectMsg_Type value) {
  assert(::pb::FrameObjectMsg_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes uuid = 2;
inline bool FrameObjectMsg::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameObjectMsg::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameObjectMsg::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameObjectMsg::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& FrameObjectMsg::uuid() const {
  return *uuid_;
}
inline void FrameObjectMsg::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void FrameObjectMsg::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void FrameObjectMsg::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FrameObjectMsg::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* FrameObjectMsg::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FrameObjectMsg::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CubeObjectMsg

// optional .pb.PoseMsg t_po = 1;
inline bool CubeObjectMsg::has_t_po() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CubeObjectMsg::set_has_t_po() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CubeObjectMsg::clear_has_t_po() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CubeObjectMsg::clear_t_po() {
  if (t_po_ != NULL) t_po_->::pb::PoseMsg::Clear();
  clear_has_t_po();
}
inline const ::pb::PoseMsg& CubeObjectMsg::t_po() const {
  return t_po_ != NULL ? *t_po_ : *default_instance_->t_po_;
}
inline ::pb::PoseMsg* CubeObjectMsg::mutable_t_po() {
  set_has_t_po();
  if (t_po_ == NULL) t_po_ = new ::pb::PoseMsg;
  return t_po_;
}
inline ::pb::PoseMsg* CubeObjectMsg::release_t_po() {
  clear_has_t_po();
  ::pb::PoseMsg* temp = t_po_;
  t_po_ = NULL;
  return temp;
}
inline void CubeObjectMsg::set_allocated_t_po(::pb::PoseMsg* t_po) {
  delete t_po_;
  t_po_ = t_po;
  if (t_po) {
    set_has_t_po();
  } else {
    clear_has_t_po();
  }
}

// optional .pb.DoubleMatrixMsg scale = 2;
inline bool CubeObjectMsg::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CubeObjectMsg::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CubeObjectMsg::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CubeObjectMsg::clear_scale() {
  if (scale_ != NULL) scale_->::pb::DoubleMatrixMsg::Clear();
  clear_has_scale();
}
inline const ::pb::DoubleMatrixMsg& CubeObjectMsg::scale() const {
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::pb::DoubleMatrixMsg* CubeObjectMsg::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) scale_ = new ::pb::DoubleMatrixMsg;
  return scale_;
}
inline ::pb::DoubleMatrixMsg* CubeObjectMsg::release_scale() {
  clear_has_scale();
  ::pb::DoubleMatrixMsg* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void CubeObjectMsg::set_allocated_scale(::pb::DoubleMatrixMsg* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
}

// -------------------------------------------------------------------

// TeapotObjectMsg

// optional .pb.PoseMsg t_po = 1;
inline bool TeapotObjectMsg::has_t_po() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeapotObjectMsg::set_has_t_po() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeapotObjectMsg::clear_has_t_po() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeapotObjectMsg::clear_t_po() {
  if (t_po_ != NULL) t_po_->::pb::PoseMsg::Clear();
  clear_has_t_po();
}
inline const ::pb::PoseMsg& TeapotObjectMsg::t_po() const {
  return t_po_ != NULL ? *t_po_ : *default_instance_->t_po_;
}
inline ::pb::PoseMsg* TeapotObjectMsg::mutable_t_po() {
  set_has_t_po();
  if (t_po_ == NULL) t_po_ = new ::pb::PoseMsg;
  return t_po_;
}
inline ::pb::PoseMsg* TeapotObjectMsg::release_t_po() {
  clear_has_t_po();
  ::pb::PoseMsg* temp = t_po_;
  t_po_ = NULL;
  return temp;
}
inline void TeapotObjectMsg::set_allocated_t_po(::pb::PoseMsg* t_po) {
  delete t_po_;
  t_po_ = t_po;
  if (t_po) {
    set_has_t_po();
  } else {
    clear_has_t_po();
  }
}

// optional .pb.DoubleMatrixMsg scale = 2;
inline bool TeapotObjectMsg::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeapotObjectMsg::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeapotObjectMsg::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeapotObjectMsg::clear_scale() {
  if (scale_ != NULL) scale_->::pb::DoubleMatrixMsg::Clear();
  clear_has_scale();
}
inline const ::pb::DoubleMatrixMsg& TeapotObjectMsg::scale() const {
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::pb::DoubleMatrixMsg* TeapotObjectMsg::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) scale_ = new ::pb::DoubleMatrixMsg;
  return scale_;
}
inline ::pb::DoubleMatrixMsg* TeapotObjectMsg::release_scale() {
  clear_has_scale();
  ::pb::DoubleMatrixMsg* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void TeapotObjectMsg::set_allocated_scale(::pb::DoubleMatrixMsg* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
}

// -------------------------------------------------------------------

// TextObjectMsg

// optional .pb.PoseMsg t_po = 1;
inline bool TextObjectMsg::has_t_po() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TextObjectMsg::set_has_t_po() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TextObjectMsg::clear_has_t_po() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TextObjectMsg::clear_t_po() {
  if (t_po_ != NULL) t_po_->::pb::PoseMsg::Clear();
  clear_has_t_po();
}
inline const ::pb::PoseMsg& TextObjectMsg::t_po() const {
  return t_po_ != NULL ? *t_po_ : *default_instance_->t_po_;
}
inline ::pb::PoseMsg* TextObjectMsg::mutable_t_po() {
  set_has_t_po();
  if (t_po_ == NULL) t_po_ = new ::pb::PoseMsg;
  return t_po_;
}
inline ::pb::PoseMsg* TextObjectMsg::release_t_po() {
  clear_has_t_po();
  ::pb::PoseMsg* temp = t_po_;
  t_po_ = NULL;
  return temp;
}
inline void TextObjectMsg::set_allocated_t_po(::pb::PoseMsg* t_po) {
  delete t_po_;
  t_po_ = t_po;
  if (t_po) {
    set_has_t_po();
  } else {
    clear_has_t_po();
  }
}

// optional .pb.DoubleMatrixMsg scale = 2;
inline bool TextObjectMsg::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TextObjectMsg::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TextObjectMsg::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TextObjectMsg::clear_scale() {
  if (scale_ != NULL) scale_->::pb::DoubleMatrixMsg::Clear();
  clear_has_scale();
}
inline const ::pb::DoubleMatrixMsg& TextObjectMsg::scale() const {
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::pb::DoubleMatrixMsg* TextObjectMsg::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) scale_ = new ::pb::DoubleMatrixMsg;
  return scale_;
}
inline ::pb::DoubleMatrixMsg* TextObjectMsg::release_scale() {
  clear_has_scale();
  ::pb::DoubleMatrixMsg* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void TextObjectMsg::set_allocated_scale(::pb::DoubleMatrixMsg* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
}

// optional string text = 3;
inline bool TextObjectMsg::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TextObjectMsg::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TextObjectMsg::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TextObjectMsg::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& TextObjectMsg::text() const {
  return *text_;
}
inline void TextObjectMsg::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void TextObjectMsg::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void TextObjectMsg::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TextObjectMsg::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* TextObjectMsg::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TextObjectMsg::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .pb.DoubleMatrixMsg color = 4;
inline bool TextObjectMsg::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TextObjectMsg::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TextObjectMsg::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TextObjectMsg::clear_color() {
  if (color_ != NULL) color_->::pb::DoubleMatrixMsg::Clear();
  clear_has_color();
}
inline const ::pb::DoubleMatrixMsg& TextObjectMsg::color() const {
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::pb::DoubleMatrixMsg* TextObjectMsg::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::pb::DoubleMatrixMsg;
  return color_;
}
inline ::pb::DoubleMatrixMsg* TextObjectMsg::release_color() {
  clear_has_color();
  ::pb::DoubleMatrixMsg* temp = color_;
  color_ = NULL;
  return temp;
}
inline void TextObjectMsg::set_allocated_color(::pb::DoubleMatrixMsg* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::FrameObjectMsg_Type>() {
  return ::pb::FrameObjectMsg_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FrameObject_2eproto__INCLUDED
