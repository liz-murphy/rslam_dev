// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lidar.proto

#ifndef PROTOBUF_Lidar_2eproto__INCLUDED
#define PROTOBUF_Lidar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Lidar_2eproto();
void protobuf_AssignDesc_Lidar_2eproto();
void protobuf_ShutdownFile_Lidar_2eproto();

class LidarMsg;

// ===================================================================

class LidarMsg : public ::google::protobuf::Message {
 public:
  LidarMsg();
  virtual ~LidarMsg();

  LidarMsg(const LidarMsg& from);

  inline LidarMsg& operator=(const LidarMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarMsg& default_instance();

  void Swap(LidarMsg* other);

  // implements Message ----------------------------------------------

  LidarMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LidarMsg& from);
  void MergeFrom(const LidarMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional double device_time = 2;
  inline bool has_device_time() const;
  inline void clear_device_time();
  static const int kDeviceTimeFieldNumber = 2;
  inline double device_time() const;
  inline void set_device_time(double value);

  // optional double system_time = 3;
  inline bool has_system_time() const;
  inline void clear_system_time();
  static const int kSystemTimeFieldNumber = 3;
  inline double system_time() const;
  inline void set_system_time(double value);

  // optional .pb.MatrixMsg distance = 4;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 4;
  inline const ::pb::MatrixMsg& distance() const;
  inline ::pb::MatrixMsg* mutable_distance();
  inline ::pb::MatrixMsg* release_distance();
  inline void set_allocated_distance(::pb::MatrixMsg* distance);

  // optional .pb.MatrixMsg intensity = 5;
  inline bool has_intensity() const;
  inline void clear_intensity();
  static const int kIntensityFieldNumber = 5;
  inline const ::pb::MatrixMsg& intensity() const;
  inline ::pb::MatrixMsg* mutable_intensity();
  inline ::pb::MatrixMsg* release_intensity();
  inline void set_allocated_intensity(::pb::MatrixMsg* intensity);

  // optional .pb.VectorMsg rotational_position = 6;
  inline bool has_rotational_position() const;
  inline void clear_rotational_position();
  static const int kRotationalPositionFieldNumber = 6;
  inline const ::pb::VectorMsg& rotational_position() const;
  inline ::pb::VectorMsg* mutable_rotational_position();
  inline ::pb::VectorMsg* release_rotational_position();
  inline void set_allocated_rotational_position(::pb::VectorMsg* rotational_position);

  // @@protoc_insertion_point(class_scope:pb.LidarMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_device_time();
  inline void clear_has_device_time();
  inline void set_has_system_time();
  inline void clear_has_system_time();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_intensity();
  inline void clear_has_intensity();
  inline void set_has_rotational_position();
  inline void clear_has_rotational_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double device_time_;
  double system_time_;
  ::pb::MatrixMsg* distance_;
  ::pb::MatrixMsg* intensity_;
  ::pb::VectorMsg* rotational_position_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Lidar_2eproto();
  friend void protobuf_AssignDesc_Lidar_2eproto();
  friend void protobuf_ShutdownFile_Lidar_2eproto();

  void InitAsDefaultInstance();
  static LidarMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// LidarMsg

// optional int32 id = 1;
inline bool LidarMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarMsg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LidarMsg::id() const {
  return id_;
}
inline void LidarMsg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional double device_time = 2;
inline bool LidarMsg::has_device_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LidarMsg::set_has_device_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LidarMsg::clear_has_device_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LidarMsg::clear_device_time() {
  device_time_ = 0;
  clear_has_device_time();
}
inline double LidarMsg::device_time() const {
  return device_time_;
}
inline void LidarMsg::set_device_time(double value) {
  set_has_device_time();
  device_time_ = value;
}

// optional double system_time = 3;
inline bool LidarMsg::has_system_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LidarMsg::set_has_system_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LidarMsg::clear_has_system_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LidarMsg::clear_system_time() {
  system_time_ = 0;
  clear_has_system_time();
}
inline double LidarMsg::system_time() const {
  return system_time_;
}
inline void LidarMsg::set_system_time(double value) {
  set_has_system_time();
  system_time_ = value;
}

// optional .pb.MatrixMsg distance = 4;
inline bool LidarMsg::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LidarMsg::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LidarMsg::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LidarMsg::clear_distance() {
  if (distance_ != NULL) distance_->::pb::MatrixMsg::Clear();
  clear_has_distance();
}
inline const ::pb::MatrixMsg& LidarMsg::distance() const {
  return distance_ != NULL ? *distance_ : *default_instance_->distance_;
}
inline ::pb::MatrixMsg* LidarMsg::mutable_distance() {
  set_has_distance();
  if (distance_ == NULL) distance_ = new ::pb::MatrixMsg;
  return distance_;
}
inline ::pb::MatrixMsg* LidarMsg::release_distance() {
  clear_has_distance();
  ::pb::MatrixMsg* temp = distance_;
  distance_ = NULL;
  return temp;
}
inline void LidarMsg::set_allocated_distance(::pb::MatrixMsg* distance) {
  delete distance_;
  distance_ = distance;
  if (distance) {
    set_has_distance();
  } else {
    clear_has_distance();
  }
}

// optional .pb.MatrixMsg intensity = 5;
inline bool LidarMsg::has_intensity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LidarMsg::set_has_intensity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LidarMsg::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LidarMsg::clear_intensity() {
  if (intensity_ != NULL) intensity_->::pb::MatrixMsg::Clear();
  clear_has_intensity();
}
inline const ::pb::MatrixMsg& LidarMsg::intensity() const {
  return intensity_ != NULL ? *intensity_ : *default_instance_->intensity_;
}
inline ::pb::MatrixMsg* LidarMsg::mutable_intensity() {
  set_has_intensity();
  if (intensity_ == NULL) intensity_ = new ::pb::MatrixMsg;
  return intensity_;
}
inline ::pb::MatrixMsg* LidarMsg::release_intensity() {
  clear_has_intensity();
  ::pb::MatrixMsg* temp = intensity_;
  intensity_ = NULL;
  return temp;
}
inline void LidarMsg::set_allocated_intensity(::pb::MatrixMsg* intensity) {
  delete intensity_;
  intensity_ = intensity;
  if (intensity) {
    set_has_intensity();
  } else {
    clear_has_intensity();
  }
}

// optional .pb.VectorMsg rotational_position = 6;
inline bool LidarMsg::has_rotational_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LidarMsg::set_has_rotational_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LidarMsg::clear_has_rotational_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LidarMsg::clear_rotational_position() {
  if (rotational_position_ != NULL) rotational_position_->::pb::VectorMsg::Clear();
  clear_has_rotational_position();
}
inline const ::pb::VectorMsg& LidarMsg::rotational_position() const {
  return rotational_position_ != NULL ? *rotational_position_ : *default_instance_->rotational_position_;
}
inline ::pb::VectorMsg* LidarMsg::mutable_rotational_position() {
  set_has_rotational_position();
  if (rotational_position_ == NULL) rotational_position_ = new ::pb::VectorMsg;
  return rotational_position_;
}
inline ::pb::VectorMsg* LidarMsg::release_rotational_position() {
  clear_has_rotational_position();
  ::pb::VectorMsg* temp = rotational_position_;
  rotational_position_ = NULL;
  return temp;
}
inline void LidarMsg::set_allocated_rotational_position(::pb::VectorMsg* rotational_position) {
  delete rotational_position_;
  rotational_position_ = rotational_position;
  if (rotational_position) {
    set_has_rotational_position();
  } else {
    clear_has_rotational_position();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Lidar_2eproto__INCLUDED
