// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SimMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Vector6Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector6Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matrix33Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matrix33Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyStateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyStateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* URDFMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  URDFMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterLocalSimReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterLocalSimReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterLocalSimRepMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterLocalSimRepMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalSimAddNewRobotReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalSimAddNewRobotReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalSimAddNewRobotRepMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalSimAddNewRobotRepMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalSimDeleteRobotReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalSimDeleteRobotReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalSimDeleteRobotRepMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalSimDeleteRobotRepMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotFullStateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotFullStateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldFullStateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldFullStateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRobotReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRobotReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRobotRepMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRobotRepMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeCamMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeCamMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeCamImageMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeCamImageMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SimMessages_2eproto() {
  protobuf_AddDesc_SimMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SimMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Vector6Msg_descriptor_ = file->message_type(0);
  static const int Vector6Msg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector6Msg, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector6Msg, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector6Msg, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector6Msg, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector6Msg, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector6Msg, r_),
  };
  Vector6Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector6Msg_descriptor_,
      Vector6Msg::default_instance_,
      Vector6Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector6Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector6Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector6Msg));
  Vector3Msg_descriptor_ = file->message_type(1);
  static const int Vector3Msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Msg, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Msg, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Msg, z_),
  };
  Vector3Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3Msg_descriptor_,
      Vector3Msg::default_instance_,
      Vector3Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3Msg));
  Matrix33Msg_descriptor_ = file->message_type(2);
  static const int Matrix33Msg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, x11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, x12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, x13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, x21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, x22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, x23_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, x31_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, x32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, x33_),
  };
  Matrix33Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Matrix33Msg_descriptor_,
      Matrix33Msg::default_instance_,
      Matrix33Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix33Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Matrix33Msg));
  BodyStateMsg_descriptor_ = file->message_type(3);
  static const int BodyStateMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStateMsg, body_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStateMsg, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStateMsg, basis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStateMsg, linear_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStateMsg, angular_velocity_),
  };
  BodyStateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyStateMsg_descriptor_,
      BodyStateMsg::default_instance_,
      BodyStateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyStateMsg));
  URDFMsg_descriptor_ = file->message_type(4);
  static const int URDFMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URDFMsg, robot_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URDFMsg, xml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URDFMsg, mesh_),
  };
  URDFMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      URDFMsg_descriptor_,
      URDFMsg::default_instance_,
      URDFMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URDFMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URDFMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(URDFMsg));
  RegisterLocalSimReqMsg_descriptor_ = file->message_type(5);
  static const int RegisterLocalSimReqMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimReqMsg, proxy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimReqMsg, urdf_),
  };
  RegisterLocalSimReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterLocalSimReqMsg_descriptor_,
      RegisterLocalSimReqMsg::default_instance_,
      RegisterLocalSimReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterLocalSimReqMsg));
  RegisterLocalSimRepMsg_descriptor_ = file->message_type(6);
  static const int RegisterLocalSimRepMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimRepMsg, robot_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimRepMsg, time_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimRepMsg, init_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimRepMsg, urdf_),
  };
  RegisterLocalSimRepMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterLocalSimRepMsg_descriptor_,
      RegisterLocalSimRepMsg::default_instance_,
      RegisterLocalSimRepMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimRepMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterLocalSimRepMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterLocalSimRepMsg));
  LocalSimAddNewRobotReqMsg_descriptor_ = file->message_type(7);
  static const int LocalSimAddNewRobotReqMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimAddNewRobotReqMsg, robot_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimAddNewRobotReqMsg, urdf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimAddNewRobotReqMsg, init_pose_),
  };
  LocalSimAddNewRobotReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalSimAddNewRobotReqMsg_descriptor_,
      LocalSimAddNewRobotReqMsg::default_instance_,
      LocalSimAddNewRobotReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimAddNewRobotReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimAddNewRobotReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalSimAddNewRobotReqMsg));
  LocalSimAddNewRobotRepMsg_descriptor_ = file->message_type(8);
  static const int LocalSimAddNewRobotRepMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimAddNewRobotRepMsg, message_),
  };
  LocalSimAddNewRobotRepMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalSimAddNewRobotRepMsg_descriptor_,
      LocalSimAddNewRobotRepMsg::default_instance_,
      LocalSimAddNewRobotRepMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimAddNewRobotRepMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimAddNewRobotRepMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalSimAddNewRobotRepMsg));
  LocalSimDeleteRobotReqMsg_descriptor_ = file->message_type(9);
  static const int LocalSimDeleteRobotReqMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimDeleteRobotReqMsg, robot_name_),
  };
  LocalSimDeleteRobotReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalSimDeleteRobotReqMsg_descriptor_,
      LocalSimDeleteRobotReqMsg::default_instance_,
      LocalSimDeleteRobotReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimDeleteRobotReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimDeleteRobotReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalSimDeleteRobotReqMsg));
  LocalSimDeleteRobotRepMsg_descriptor_ = file->message_type(10);
  static const int LocalSimDeleteRobotRepMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimDeleteRobotRepMsg, message_),
  };
  LocalSimDeleteRobotRepMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalSimDeleteRobotRepMsg_descriptor_,
      LocalSimDeleteRobotRepMsg::default_instance_,
      LocalSimDeleteRobotRepMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimDeleteRobotRepMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSimDeleteRobotRepMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalSimDeleteRobotRepMsg));
  RobotFullStateMsg_descriptor_ = file->message_type(11);
  static const int RobotFullStateMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFullStateMsg, robot_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFullStateMsg, time_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFullStateMsg, body_state_),
  };
  RobotFullStateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotFullStateMsg_descriptor_,
      RobotFullStateMsg::default_instance_,
      RobotFullStateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFullStateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotFullStateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotFullStateMsg));
  WorldFullStateMsg_descriptor_ = file->message_type(12);
  static const int WorldFullStateMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldFullStateMsg, robot_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldFullStateMsg, time_step_),
  };
  WorldFullStateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldFullStateMsg_descriptor_,
      WorldFullStateMsg::default_instance_,
      WorldFullStateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldFullStateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldFullStateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldFullStateMsg));
  RegisterRobotReqMsg_descriptor_ = file->message_type(13);
  static const int RegisterRobotReqMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRobotReqMsg, name_),
  };
  RegisterRobotReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRobotReqMsg_descriptor_,
      RegisterRobotReqMsg::default_instance_,
      RegisterRobotReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRobotReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRobotReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRobotReqMsg));
  RegisterRobotRepMsg_descriptor_ = file->message_type(14);
  static const int RegisterRobotRepMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRobotRepMsg, message_),
  };
  RegisterRobotRepMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRobotRepMsg_descriptor_,
      RegisterRobotRepMsg::default_instance_,
      RegisterRobotRepMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRobotRepMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRobotRepMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRobotRepMsg));
  GPSReqMsg_descriptor_ = file->message_type(15);
  static const int GPSReqMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSReqMsg, message_),
  };
  GPSReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSReqMsg_descriptor_,
      GPSReqMsg::default_instance_,
      GPSReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSReqMsg));
  GPSMsg_descriptor_ = file->message_type(16);
  static const int GPSMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMsg, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMsg, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMsg, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMsg, time_step_),
  };
  GPSMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSMsg_descriptor_,
      GPSMsg::default_instance_,
      GPSMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSMsg));
  NodeCamMsg_descriptor_ = file->message_type(17);
  static const int NodeCamMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamMsg, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamMsg, time_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamMsg, size_),
  };
  NodeCamMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeCamMsg_descriptor_,
      NodeCamMsg::default_instance_,
      NodeCamMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeCamMsg));
  NodeCamImageMsg_descriptor_ = file->message_type(18);
  static const int NodeCamImageMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamImageMsg, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamImageMsg, image_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamImageMsg, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamImageMsg, image_width_),
  };
  NodeCamImageMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeCamImageMsg_descriptor_,
      NodeCamImageMsg::default_instance_,
      NodeCamImageMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamImageMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCamImageMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeCamImageMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SimMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector6Msg_descriptor_, &Vector6Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3Msg_descriptor_, &Vector3Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Matrix33Msg_descriptor_, &Matrix33Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyStateMsg_descriptor_, &BodyStateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    URDFMsg_descriptor_, &URDFMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterLocalSimReqMsg_descriptor_, &RegisterLocalSimReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterLocalSimRepMsg_descriptor_, &RegisterLocalSimRepMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalSimAddNewRobotReqMsg_descriptor_, &LocalSimAddNewRobotReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalSimAddNewRobotRepMsg_descriptor_, &LocalSimAddNewRobotRepMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalSimDeleteRobotReqMsg_descriptor_, &LocalSimDeleteRobotReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalSimDeleteRobotRepMsg_descriptor_, &LocalSimDeleteRobotRepMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotFullStateMsg_descriptor_, &RobotFullStateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldFullStateMsg_descriptor_, &WorldFullStateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRobotReqMsg_descriptor_, &RegisterRobotReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRobotRepMsg_descriptor_, &RegisterRobotRepMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSReqMsg_descriptor_, &GPSReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSMsg_descriptor_, &GPSMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeCamMsg_descriptor_, &NodeCamMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeCamImageMsg_descriptor_, &NodeCamImageMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SimMessages_2eproto() {
  delete Vector6Msg::default_instance_;
  delete Vector6Msg_reflection_;
  delete Vector3Msg::default_instance_;
  delete Vector3Msg_reflection_;
  delete Matrix33Msg::default_instance_;
  delete Matrix33Msg_reflection_;
  delete BodyStateMsg::default_instance_;
  delete BodyStateMsg_reflection_;
  delete URDFMsg::default_instance_;
  delete URDFMsg_reflection_;
  delete RegisterLocalSimReqMsg::default_instance_;
  delete RegisterLocalSimReqMsg_reflection_;
  delete RegisterLocalSimRepMsg::default_instance_;
  delete RegisterLocalSimRepMsg_reflection_;
  delete LocalSimAddNewRobotReqMsg::default_instance_;
  delete LocalSimAddNewRobotReqMsg_reflection_;
  delete LocalSimAddNewRobotRepMsg::default_instance_;
  delete LocalSimAddNewRobotRepMsg_reflection_;
  delete LocalSimDeleteRobotReqMsg::default_instance_;
  delete LocalSimDeleteRobotReqMsg_reflection_;
  delete LocalSimDeleteRobotRepMsg::default_instance_;
  delete LocalSimDeleteRobotRepMsg_reflection_;
  delete RobotFullStateMsg::default_instance_;
  delete RobotFullStateMsg_reflection_;
  delete WorldFullStateMsg::default_instance_;
  delete WorldFullStateMsg_reflection_;
  delete RegisterRobotReqMsg::default_instance_;
  delete RegisterRobotReqMsg_reflection_;
  delete RegisterRobotRepMsg::default_instance_;
  delete RegisterRobotRepMsg_reflection_;
  delete GPSReqMsg::default_instance_;
  delete GPSReqMsg_reflection_;
  delete GPSMsg::default_instance_;
  delete GPSMsg_reflection_;
  delete NodeCamMsg::default_instance_;
  delete NodeCamMsg_reflection_;
  delete NodeCamImageMsg::default_instance_;
  delete NodeCamImageMsg_reflection_;
}

void protobuf_AddDesc_SimMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SimMessages.proto\"N\n\nVector6Msg\022\t\n\001x\030\001"
    " \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\022\t\n\001p\030\004 \002(\001\022\t\n"
    "\001q\030\005 \002(\001\022\t\n\001r\030\006 \002(\001\"-\n\nVector3Msg\022\t\n\001x\030\001"
    " \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"\202\001\n\013Matrix33M"
    "sg\022\013\n\003x11\030\001 \002(\001\022\013\n\003x12\030\002 \002(\001\022\013\n\003x13\030\003 \002("
    "\001\022\013\n\003x21\030\004 \002(\001\022\013\n\003x22\030\005 \002(\001\022\013\n\003x23\030\006 \002(\001"
    "\022\013\n\003x31\030\007 \002(\001\022\013\n\003x32\030\010 \002(\001\022\013\n\003x33\030\t \002(\001\""
    "\250\001\n\014BodyStateMsg\022\021\n\tbody_name\030\001 \002(\t\022\033\n\006o"
    "rigin\030\002 \002(\0132\013.Vector3Msg\022\033\n\005basis\030\003 \002(\0132"
    "\014.Matrix33Msg\022$\n\017linear_velocity\030\004 \001(\0132\013"
    ".Vector3Msg\022%\n\020angular_velocity\030\005 \001(\0132\013."
    "Vector3Msg\"8\n\007URDFMsg\022\022\n\nrobot_name\030\001 \001("
    "\t\022\013\n\003xml\030\002 \001(\014\022\014\n\004mesh\030\003 \003(\014\"D\n\026Register"
    "LocalSimReqMsg\022\022\n\nproxy_name\030\001 \002(\t\022\026\n\004ur"
    "df\030\002 \001(\0132\010.URDFMsg\"w\n\026RegisterLocalSimRe"
    "pMsg\022\022\n\nrobot_name\030\001 \002(\t\022\021\n\ttime_step\030\002 "
    "\002(\005\022\036\n\tinit_pose\030\003 \002(\0132\013.Vector6Msg\022\026\n\004u"
    "rdf\030\004 \003(\0132\010.URDFMsg\"g\n\031LocalSimAddNewRob"
    "otReqMsg\022\022\n\nrobot_name\030\001 \002(\t\022\026\n\004urdf\030\002 \002"
    "(\0132\010.URDFMsg\022\036\n\tinit_pose\030\003 \002(\0132\013.Vector"
    "6Msg\",\n\031LocalSimAddNewRobotRepMsg\022\017\n\007mes"
    "sage\030\001 \001(\t\"/\n\031LocalSimDeleteRobotReqMsg\022"
    "\022\n\nrobot_name\030\001 \002(\t\",\n\031LocalSimDeleteRob"
    "otRepMsg\022\017\n\007message\030\001 \001(\t\"]\n\021RobotFullSt"
    "ateMsg\022\022\n\nrobot_name\030\001 \002(\t\022\021\n\ttime_step\030"
    "\002 \002(\005\022!\n\nbody_state\030\003 \003(\0132\r.BodyStateMsg"
    "\"O\n\021WorldFullStateMsg\022\'\n\013robot_state\030\001 \003"
    "(\0132\022.RobotFullStateMsg\022\021\n\ttime_step\030\002 \002("
    "\005\"#\n\023RegisterRobotReqMsg\022\014\n\004name\030\001 \002(\t\"&"
    "\n\023RegisterRobotRepMsg\022\017\n\007message\030\001 \001(\t\"\034"
    "\n\tGPSReqMsg\022\017\n\007message\030\001 \002(\t\"<\n\006GPSMsg\022\t"
    "\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\022\021\n\ttime_"
    "step\030\004 \002(\005\"N\n\nNodeCamMsg\022\037\n\005image\030\001 \003(\0132"
    "\020.NodeCamImageMsg\022\021\n\ttime_step\030\002 \002(\005\022\014\n\004"
    "size\030\003 \001(\005\"_\n\017NodeCamImageMsg\022\r\n\005image\030\001"
    " \001(\014\022\022\n\nimage_type\030\002 \001(\005\022\024\n\014image_height"
    "\030\003 \001(\005\022\023\n\013image_width\030\004 \001(\005", 1467);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SimMessages.proto", &protobuf_RegisterTypes);
  Vector6Msg::default_instance_ = new Vector6Msg();
  Vector3Msg::default_instance_ = new Vector3Msg();
  Matrix33Msg::default_instance_ = new Matrix33Msg();
  BodyStateMsg::default_instance_ = new BodyStateMsg();
  URDFMsg::default_instance_ = new URDFMsg();
  RegisterLocalSimReqMsg::default_instance_ = new RegisterLocalSimReqMsg();
  RegisterLocalSimRepMsg::default_instance_ = new RegisterLocalSimRepMsg();
  LocalSimAddNewRobotReqMsg::default_instance_ = new LocalSimAddNewRobotReqMsg();
  LocalSimAddNewRobotRepMsg::default_instance_ = new LocalSimAddNewRobotRepMsg();
  LocalSimDeleteRobotReqMsg::default_instance_ = new LocalSimDeleteRobotReqMsg();
  LocalSimDeleteRobotRepMsg::default_instance_ = new LocalSimDeleteRobotRepMsg();
  RobotFullStateMsg::default_instance_ = new RobotFullStateMsg();
  WorldFullStateMsg::default_instance_ = new WorldFullStateMsg();
  RegisterRobotReqMsg::default_instance_ = new RegisterRobotReqMsg();
  RegisterRobotRepMsg::default_instance_ = new RegisterRobotRepMsg();
  GPSReqMsg::default_instance_ = new GPSReqMsg();
  GPSMsg::default_instance_ = new GPSMsg();
  NodeCamMsg::default_instance_ = new NodeCamMsg();
  NodeCamImageMsg::default_instance_ = new NodeCamImageMsg();
  Vector6Msg::default_instance_->InitAsDefaultInstance();
  Vector3Msg::default_instance_->InitAsDefaultInstance();
  Matrix33Msg::default_instance_->InitAsDefaultInstance();
  BodyStateMsg::default_instance_->InitAsDefaultInstance();
  URDFMsg::default_instance_->InitAsDefaultInstance();
  RegisterLocalSimReqMsg::default_instance_->InitAsDefaultInstance();
  RegisterLocalSimRepMsg::default_instance_->InitAsDefaultInstance();
  LocalSimAddNewRobotReqMsg::default_instance_->InitAsDefaultInstance();
  LocalSimAddNewRobotRepMsg::default_instance_->InitAsDefaultInstance();
  LocalSimDeleteRobotReqMsg::default_instance_->InitAsDefaultInstance();
  LocalSimDeleteRobotRepMsg::default_instance_->InitAsDefaultInstance();
  RobotFullStateMsg::default_instance_->InitAsDefaultInstance();
  WorldFullStateMsg::default_instance_->InitAsDefaultInstance();
  RegisterRobotReqMsg::default_instance_->InitAsDefaultInstance();
  RegisterRobotRepMsg::default_instance_->InitAsDefaultInstance();
  GPSReqMsg::default_instance_->InitAsDefaultInstance();
  GPSMsg::default_instance_->InitAsDefaultInstance();
  NodeCamMsg::default_instance_->InitAsDefaultInstance();
  NodeCamImageMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SimMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SimMessages_2eproto {
  StaticDescriptorInitializer_SimMessages_2eproto() {
    protobuf_AddDesc_SimMessages_2eproto();
  }
} static_descriptor_initializer_SimMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vector6Msg::kXFieldNumber;
const int Vector6Msg::kYFieldNumber;
const int Vector6Msg::kZFieldNumber;
const int Vector6Msg::kPFieldNumber;
const int Vector6Msg::kQFieldNumber;
const int Vector6Msg::kRFieldNumber;
#endif  // !_MSC_VER

Vector6Msg::Vector6Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector6Msg::InitAsDefaultInstance() {
}

Vector6Msg::Vector6Msg(const Vector6Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector6Msg::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  p_ = 0;
  q_ = 0;
  r_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector6Msg::~Vector6Msg() {
  SharedDtor();
}

void Vector6Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector6Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector6Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector6Msg_descriptor_;
}

const Vector6Msg& Vector6Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

Vector6Msg* Vector6Msg::default_instance_ = NULL;

Vector6Msg* Vector6Msg::New() const {
  return new Vector6Msg;
}

void Vector6Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    p_ = 0;
    q_ = 0;
    r_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector6Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_p;
        break;
      }

      // required double p = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_)));
          set_has_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_q;
        break;
      }

      // required double q = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_)));
          set_has_q();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_r;
        break;
      }

      // required double r = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector6Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // required double p = 4;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->p(), output);
  }

  // required double q = 5;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->q(), output);
  }

  // required double r = 6;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->r(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector6Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // required double p = 4;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->p(), target);
  }

  // required double q = 5;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->q(), target);
  }

  // required double r = 6;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->r(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector6Msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // required double p = 4;
    if (has_p()) {
      total_size += 1 + 8;
    }

    // required double q = 5;
    if (has_q()) {
      total_size += 1 + 8;
    }

    // required double r = 6;
    if (has_r()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector6Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector6Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector6Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector6Msg::MergeFrom(const Vector6Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector6Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector6Msg::CopyFrom(const Vector6Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector6Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Vector6Msg::Swap(Vector6Msg* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(p_, other->p_);
    std::swap(q_, other->q_);
    std::swap(r_, other->r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector6Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector6Msg_descriptor_;
  metadata.reflection = Vector6Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3Msg::kXFieldNumber;
const int Vector3Msg::kYFieldNumber;
const int Vector3Msg::kZFieldNumber;
#endif  // !_MSC_VER

Vector3Msg::Vector3Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3Msg::InitAsDefaultInstance() {
}

Vector3Msg::Vector3Msg(const Vector3Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3Msg::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3Msg::~Vector3Msg() {
  SharedDtor();
}

void Vector3Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3Msg_descriptor_;
}

const Vector3Msg& Vector3Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

Vector3Msg* Vector3Msg::default_instance_ = NULL;

Vector3Msg* Vector3Msg::New() const {
  return new Vector3Msg;
}

void Vector3Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3Msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3Msg::MergeFrom(const Vector3Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3Msg::CopyFrom(const Vector3Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3Msg::Swap(Vector3Msg* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3Msg_descriptor_;
  metadata.reflection = Vector3Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Matrix33Msg::kX11FieldNumber;
const int Matrix33Msg::kX12FieldNumber;
const int Matrix33Msg::kX13FieldNumber;
const int Matrix33Msg::kX21FieldNumber;
const int Matrix33Msg::kX22FieldNumber;
const int Matrix33Msg::kX23FieldNumber;
const int Matrix33Msg::kX31FieldNumber;
const int Matrix33Msg::kX32FieldNumber;
const int Matrix33Msg::kX33FieldNumber;
#endif  // !_MSC_VER

Matrix33Msg::Matrix33Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Matrix33Msg::InitAsDefaultInstance() {
}

Matrix33Msg::Matrix33Msg(const Matrix33Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Matrix33Msg::SharedCtor() {
  _cached_size_ = 0;
  x11_ = 0;
  x12_ = 0;
  x13_ = 0;
  x21_ = 0;
  x22_ = 0;
  x23_ = 0;
  x31_ = 0;
  x32_ = 0;
  x33_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Matrix33Msg::~Matrix33Msg() {
  SharedDtor();
}

void Matrix33Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Matrix33Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix33Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matrix33Msg_descriptor_;
}

const Matrix33Msg& Matrix33Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

Matrix33Msg* Matrix33Msg::default_instance_ = NULL;

Matrix33Msg* Matrix33Msg::New() const {
  return new Matrix33Msg;
}

void Matrix33Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x11_ = 0;
    x12_ = 0;
    x13_ = 0;
    x21_ = 0;
    x22_ = 0;
    x23_ = 0;
    x31_ = 0;
    x32_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    x33_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Matrix33Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x11 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x11_)));
          set_has_x11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_x12;
        break;
      }

      // required double x12 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x12_)));
          set_has_x12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x13;
        break;
      }

      // required double x13 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x13_)));
          set_has_x13();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_x21;
        break;
      }

      // required double x21 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x21_)));
          set_has_x21();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_x22;
        break;
      }

      // required double x22 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x22:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x22_)));
          set_has_x22();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_x23;
        break;
      }

      // required double x23 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x23_)));
          set_has_x23();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_x31;
        break;
      }

      // required double x31 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x31:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x31_)));
          set_has_x31();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_x32;
        break;
      }

      // required double x32 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x32_)));
          set_has_x32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_x33;
        break;
      }

      // required double x33 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x33:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x33_)));
          set_has_x33();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Matrix33Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x11 = 1;
  if (has_x11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x11(), output);
  }

  // required double x12 = 2;
  if (has_x12()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x12(), output);
  }

  // required double x13 = 3;
  if (has_x13()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x13(), output);
  }

  // required double x21 = 4;
  if (has_x21()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x21(), output);
  }

  // required double x22 = 5;
  if (has_x22()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->x22(), output);
  }

  // required double x23 = 6;
  if (has_x23()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->x23(), output);
  }

  // required double x31 = 7;
  if (has_x31()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->x31(), output);
  }

  // required double x32 = 8;
  if (has_x32()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->x32(), output);
  }

  // required double x33 = 9;
  if (has_x33()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->x33(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Matrix33Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x11 = 1;
  if (has_x11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x11(), target);
  }

  // required double x12 = 2;
  if (has_x12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x12(), target);
  }

  // required double x13 = 3;
  if (has_x13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x13(), target);
  }

  // required double x21 = 4;
  if (has_x21()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x21(), target);
  }

  // required double x22 = 5;
  if (has_x22()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->x22(), target);
  }

  // required double x23 = 6;
  if (has_x23()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->x23(), target);
  }

  // required double x31 = 7;
  if (has_x31()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->x31(), target);
  }

  // required double x32 = 8;
  if (has_x32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->x32(), target);
  }

  // required double x33 = 9;
  if (has_x33()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->x33(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Matrix33Msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x11 = 1;
    if (has_x11()) {
      total_size += 1 + 8;
    }

    // required double x12 = 2;
    if (has_x12()) {
      total_size += 1 + 8;
    }

    // required double x13 = 3;
    if (has_x13()) {
      total_size += 1 + 8;
    }

    // required double x21 = 4;
    if (has_x21()) {
      total_size += 1 + 8;
    }

    // required double x22 = 5;
    if (has_x22()) {
      total_size += 1 + 8;
    }

    // required double x23 = 6;
    if (has_x23()) {
      total_size += 1 + 8;
    }

    // required double x31 = 7;
    if (has_x31()) {
      total_size += 1 + 8;
    }

    // required double x32 = 8;
    if (has_x32()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double x33 = 9;
    if (has_x33()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix33Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Matrix33Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Matrix33Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Matrix33Msg::MergeFrom(const Matrix33Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x11()) {
      set_x11(from.x11());
    }
    if (from.has_x12()) {
      set_x12(from.x12());
    }
    if (from.has_x13()) {
      set_x13(from.x13());
    }
    if (from.has_x21()) {
      set_x21(from.x21());
    }
    if (from.has_x22()) {
      set_x22(from.x22());
    }
    if (from.has_x23()) {
      set_x23(from.x23());
    }
    if (from.has_x31()) {
      set_x31(from.x31());
    }
    if (from.has_x32()) {
      set_x32(from.x32());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_x33()) {
      set_x33(from.x33());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Matrix33Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix33Msg::CopyFrom(const Matrix33Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix33Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void Matrix33Msg::Swap(Matrix33Msg* other) {
  if (other != this) {
    std::swap(x11_, other->x11_);
    std::swap(x12_, other->x12_);
    std::swap(x13_, other->x13_);
    std::swap(x21_, other->x21_);
    std::swap(x22_, other->x22_);
    std::swap(x23_, other->x23_);
    std::swap(x31_, other->x31_);
    std::swap(x32_, other->x32_);
    std::swap(x33_, other->x33_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Matrix33Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matrix33Msg_descriptor_;
  metadata.reflection = Matrix33Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BodyStateMsg::kBodyNameFieldNumber;
const int BodyStateMsg::kOriginFieldNumber;
const int BodyStateMsg::kBasisFieldNumber;
const int BodyStateMsg::kLinearVelocityFieldNumber;
const int BodyStateMsg::kAngularVelocityFieldNumber;
#endif  // !_MSC_VER

BodyStateMsg::BodyStateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BodyStateMsg::InitAsDefaultInstance() {
  origin_ = const_cast< ::Vector3Msg*>(&::Vector3Msg::default_instance());
  basis_ = const_cast< ::Matrix33Msg*>(&::Matrix33Msg::default_instance());
  linear_velocity_ = const_cast< ::Vector3Msg*>(&::Vector3Msg::default_instance());
  angular_velocity_ = const_cast< ::Vector3Msg*>(&::Vector3Msg::default_instance());
}

BodyStateMsg::BodyStateMsg(const BodyStateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BodyStateMsg::SharedCtor() {
  _cached_size_ = 0;
  body_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  origin_ = NULL;
  basis_ = NULL;
  linear_velocity_ = NULL;
  angular_velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyStateMsg::~BodyStateMsg() {
  SharedDtor();
}

void BodyStateMsg::SharedDtor() {
  if (body_name_ != &::google::protobuf::internal::kEmptyString) {
    delete body_name_;
  }
  if (this != default_instance_) {
    delete origin_;
    delete basis_;
    delete linear_velocity_;
    delete angular_velocity_;
  }
}

void BodyStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyStateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyStateMsg_descriptor_;
}

const BodyStateMsg& BodyStateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

BodyStateMsg* BodyStateMsg::default_instance_ = NULL;

BodyStateMsg* BodyStateMsg::New() const {
  return new BodyStateMsg;
}

void BodyStateMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_body_name()) {
      if (body_name_ != &::google::protobuf::internal::kEmptyString) {
        body_name_->clear();
      }
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::Vector3Msg::Clear();
    }
    if (has_basis()) {
      if (basis_ != NULL) basis_->::Matrix33Msg::Clear();
    }
    if (has_linear_velocity()) {
      if (linear_velocity_ != NULL) linear_velocity_->::Vector3Msg::Clear();
    }
    if (has_angular_velocity()) {
      if (angular_velocity_ != NULL) angular_velocity_->::Vector3Msg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string body_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body_name().data(), this->body_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_origin;
        break;
      }

      // required .Vector3Msg origin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_basis;
        break;
      }

      // required .Matrix33Msg basis = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_linear_velocity;
        break;
      }

      // optional .Vector3Msg linear_velocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linear_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_angular_velocity;
        break;
      }

      // optional .Vector3Msg angular_velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BodyStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string body_name = 1;
  if (has_body_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body_name().data(), this->body_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->body_name(), output);
  }

  // required .Vector3Msg origin = 2;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->origin(), output);
  }

  // required .Matrix33Msg basis = 3;
  if (has_basis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basis(), output);
  }

  // optional .Vector3Msg linear_velocity = 4;
  if (has_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->linear_velocity(), output);
  }

  // optional .Vector3Msg angular_velocity = 5;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->angular_velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BodyStateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string body_name = 1;
  if (has_body_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body_name().data(), this->body_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->body_name(), target);
  }

  // required .Vector3Msg origin = 2;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->origin(), target);
  }

  // required .Matrix33Msg basis = 3;
  if (has_basis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basis(), target);
  }

  // optional .Vector3Msg linear_velocity = 4;
  if (has_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->linear_velocity(), target);
  }

  // optional .Vector3Msg angular_velocity = 5;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->angular_velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BodyStateMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string body_name = 1;
    if (has_body_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body_name());
    }

    // required .Vector3Msg origin = 2;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // required .Matrix33Msg basis = 3;
    if (has_basis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basis());
    }

    // optional .Vector3Msg linear_velocity = 4;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_velocity());
    }

    // optional .Vector3Msg angular_velocity = 5;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angular_velocity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyStateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyStateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyStateMsg::MergeFrom(const BodyStateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body_name()) {
      set_body_name(from.body_name());
    }
    if (from.has_origin()) {
      mutable_origin()->::Vector3Msg::MergeFrom(from.origin());
    }
    if (from.has_basis()) {
      mutable_basis()->::Matrix33Msg::MergeFrom(from.basis());
    }
    if (from.has_linear_velocity()) {
      mutable_linear_velocity()->::Vector3Msg::MergeFrom(from.linear_velocity());
    }
    if (from.has_angular_velocity()) {
      mutable_angular_velocity()->::Vector3Msg::MergeFrom(from.angular_velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyStateMsg::CopyFrom(const BodyStateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyStateMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  if (has_basis()) {
    if (!this->basis().IsInitialized()) return false;
  }
  if (has_linear_velocity()) {
    if (!this->linear_velocity().IsInitialized()) return false;
  }
  if (has_angular_velocity()) {
    if (!this->angular_velocity().IsInitialized()) return false;
  }
  return true;
}

void BodyStateMsg::Swap(BodyStateMsg* other) {
  if (other != this) {
    std::swap(body_name_, other->body_name_);
    std::swap(origin_, other->origin_);
    std::swap(basis_, other->basis_);
    std::swap(linear_velocity_, other->linear_velocity_);
    std::swap(angular_velocity_, other->angular_velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyStateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyStateMsg_descriptor_;
  metadata.reflection = BodyStateMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int URDFMsg::kRobotNameFieldNumber;
const int URDFMsg::kXmlFieldNumber;
const int URDFMsg::kMeshFieldNumber;
#endif  // !_MSC_VER

URDFMsg::URDFMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void URDFMsg::InitAsDefaultInstance() {
}

URDFMsg::URDFMsg(const URDFMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void URDFMsg::SharedCtor() {
  _cached_size_ = 0;
  robot_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

URDFMsg::~URDFMsg() {
  SharedDtor();
}

void URDFMsg::SharedDtor() {
  if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
    delete robot_name_;
  }
  if (xml_ != &::google::protobuf::internal::kEmptyString) {
    delete xml_;
  }
  if (this != default_instance_) {
  }
}

void URDFMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* URDFMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return URDFMsg_descriptor_;
}

const URDFMsg& URDFMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

URDFMsg* URDFMsg::default_instance_ = NULL;

URDFMsg* URDFMsg::New() const {
  return new URDFMsg;
}

void URDFMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_robot_name()) {
      if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
        robot_name_->clear();
      }
    }
    if (has_xml()) {
      if (xml_ != &::google::protobuf::internal::kEmptyString) {
        xml_->clear();
      }
    }
  }
  mesh_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool URDFMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string robot_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->robot_name().data(), this->robot_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xml;
        break;
      }

      // optional bytes xml = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xml()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mesh;
        break;
      }

      // repeated bytes mesh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_mesh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mesh;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void URDFMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->robot_name(), output);
  }

  // optional bytes xml = 2;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->xml(), output);
  }

  // repeated bytes mesh = 3;
  for (int i = 0; i < this->mesh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mesh(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* URDFMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robot_name(), target);
  }

  // optional bytes xml = 2;
  if (has_xml()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->xml(), target);
  }

  // repeated bytes mesh = 3;
  for (int i = 0; i < this->mesh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->mesh(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int URDFMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string robot_name = 1;
    if (has_robot_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_name());
    }

    // optional bytes xml = 2;
    if (has_xml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->xml());
    }

  }
  // repeated bytes mesh = 3;
  total_size += 1 * this->mesh_size();
  for (int i = 0; i < this->mesh_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->mesh(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void URDFMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const URDFMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const URDFMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void URDFMsg::MergeFrom(const URDFMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mesh_.MergeFrom(from.mesh_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_name()) {
      set_robot_name(from.robot_name());
    }
    if (from.has_xml()) {
      set_xml(from.xml());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void URDFMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URDFMsg::CopyFrom(const URDFMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URDFMsg::IsInitialized() const {

  return true;
}

void URDFMsg::Swap(URDFMsg* other) {
  if (other != this) {
    std::swap(robot_name_, other->robot_name_);
    std::swap(xml_, other->xml_);
    mesh_.Swap(&other->mesh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata URDFMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = URDFMsg_descriptor_;
  metadata.reflection = URDFMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterLocalSimReqMsg::kProxyNameFieldNumber;
const int RegisterLocalSimReqMsg::kUrdfFieldNumber;
#endif  // !_MSC_VER

RegisterLocalSimReqMsg::RegisterLocalSimReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterLocalSimReqMsg::InitAsDefaultInstance() {
  urdf_ = const_cast< ::URDFMsg*>(&::URDFMsg::default_instance());
}

RegisterLocalSimReqMsg::RegisterLocalSimReqMsg(const RegisterLocalSimReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterLocalSimReqMsg::SharedCtor() {
  _cached_size_ = 0;
  proxy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  urdf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterLocalSimReqMsg::~RegisterLocalSimReqMsg() {
  SharedDtor();
}

void RegisterLocalSimReqMsg::SharedDtor() {
  if (proxy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete proxy_name_;
  }
  if (this != default_instance_) {
    delete urdf_;
  }
}

void RegisterLocalSimReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterLocalSimReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterLocalSimReqMsg_descriptor_;
}

const RegisterLocalSimReqMsg& RegisterLocalSimReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

RegisterLocalSimReqMsg* RegisterLocalSimReqMsg::default_instance_ = NULL;

RegisterLocalSimReqMsg* RegisterLocalSimReqMsg::New() const {
  return new RegisterLocalSimReqMsg;
}

void RegisterLocalSimReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_proxy_name()) {
      if (proxy_name_ != &::google::protobuf::internal::kEmptyString) {
        proxy_name_->clear();
      }
    }
    if (has_urdf()) {
      if (urdf_ != NULL) urdf_->::URDFMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterLocalSimReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string proxy_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proxy_name().data(), this->proxy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_urdf;
        break;
      }

      // optional .URDFMsg urdf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urdf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_urdf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterLocalSimReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string proxy_name = 1;
  if (has_proxy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proxy_name().data(), this->proxy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->proxy_name(), output);
  }

  // optional .URDFMsg urdf = 2;
  if (has_urdf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->urdf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterLocalSimReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string proxy_name = 1;
  if (has_proxy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proxy_name().data(), this->proxy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proxy_name(), target);
  }

  // optional .URDFMsg urdf = 2;
  if (has_urdf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->urdf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterLocalSimReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string proxy_name = 1;
    if (has_proxy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxy_name());
    }

    // optional .URDFMsg urdf = 2;
    if (has_urdf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urdf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterLocalSimReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterLocalSimReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterLocalSimReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterLocalSimReqMsg::MergeFrom(const RegisterLocalSimReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proxy_name()) {
      set_proxy_name(from.proxy_name());
    }
    if (from.has_urdf()) {
      mutable_urdf()->::URDFMsg::MergeFrom(from.urdf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterLocalSimReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterLocalSimReqMsg::CopyFrom(const RegisterLocalSimReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterLocalSimReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegisterLocalSimReqMsg::Swap(RegisterLocalSimReqMsg* other) {
  if (other != this) {
    std::swap(proxy_name_, other->proxy_name_);
    std::swap(urdf_, other->urdf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterLocalSimReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterLocalSimReqMsg_descriptor_;
  metadata.reflection = RegisterLocalSimReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterLocalSimRepMsg::kRobotNameFieldNumber;
const int RegisterLocalSimRepMsg::kTimeStepFieldNumber;
const int RegisterLocalSimRepMsg::kInitPoseFieldNumber;
const int RegisterLocalSimRepMsg::kUrdfFieldNumber;
#endif  // !_MSC_VER

RegisterLocalSimRepMsg::RegisterLocalSimRepMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterLocalSimRepMsg::InitAsDefaultInstance() {
  init_pose_ = const_cast< ::Vector6Msg*>(&::Vector6Msg::default_instance());
}

RegisterLocalSimRepMsg::RegisterLocalSimRepMsg(const RegisterLocalSimRepMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterLocalSimRepMsg::SharedCtor() {
  _cached_size_ = 0;
  robot_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_step_ = 0;
  init_pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterLocalSimRepMsg::~RegisterLocalSimRepMsg() {
  SharedDtor();
}

void RegisterLocalSimRepMsg::SharedDtor() {
  if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
    delete robot_name_;
  }
  if (this != default_instance_) {
    delete init_pose_;
  }
}

void RegisterLocalSimRepMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterLocalSimRepMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterLocalSimRepMsg_descriptor_;
}

const RegisterLocalSimRepMsg& RegisterLocalSimRepMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

RegisterLocalSimRepMsg* RegisterLocalSimRepMsg::default_instance_ = NULL;

RegisterLocalSimRepMsg* RegisterLocalSimRepMsg::New() const {
  return new RegisterLocalSimRepMsg;
}

void RegisterLocalSimRepMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_robot_name()) {
      if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
        robot_name_->clear();
      }
    }
    time_step_ = 0;
    if (has_init_pose()) {
      if (init_pose_ != NULL) init_pose_->::Vector6Msg::Clear();
    }
  }
  urdf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterLocalSimRepMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string robot_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->robot_name().data(), this->robot_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_step;
        break;
      }

      // required int32 time_step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_step_)));
          set_has_time_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_init_pose;
        break;
      }

      // required .Vector6Msg init_pose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_urdf;
        break;
      }

      // repeated .URDFMsg urdf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urdf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urdf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_urdf;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterLocalSimRepMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->robot_name(), output);
  }

  // required int32 time_step = 2;
  if (has_time_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_step(), output);
  }

  // required .Vector6Msg init_pose = 3;
  if (has_init_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->init_pose(), output);
  }

  // repeated .URDFMsg urdf = 4;
  for (int i = 0; i < this->urdf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->urdf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterLocalSimRepMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robot_name(), target);
  }

  // required int32 time_step = 2;
  if (has_time_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_step(), target);
  }

  // required .Vector6Msg init_pose = 3;
  if (has_init_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->init_pose(), target);
  }

  // repeated .URDFMsg urdf = 4;
  for (int i = 0; i < this->urdf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->urdf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterLocalSimRepMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string robot_name = 1;
    if (has_robot_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_name());
    }

    // required int32 time_step = 2;
    if (has_time_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_step());
    }

    // required .Vector6Msg init_pose = 3;
    if (has_init_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_pose());
    }

  }
  // repeated .URDFMsg urdf = 4;
  total_size += 1 * this->urdf_size();
  for (int i = 0; i < this->urdf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->urdf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterLocalSimRepMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterLocalSimRepMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterLocalSimRepMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterLocalSimRepMsg::MergeFrom(const RegisterLocalSimRepMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  urdf_.MergeFrom(from.urdf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_name()) {
      set_robot_name(from.robot_name());
    }
    if (from.has_time_step()) {
      set_time_step(from.time_step());
    }
    if (from.has_init_pose()) {
      mutable_init_pose()->::Vector6Msg::MergeFrom(from.init_pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterLocalSimRepMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterLocalSimRepMsg::CopyFrom(const RegisterLocalSimRepMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterLocalSimRepMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_init_pose()) {
    if (!this->init_pose().IsInitialized()) return false;
  }
  return true;
}

void RegisterLocalSimRepMsg::Swap(RegisterLocalSimRepMsg* other) {
  if (other != this) {
    std::swap(robot_name_, other->robot_name_);
    std::swap(time_step_, other->time_step_);
    std::swap(init_pose_, other->init_pose_);
    urdf_.Swap(&other->urdf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterLocalSimRepMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterLocalSimRepMsg_descriptor_;
  metadata.reflection = RegisterLocalSimRepMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalSimAddNewRobotReqMsg::kRobotNameFieldNumber;
const int LocalSimAddNewRobotReqMsg::kUrdfFieldNumber;
const int LocalSimAddNewRobotReqMsg::kInitPoseFieldNumber;
#endif  // !_MSC_VER

LocalSimAddNewRobotReqMsg::LocalSimAddNewRobotReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalSimAddNewRobotReqMsg::InitAsDefaultInstance() {
  urdf_ = const_cast< ::URDFMsg*>(&::URDFMsg::default_instance());
  init_pose_ = const_cast< ::Vector6Msg*>(&::Vector6Msg::default_instance());
}

LocalSimAddNewRobotReqMsg::LocalSimAddNewRobotReqMsg(const LocalSimAddNewRobotReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalSimAddNewRobotReqMsg::SharedCtor() {
  _cached_size_ = 0;
  robot_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  urdf_ = NULL;
  init_pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalSimAddNewRobotReqMsg::~LocalSimAddNewRobotReqMsg() {
  SharedDtor();
}

void LocalSimAddNewRobotReqMsg::SharedDtor() {
  if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
    delete robot_name_;
  }
  if (this != default_instance_) {
    delete urdf_;
    delete init_pose_;
  }
}

void LocalSimAddNewRobotReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalSimAddNewRobotReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalSimAddNewRobotReqMsg_descriptor_;
}

const LocalSimAddNewRobotReqMsg& LocalSimAddNewRobotReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

LocalSimAddNewRobotReqMsg* LocalSimAddNewRobotReqMsg::default_instance_ = NULL;

LocalSimAddNewRobotReqMsg* LocalSimAddNewRobotReqMsg::New() const {
  return new LocalSimAddNewRobotReqMsg;
}

void LocalSimAddNewRobotReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_robot_name()) {
      if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
        robot_name_->clear();
      }
    }
    if (has_urdf()) {
      if (urdf_ != NULL) urdf_->::URDFMsg::Clear();
    }
    if (has_init_pose()) {
      if (init_pose_ != NULL) init_pose_->::Vector6Msg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalSimAddNewRobotReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string robot_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->robot_name().data(), this->robot_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_urdf;
        break;
      }

      // required .URDFMsg urdf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urdf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_urdf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_init_pose;
        break;
      }

      // required .Vector6Msg init_pose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalSimAddNewRobotReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->robot_name(), output);
  }

  // required .URDFMsg urdf = 2;
  if (has_urdf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->urdf(), output);
  }

  // required .Vector6Msg init_pose = 3;
  if (has_init_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->init_pose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalSimAddNewRobotReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robot_name(), target);
  }

  // required .URDFMsg urdf = 2;
  if (has_urdf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->urdf(), target);
  }

  // required .Vector6Msg init_pose = 3;
  if (has_init_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->init_pose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalSimAddNewRobotReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string robot_name = 1;
    if (has_robot_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_name());
    }

    // required .URDFMsg urdf = 2;
    if (has_urdf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urdf());
    }

    // required .Vector6Msg init_pose = 3;
    if (has_init_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_pose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalSimAddNewRobotReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalSimAddNewRobotReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalSimAddNewRobotReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalSimAddNewRobotReqMsg::MergeFrom(const LocalSimAddNewRobotReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_name()) {
      set_robot_name(from.robot_name());
    }
    if (from.has_urdf()) {
      mutable_urdf()->::URDFMsg::MergeFrom(from.urdf());
    }
    if (from.has_init_pose()) {
      mutable_init_pose()->::Vector6Msg::MergeFrom(from.init_pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalSimAddNewRobotReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSimAddNewRobotReqMsg::CopyFrom(const LocalSimAddNewRobotReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSimAddNewRobotReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_init_pose()) {
    if (!this->init_pose().IsInitialized()) return false;
  }
  return true;
}

void LocalSimAddNewRobotReqMsg::Swap(LocalSimAddNewRobotReqMsg* other) {
  if (other != this) {
    std::swap(robot_name_, other->robot_name_);
    std::swap(urdf_, other->urdf_);
    std::swap(init_pose_, other->init_pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalSimAddNewRobotReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalSimAddNewRobotReqMsg_descriptor_;
  metadata.reflection = LocalSimAddNewRobotReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalSimAddNewRobotRepMsg::kMessageFieldNumber;
#endif  // !_MSC_VER

LocalSimAddNewRobotRepMsg::LocalSimAddNewRobotRepMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalSimAddNewRobotRepMsg::InitAsDefaultInstance() {
}

LocalSimAddNewRobotRepMsg::LocalSimAddNewRobotRepMsg(const LocalSimAddNewRobotRepMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalSimAddNewRobotRepMsg::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalSimAddNewRobotRepMsg::~LocalSimAddNewRobotRepMsg() {
  SharedDtor();
}

void LocalSimAddNewRobotRepMsg::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void LocalSimAddNewRobotRepMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalSimAddNewRobotRepMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalSimAddNewRobotRepMsg_descriptor_;
}

const LocalSimAddNewRobotRepMsg& LocalSimAddNewRobotRepMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

LocalSimAddNewRobotRepMsg* LocalSimAddNewRobotRepMsg::default_instance_ = NULL;

LocalSimAddNewRobotRepMsg* LocalSimAddNewRobotRepMsg::New() const {
  return new LocalSimAddNewRobotRepMsg;
}

void LocalSimAddNewRobotRepMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalSimAddNewRobotRepMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalSimAddNewRobotRepMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalSimAddNewRobotRepMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalSimAddNewRobotRepMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalSimAddNewRobotRepMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalSimAddNewRobotRepMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalSimAddNewRobotRepMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalSimAddNewRobotRepMsg::MergeFrom(const LocalSimAddNewRobotRepMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalSimAddNewRobotRepMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSimAddNewRobotRepMsg::CopyFrom(const LocalSimAddNewRobotRepMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSimAddNewRobotRepMsg::IsInitialized() const {

  return true;
}

void LocalSimAddNewRobotRepMsg::Swap(LocalSimAddNewRobotRepMsg* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalSimAddNewRobotRepMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalSimAddNewRobotRepMsg_descriptor_;
  metadata.reflection = LocalSimAddNewRobotRepMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalSimDeleteRobotReqMsg::kRobotNameFieldNumber;
#endif  // !_MSC_VER

LocalSimDeleteRobotReqMsg::LocalSimDeleteRobotReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalSimDeleteRobotReqMsg::InitAsDefaultInstance() {
}

LocalSimDeleteRobotReqMsg::LocalSimDeleteRobotReqMsg(const LocalSimDeleteRobotReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalSimDeleteRobotReqMsg::SharedCtor() {
  _cached_size_ = 0;
  robot_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalSimDeleteRobotReqMsg::~LocalSimDeleteRobotReqMsg() {
  SharedDtor();
}

void LocalSimDeleteRobotReqMsg::SharedDtor() {
  if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
    delete robot_name_;
  }
  if (this != default_instance_) {
  }
}

void LocalSimDeleteRobotReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalSimDeleteRobotReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalSimDeleteRobotReqMsg_descriptor_;
}

const LocalSimDeleteRobotReqMsg& LocalSimDeleteRobotReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

LocalSimDeleteRobotReqMsg* LocalSimDeleteRobotReqMsg::default_instance_ = NULL;

LocalSimDeleteRobotReqMsg* LocalSimDeleteRobotReqMsg::New() const {
  return new LocalSimDeleteRobotReqMsg;
}

void LocalSimDeleteRobotReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_robot_name()) {
      if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
        robot_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalSimDeleteRobotReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string robot_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->robot_name().data(), this->robot_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalSimDeleteRobotReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->robot_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalSimDeleteRobotReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robot_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalSimDeleteRobotReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string robot_name = 1;
    if (has_robot_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalSimDeleteRobotReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalSimDeleteRobotReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalSimDeleteRobotReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalSimDeleteRobotReqMsg::MergeFrom(const LocalSimDeleteRobotReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_name()) {
      set_robot_name(from.robot_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalSimDeleteRobotReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSimDeleteRobotReqMsg::CopyFrom(const LocalSimDeleteRobotReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSimDeleteRobotReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LocalSimDeleteRobotReqMsg::Swap(LocalSimDeleteRobotReqMsg* other) {
  if (other != this) {
    std::swap(robot_name_, other->robot_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalSimDeleteRobotReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalSimDeleteRobotReqMsg_descriptor_;
  metadata.reflection = LocalSimDeleteRobotReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalSimDeleteRobotRepMsg::kMessageFieldNumber;
#endif  // !_MSC_VER

LocalSimDeleteRobotRepMsg::LocalSimDeleteRobotRepMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalSimDeleteRobotRepMsg::InitAsDefaultInstance() {
}

LocalSimDeleteRobotRepMsg::LocalSimDeleteRobotRepMsg(const LocalSimDeleteRobotRepMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalSimDeleteRobotRepMsg::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalSimDeleteRobotRepMsg::~LocalSimDeleteRobotRepMsg() {
  SharedDtor();
}

void LocalSimDeleteRobotRepMsg::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void LocalSimDeleteRobotRepMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalSimDeleteRobotRepMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalSimDeleteRobotRepMsg_descriptor_;
}

const LocalSimDeleteRobotRepMsg& LocalSimDeleteRobotRepMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

LocalSimDeleteRobotRepMsg* LocalSimDeleteRobotRepMsg::default_instance_ = NULL;

LocalSimDeleteRobotRepMsg* LocalSimDeleteRobotRepMsg::New() const {
  return new LocalSimDeleteRobotRepMsg;
}

void LocalSimDeleteRobotRepMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalSimDeleteRobotRepMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalSimDeleteRobotRepMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalSimDeleteRobotRepMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalSimDeleteRobotRepMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalSimDeleteRobotRepMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalSimDeleteRobotRepMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalSimDeleteRobotRepMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalSimDeleteRobotRepMsg::MergeFrom(const LocalSimDeleteRobotRepMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalSimDeleteRobotRepMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSimDeleteRobotRepMsg::CopyFrom(const LocalSimDeleteRobotRepMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSimDeleteRobotRepMsg::IsInitialized() const {

  return true;
}

void LocalSimDeleteRobotRepMsg::Swap(LocalSimDeleteRobotRepMsg* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalSimDeleteRobotRepMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalSimDeleteRobotRepMsg_descriptor_;
  metadata.reflection = LocalSimDeleteRobotRepMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotFullStateMsg::kRobotNameFieldNumber;
const int RobotFullStateMsg::kTimeStepFieldNumber;
const int RobotFullStateMsg::kBodyStateFieldNumber;
#endif  // !_MSC_VER

RobotFullStateMsg::RobotFullStateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotFullStateMsg::InitAsDefaultInstance() {
}

RobotFullStateMsg::RobotFullStateMsg(const RobotFullStateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotFullStateMsg::SharedCtor() {
  _cached_size_ = 0;
  robot_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotFullStateMsg::~RobotFullStateMsg() {
  SharedDtor();
}

void RobotFullStateMsg::SharedDtor() {
  if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
    delete robot_name_;
  }
  if (this != default_instance_) {
  }
}

void RobotFullStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotFullStateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotFullStateMsg_descriptor_;
}

const RobotFullStateMsg& RobotFullStateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

RobotFullStateMsg* RobotFullStateMsg::default_instance_ = NULL;

RobotFullStateMsg* RobotFullStateMsg::New() const {
  return new RobotFullStateMsg;
}

void RobotFullStateMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_robot_name()) {
      if (robot_name_ != &::google::protobuf::internal::kEmptyString) {
        robot_name_->clear();
      }
    }
    time_step_ = 0;
  }
  body_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotFullStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string robot_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->robot_name().data(), this->robot_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_step;
        break;
      }

      // required int32 time_step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_step_)));
          set_has_time_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body_state;
        break;
      }

      // repeated .BodyStateMsg body_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotFullStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->robot_name(), output);
  }

  // required int32 time_step = 2;
  if (has_time_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_step(), output);
  }

  // repeated .BodyStateMsg body_state = 3;
  for (int i = 0; i < this->body_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->body_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotFullStateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string robot_name = 1;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robot_name(), target);
  }

  // required int32 time_step = 2;
  if (has_time_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_step(), target);
  }

  // repeated .BodyStateMsg body_state = 3;
  for (int i = 0; i < this->body_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->body_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotFullStateMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string robot_name = 1;
    if (has_robot_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_name());
    }

    // required int32 time_step = 2;
    if (has_time_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_step());
    }

  }
  // repeated .BodyStateMsg body_state = 3;
  total_size += 1 * this->body_state_size();
  for (int i = 0; i < this->body_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotFullStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotFullStateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotFullStateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotFullStateMsg::MergeFrom(const RobotFullStateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  body_state_.MergeFrom(from.body_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_name()) {
      set_robot_name(from.robot_name());
    }
    if (from.has_time_step()) {
      set_time_step(from.time_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotFullStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotFullStateMsg::CopyFrom(const RobotFullStateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotFullStateMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < body_state_size(); i++) {
    if (!this->body_state(i).IsInitialized()) return false;
  }
  return true;
}

void RobotFullStateMsg::Swap(RobotFullStateMsg* other) {
  if (other != this) {
    std::swap(robot_name_, other->robot_name_);
    std::swap(time_step_, other->time_step_);
    body_state_.Swap(&other->body_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotFullStateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotFullStateMsg_descriptor_;
  metadata.reflection = RobotFullStateMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldFullStateMsg::kRobotStateFieldNumber;
const int WorldFullStateMsg::kTimeStepFieldNumber;
#endif  // !_MSC_VER

WorldFullStateMsg::WorldFullStateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldFullStateMsg::InitAsDefaultInstance() {
}

WorldFullStateMsg::WorldFullStateMsg(const WorldFullStateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldFullStateMsg::SharedCtor() {
  _cached_size_ = 0;
  time_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldFullStateMsg::~WorldFullStateMsg() {
  SharedDtor();
}

void WorldFullStateMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldFullStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldFullStateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldFullStateMsg_descriptor_;
}

const WorldFullStateMsg& WorldFullStateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

WorldFullStateMsg* WorldFullStateMsg::default_instance_ = NULL;

WorldFullStateMsg* WorldFullStateMsg::New() const {
  return new WorldFullStateMsg;
}

void WorldFullStateMsg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    time_step_ = 0;
  }
  robot_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldFullStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RobotFullStateMsg robot_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robot_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robot_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_robot_state;
        if (input->ExpectTag(16)) goto parse_time_step;
        break;
      }

      // required int32 time_step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_step_)));
          set_has_time_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldFullStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RobotFullStateMsg robot_state = 1;
  for (int i = 0; i < this->robot_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robot_state(i), output);
  }

  // required int32 time_step = 2;
  if (has_time_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldFullStateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RobotFullStateMsg robot_state = 1;
  for (int i = 0; i < this->robot_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robot_state(i), target);
  }

  // required int32 time_step = 2;
  if (has_time_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldFullStateMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 time_step = 2;
    if (has_time_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_step());
    }

  }
  // repeated .RobotFullStateMsg robot_state = 1;
  total_size += 1 * this->robot_state_size();
  for (int i = 0; i < this->robot_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robot_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldFullStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldFullStateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldFullStateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldFullStateMsg::MergeFrom(const WorldFullStateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  robot_state_.MergeFrom(from.robot_state_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time_step()) {
      set_time_step(from.time_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldFullStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldFullStateMsg::CopyFrom(const WorldFullStateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldFullStateMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < robot_state_size(); i++) {
    if (!this->robot_state(i).IsInitialized()) return false;
  }
  return true;
}

void WorldFullStateMsg::Swap(WorldFullStateMsg* other) {
  if (other != this) {
    robot_state_.Swap(&other->robot_state_);
    std::swap(time_step_, other->time_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldFullStateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldFullStateMsg_descriptor_;
  metadata.reflection = WorldFullStateMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRobotReqMsg::kNameFieldNumber;
#endif  // !_MSC_VER

RegisterRobotReqMsg::RegisterRobotReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterRobotReqMsg::InitAsDefaultInstance() {
}

RegisterRobotReqMsg::RegisterRobotReqMsg(const RegisterRobotReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterRobotReqMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRobotReqMsg::~RegisterRobotReqMsg() {
  SharedDtor();
}

void RegisterRobotReqMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RegisterRobotReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRobotReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRobotReqMsg_descriptor_;
}

const RegisterRobotReqMsg& RegisterRobotReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

RegisterRobotReqMsg* RegisterRobotReqMsg::default_instance_ = NULL;

RegisterRobotReqMsg* RegisterRobotReqMsg::New() const {
  return new RegisterRobotReqMsg;
}

void RegisterRobotReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRobotReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterRobotReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterRobotReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterRobotReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRobotReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRobotReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRobotReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRobotReqMsg::MergeFrom(const RegisterRobotReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRobotReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRobotReqMsg::CopyFrom(const RegisterRobotReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRobotReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegisterRobotReqMsg::Swap(RegisterRobotReqMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRobotReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRobotReqMsg_descriptor_;
  metadata.reflection = RegisterRobotReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRobotRepMsg::kMessageFieldNumber;
#endif  // !_MSC_VER

RegisterRobotRepMsg::RegisterRobotRepMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterRobotRepMsg::InitAsDefaultInstance() {
}

RegisterRobotRepMsg::RegisterRobotRepMsg(const RegisterRobotRepMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterRobotRepMsg::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRobotRepMsg::~RegisterRobotRepMsg() {
  SharedDtor();
}

void RegisterRobotRepMsg::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void RegisterRobotRepMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRobotRepMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRobotRepMsg_descriptor_;
}

const RegisterRobotRepMsg& RegisterRobotRepMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

RegisterRobotRepMsg* RegisterRobotRepMsg::default_instance_ = NULL;

RegisterRobotRepMsg* RegisterRobotRepMsg::New() const {
  return new RegisterRobotRepMsg;
}

void RegisterRobotRepMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRobotRepMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterRobotRepMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterRobotRepMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterRobotRepMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRobotRepMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRobotRepMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRobotRepMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRobotRepMsg::MergeFrom(const RegisterRobotRepMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRobotRepMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRobotRepMsg::CopyFrom(const RegisterRobotRepMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRobotRepMsg::IsInitialized() const {

  return true;
}

void RegisterRobotRepMsg::Swap(RegisterRobotRepMsg* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRobotRepMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRobotRepMsg_descriptor_;
  metadata.reflection = RegisterRobotRepMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPSReqMsg::kMessageFieldNumber;
#endif  // !_MSC_VER

GPSReqMsg::GPSReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPSReqMsg::InitAsDefaultInstance() {
}

GPSReqMsg::GPSReqMsg(const GPSReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPSReqMsg::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSReqMsg::~GPSReqMsg() {
  SharedDtor();
}

void GPSReqMsg::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void GPSReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSReqMsg_descriptor_;
}

const GPSReqMsg& GPSReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

GPSReqMsg* GPSReqMsg::default_instance_ = NULL;

GPSReqMsg* GPSReqMsg::New() const {
  return new GPSReqMsg;
}

void GPSReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPSReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPSReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPSReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSReqMsg::MergeFrom(const GPSReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSReqMsg::CopyFrom(const GPSReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GPSReqMsg::Swap(GPSReqMsg* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSReqMsg_descriptor_;
  metadata.reflection = GPSReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPSMsg::kXFieldNumber;
const int GPSMsg::kYFieldNumber;
const int GPSMsg::kZFieldNumber;
const int GPSMsg::kTimeStepFieldNumber;
#endif  // !_MSC_VER

GPSMsg::GPSMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPSMsg::InitAsDefaultInstance() {
}

GPSMsg::GPSMsg(const GPSMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPSMsg::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  time_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSMsg::~GPSMsg() {
  SharedDtor();
}

void GPSMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPSMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSMsg_descriptor_;
}

const GPSMsg& GPSMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

GPSMsg* GPSMsg::default_instance_ = NULL;

GPSMsg* GPSMsg::New() const {
  return new GPSMsg;
}

void GPSMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    time_step_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_step;
        break;
      }

      // required int32 time_step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_step_)));
          set_has_time_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPSMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // required int32 time_step = 4;
  if (has_time_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPSMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // required int32 time_step = 4;
  if (has_time_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPSMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // required int32 time_step = 4;
    if (has_time_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSMsg::MergeFrom(const GPSMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_time_step()) {
      set_time_step(from.time_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSMsg::CopyFrom(const GPSMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GPSMsg::Swap(GPSMsg* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(time_step_, other->time_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSMsg_descriptor_;
  metadata.reflection = GPSMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeCamMsg::kImageFieldNumber;
const int NodeCamMsg::kTimeStepFieldNumber;
const int NodeCamMsg::kSizeFieldNumber;
#endif  // !_MSC_VER

NodeCamMsg::NodeCamMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeCamMsg::InitAsDefaultInstance() {
}

NodeCamMsg::NodeCamMsg(const NodeCamMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeCamMsg::SharedCtor() {
  _cached_size_ = 0;
  time_step_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeCamMsg::~NodeCamMsg() {
  SharedDtor();
}

void NodeCamMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeCamMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeCamMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeCamMsg_descriptor_;
}

const NodeCamMsg& NodeCamMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

NodeCamMsg* NodeCamMsg::default_instance_ = NULL;

NodeCamMsg* NodeCamMsg::New() const {
  return new NodeCamMsg;
}

void NodeCamMsg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    time_step_ = 0;
    size_ = 0;
  }
  image_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeCamMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeCamImageMsg image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_image;
        if (input->ExpectTag(16)) goto parse_time_step;
        break;
      }

      // required int32 time_step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_step_)));
          set_has_time_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeCamMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NodeCamImageMsg image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image(i), output);
  }

  // required int32 time_step = 2;
  if (has_time_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_step(), output);
  }

  // optional int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeCamMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NodeCamImageMsg image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image(i), target);
  }

  // required int32 time_step = 2;
  if (has_time_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_step(), target);
  }

  // optional int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeCamMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 time_step = 2;
    if (has_time_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_step());
    }

    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  // repeated .NodeCamImageMsg image = 1;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeCamMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeCamMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeCamMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeCamMsg::MergeFrom(const NodeCamMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time_step()) {
      set_time_step(from.time_step());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeCamMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeCamMsg::CopyFrom(const NodeCamMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeCamMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void NodeCamMsg::Swap(NodeCamMsg* other) {
  if (other != this) {
    image_.Swap(&other->image_);
    std::swap(time_step_, other->time_step_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeCamMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeCamMsg_descriptor_;
  metadata.reflection = NodeCamMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeCamImageMsg::kImageFieldNumber;
const int NodeCamImageMsg::kImageTypeFieldNumber;
const int NodeCamImageMsg::kImageHeightFieldNumber;
const int NodeCamImageMsg::kImageWidthFieldNumber;
#endif  // !_MSC_VER

NodeCamImageMsg::NodeCamImageMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeCamImageMsg::InitAsDefaultInstance() {
}

NodeCamImageMsg::NodeCamImageMsg(const NodeCamImageMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeCamImageMsg::SharedCtor() {
  _cached_size_ = 0;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_type_ = 0;
  image_height_ = 0;
  image_width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeCamImageMsg::~NodeCamImageMsg() {
  SharedDtor();
}

void NodeCamImageMsg::SharedDtor() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void NodeCamImageMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeCamImageMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeCamImageMsg_descriptor_;
}

const NodeCamImageMsg& NodeCamImageMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimMessages_2eproto();
  return *default_instance_;
}

NodeCamImageMsg* NodeCamImageMsg::default_instance_ = NULL;

NodeCamImageMsg* NodeCamImageMsg::New() const {
  return new NodeCamImageMsg;
}

void NodeCamImageMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
    image_type_ = 0;
    image_height_ = 0;
    image_width_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeCamImageMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_image_type;
        break;
      }

      // optional int32 image_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_type_)));
          set_has_image_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_image_height;
        break;
      }

      // optional int32 image_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_height_)));
          set_has_image_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_image_width;
        break;
      }

      // optional int32 image_width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_width_)));
          set_has_image_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeCamImageMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->image(), output);
  }

  // optional int32 image_type = 2;
  if (has_image_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->image_type(), output);
  }

  // optional int32 image_height = 3;
  if (has_image_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->image_height(), output);
  }

  // optional int32 image_width = 4;
  if (has_image_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->image_width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeCamImageMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes image = 1;
  if (has_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // optional int32 image_type = 2;
  if (has_image_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->image_type(), target);
  }

  // optional int32 image_height = 3;
  if (has_image_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->image_height(), target);
  }

  // optional int32 image_width = 4;
  if (has_image_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->image_width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeCamImageMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image());
    }

    // optional int32 image_type = 2;
    if (has_image_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_type());
    }

    // optional int32 image_height = 3;
    if (has_image_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_height());
    }

    // optional int32 image_width = 4;
    if (has_image_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_width());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeCamImageMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeCamImageMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeCamImageMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeCamImageMsg::MergeFrom(const NodeCamImageMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_image_type()) {
      set_image_type(from.image_type());
    }
    if (from.has_image_height()) {
      set_image_height(from.image_height());
    }
    if (from.has_image_width()) {
      set_image_width(from.image_width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeCamImageMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeCamImageMsg::CopyFrom(const NodeCamImageMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeCamImageMsg::IsInitialized() const {

  return true;
}

void NodeCamImageMsg::Swap(NodeCamImageMsg* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(image_type_, other->image_type_);
    std::swap(image_height_, other->image_height_);
    std::swap(image_width_, other->image_width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeCamImageMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeCamImageMsg_descriptor_;
  metadata.reflection = NodeCamImageMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
