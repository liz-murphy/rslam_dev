// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NodeCar.proto

#ifndef PROTOBUF_NodeCar_2eproto__INCLUDED
#define PROTOBUF_NodeCar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NodeCar_2eproto();
void protobuf_AssignDesc_NodeCar_2eproto();
void protobuf_ShutdownFile_NodeCar_2eproto();

class VehicleMsg;
class RegisterControllerReqMsg;
class RegisterControllerRepMsg;

// ===================================================================

class VehicleMsg : public ::google::protobuf::Message {
 public:
  VehicleMsg();
  virtual ~VehicleMsg();

  VehicleMsg(const VehicleMsg& from);

  inline VehicleMsg& operator=(const VehicleMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleMsg& default_instance();

  void Swap(VehicleMsg* other);

  // implements Message ----------------------------------------------

  VehicleMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleMsg& from);
  void MergeFrom(const VehicleMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double steering_angle = 1;
  inline bool has_steering_angle() const;
  inline void clear_steering_angle();
  static const int kSteeringAngleFieldNumber = 1;
  inline double steering_angle() const;
  inline void set_steering_angle(double value);

  // required double desired_force = 2;
  inline bool has_desired_force() const;
  inline void clear_desired_force();
  static const int kDesiredForceFieldNumber = 2;
  inline double desired_force() const;
  inline void set_desired_force(double value);

  // required double command_time = 3;
  inline bool has_command_time() const;
  inline void clear_command_time();
  static const int kCommandTimeFieldNumber = 3;
  inline double command_time() const;
  inline void set_command_time(double value);

  // @@protoc_insertion_point(class_scope:pb.VehicleMsg)
 private:
  inline void set_has_steering_angle();
  inline void clear_has_steering_angle();
  inline void set_has_desired_force();
  inline void clear_has_desired_force();
  inline void set_has_command_time();
  inline void clear_has_command_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double steering_angle_;
  double desired_force_;
  double command_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_NodeCar_2eproto();
  friend void protobuf_AssignDesc_NodeCar_2eproto();
  friend void protobuf_ShutdownFile_NodeCar_2eproto();

  void InitAsDefaultInstance();
  static VehicleMsg* default_instance_;
};
// -------------------------------------------------------------------

class RegisterControllerReqMsg : public ::google::protobuf::Message {
 public:
  RegisterControllerReqMsg();
  virtual ~RegisterControllerReqMsg();

  RegisterControllerReqMsg(const RegisterControllerReqMsg& from);

  inline RegisterControllerReqMsg& operator=(const RegisterControllerReqMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterControllerReqMsg& default_instance();

  void Swap(RegisterControllerReqMsg* other);

  // implements Message ----------------------------------------------

  RegisterControllerReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterControllerReqMsg& from);
  void MergeFrom(const RegisterControllerReqMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes topic = 1;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 1;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const void* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // optional string uri = 2;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 2;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:pb.RegisterControllerReqMsg)
 private:
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_uri();
  inline void clear_has_uri();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* topic_;
  ::std::string* uri_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NodeCar_2eproto();
  friend void protobuf_AssignDesc_NodeCar_2eproto();
  friend void protobuf_ShutdownFile_NodeCar_2eproto();

  void InitAsDefaultInstance();
  static RegisterControllerReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class RegisterControllerRepMsg : public ::google::protobuf::Message {
 public:
  RegisterControllerRepMsg();
  virtual ~RegisterControllerRepMsg();

  RegisterControllerRepMsg(const RegisterControllerRepMsg& from);

  inline RegisterControllerRepMsg& operator=(const RegisterControllerRepMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterControllerRepMsg& default_instance();

  void Swap(RegisterControllerRepMsg* other);

  // implements Message ----------------------------------------------

  RegisterControllerRepMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterControllerRepMsg& from);
  void MergeFrom(const RegisterControllerRepMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pb.RegisterControllerRepMsg)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NodeCar_2eproto();
  friend void protobuf_AssignDesc_NodeCar_2eproto();
  friend void protobuf_ShutdownFile_NodeCar_2eproto();

  void InitAsDefaultInstance();
  static RegisterControllerRepMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// VehicleMsg

// required double steering_angle = 1;
inline bool VehicleMsg::has_steering_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleMsg::set_has_steering_angle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleMsg::clear_has_steering_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleMsg::clear_steering_angle() {
  steering_angle_ = 0;
  clear_has_steering_angle();
}
inline double VehicleMsg::steering_angle() const {
  return steering_angle_;
}
inline void VehicleMsg::set_steering_angle(double value) {
  set_has_steering_angle();
  steering_angle_ = value;
}

// required double desired_force = 2;
inline bool VehicleMsg::has_desired_force() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleMsg::set_has_desired_force() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleMsg::clear_has_desired_force() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleMsg::clear_desired_force() {
  desired_force_ = 0;
  clear_has_desired_force();
}
inline double VehicleMsg::desired_force() const {
  return desired_force_;
}
inline void VehicleMsg::set_desired_force(double value) {
  set_has_desired_force();
  desired_force_ = value;
}

// required double command_time = 3;
inline bool VehicleMsg::has_command_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleMsg::set_has_command_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleMsg::clear_has_command_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleMsg::clear_command_time() {
  command_time_ = 0;
  clear_has_command_time();
}
inline double VehicleMsg::command_time() const {
  return command_time_;
}
inline void VehicleMsg::set_command_time(double value) {
  set_has_command_time();
  command_time_ = value;
}

// -------------------------------------------------------------------

// RegisterControllerReqMsg

// optional bytes topic = 1;
inline bool RegisterControllerReqMsg::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterControllerReqMsg::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterControllerReqMsg::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterControllerReqMsg::clear_topic() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& RegisterControllerReqMsg::topic() const {
  return *topic_;
}
inline void RegisterControllerReqMsg::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void RegisterControllerReqMsg::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void RegisterControllerReqMsg::set_topic(const void* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterControllerReqMsg::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  return topic_;
}
inline ::std::string* RegisterControllerReqMsg::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterControllerReqMsg::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uri = 2;
inline bool RegisterControllerReqMsg::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterControllerReqMsg::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterControllerReqMsg::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterControllerReqMsg::clear_uri() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& RegisterControllerReqMsg::uri() const {
  return *uri_;
}
inline void RegisterControllerReqMsg::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void RegisterControllerReqMsg::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void RegisterControllerReqMsg::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterControllerReqMsg::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  return uri_;
}
inline ::std::string* RegisterControllerReqMsg::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterControllerReqMsg::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RegisterControllerRepMsg

// optional bool success = 1;
inline bool RegisterControllerRepMsg::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterControllerRepMsg::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterControllerRepMsg::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterControllerRepMsg::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool RegisterControllerRepMsg::success() const {
  return success_;
}
inline void RegisterControllerRepMsg::set_success(bool value) {
  set_has_success();
  success_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NodeCar_2eproto__INCLUDED
