// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lidar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Lidar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* LidarMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LidarMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Lidar_2eproto() {
  protobuf_AddDesc_Lidar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Lidar.proto");
  GOOGLE_CHECK(file != NULL);
  LidarMsg_descriptor_ = file->message_type(0);
  static const int LidarMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarMsg, device_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarMsg, system_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarMsg, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarMsg, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarMsg, rotational_position_),
  };
  LidarMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LidarMsg_descriptor_,
      LidarMsg::default_instance_,
      LidarMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LidarMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Lidar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LidarMsg_descriptor_, &LidarMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Lidar_2eproto() {
  delete LidarMsg::default_instance_;
  delete LidarMsg_reflection_;
}

void protobuf_AddDesc_Lidar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_Matrix_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Lidar.proto\022\002pb\032\014Matrix.proto\"\257\001\n\010Lida"
    "rMsg\022\n\n\002id\030\001 \001(\005\022\023\n\013device_time\030\002 \001(\001\022\023\n"
    "\013system_time\030\003 \001(\001\022\037\n\010distance\030\004 \001(\0132\r.p"
    "b.MatrixMsg\022 \n\tintensity\030\005 \001(\0132\r.pb.Matr"
    "ixMsg\022*\n\023rotational_position\030\006 \001(\0132\r.pb."
    "VectorMsg", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Lidar.proto", &protobuf_RegisterTypes);
  LidarMsg::default_instance_ = new LidarMsg();
  LidarMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Lidar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Lidar_2eproto {
  StaticDescriptorInitializer_Lidar_2eproto() {
    protobuf_AddDesc_Lidar_2eproto();
  }
} static_descriptor_initializer_Lidar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LidarMsg::kIdFieldNumber;
const int LidarMsg::kDeviceTimeFieldNumber;
const int LidarMsg::kSystemTimeFieldNumber;
const int LidarMsg::kDistanceFieldNumber;
const int LidarMsg::kIntensityFieldNumber;
const int LidarMsg::kRotationalPositionFieldNumber;
#endif  // !_MSC_VER

LidarMsg::LidarMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LidarMsg::InitAsDefaultInstance() {
  distance_ = const_cast< ::pb::MatrixMsg*>(&::pb::MatrixMsg::default_instance());
  intensity_ = const_cast< ::pb::MatrixMsg*>(&::pb::MatrixMsg::default_instance());
  rotational_position_ = const_cast< ::pb::VectorMsg*>(&::pb::VectorMsg::default_instance());
}

LidarMsg::LidarMsg(const LidarMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LidarMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  device_time_ = 0;
  system_time_ = 0;
  distance_ = NULL;
  intensity_ = NULL;
  rotational_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LidarMsg::~LidarMsg() {
  SharedDtor();
}

void LidarMsg::SharedDtor() {
  if (this != default_instance_) {
    delete distance_;
    delete intensity_;
    delete rotational_position_;
  }
}

void LidarMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LidarMsg_descriptor_;
}

const LidarMsg& LidarMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Lidar_2eproto();
  return *default_instance_;
}

LidarMsg* LidarMsg::default_instance_ = NULL;

LidarMsg* LidarMsg::New() const {
  return new LidarMsg;
}

void LidarMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    device_time_ = 0;
    system_time_ = 0;
    if (has_distance()) {
      if (distance_ != NULL) distance_->::pb::MatrixMsg::Clear();
    }
    if (has_intensity()) {
      if (intensity_ != NULL) intensity_->::pb::MatrixMsg::Clear();
    }
    if (has_rotational_position()) {
      if (rotational_position_ != NULL) rotational_position_->::pb::VectorMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LidarMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_time;
        break;
      }

      // optional double device_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &device_time_)));
          set_has_device_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_system_time;
        break;
      }

      // optional double system_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_system_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &system_time_)));
          set_has_system_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_distance;
        break;
      }

      // optional .pb.MatrixMsg distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_intensity;
        break;
      }

      // optional .pb.MatrixMsg intensity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intensity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intensity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rotational_position;
        break;
      }

      // optional .pb.VectorMsg rotational_position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotational_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotational_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LidarMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double device_time = 2;
  if (has_device_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->device_time(), output);
  }

  // optional double system_time = 3;
  if (has_system_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->system_time(), output);
  }

  // optional .pb.MatrixMsg distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->distance(), output);
  }

  // optional .pb.MatrixMsg intensity = 5;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->intensity(), output);
  }

  // optional .pb.VectorMsg rotational_position = 6;
  if (has_rotational_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rotational_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LidarMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double device_time = 2;
  if (has_device_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->device_time(), target);
  }

  // optional double system_time = 3;
  if (has_system_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->system_time(), target);
  }

  // optional .pb.MatrixMsg distance = 4;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->distance(), target);
  }

  // optional .pb.MatrixMsg intensity = 5;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->intensity(), target);
  }

  // optional .pb.VectorMsg rotational_position = 6;
  if (has_rotational_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rotational_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LidarMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional double device_time = 2;
    if (has_device_time()) {
      total_size += 1 + 8;
    }

    // optional double system_time = 3;
    if (has_system_time()) {
      total_size += 1 + 8;
    }

    // optional .pb.MatrixMsg distance = 4;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->distance());
    }

    // optional .pb.MatrixMsg intensity = 5;
    if (has_intensity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intensity());
    }

    // optional .pb.VectorMsg rotational_position = 6;
    if (has_rotational_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotational_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LidarMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LidarMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LidarMsg::MergeFrom(const LidarMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_device_time()) {
      set_device_time(from.device_time());
    }
    if (from.has_system_time()) {
      set_system_time(from.system_time());
    }
    if (from.has_distance()) {
      mutable_distance()->::pb::MatrixMsg::MergeFrom(from.distance());
    }
    if (from.has_intensity()) {
      mutable_intensity()->::pb::MatrixMsg::MergeFrom(from.intensity());
    }
    if (from.has_rotational_position()) {
      mutable_rotational_position()->::pb::VectorMsg::MergeFrom(from.rotational_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LidarMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarMsg::CopyFrom(const LidarMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarMsg::IsInitialized() const {

  if (has_distance()) {
    if (!this->distance().IsInitialized()) return false;
  }
  if (has_intensity()) {
    if (!this->intensity().IsInitialized()) return false;
  }
  return true;
}

void LidarMsg::Swap(LidarMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(device_time_, other->device_time_);
    std::swap(system_time_, other->system_time_);
    std::swap(distance_, other->distance_);
    std::swap(intensity_, other->intensity_);
    std::swap(rotational_position_, other->rotational_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LidarMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LidarMsg_descriptor_;
  metadata.reflection = LidarMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
