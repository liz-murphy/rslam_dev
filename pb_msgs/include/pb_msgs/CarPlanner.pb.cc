// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarPlanner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarPlanner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PlannerConfigMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlannerConfigMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlannerPolicyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlannerPolicyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlannerStatusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlannerStatusMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlannerHeightmapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlannerHeightmapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlannerMotionSampleMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlannerMotionSampleMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlannerSplineMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlannerSplineMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterPlannerReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterPlannerReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterPlannerRepMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterPlannerRepMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarPlanner_2eproto() {
  protobuf_AddDesc_CarPlanner_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarPlanner.proto");
  GOOGLE_CHECK(file != NULL);
  PlannerConfigMsg_descriptor_ = file->message_type(0);
  static const int PlannerConfigMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerConfigMsg, start_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerConfigMsg, goal_param_),
  };
  PlannerConfigMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlannerConfigMsg_descriptor_,
      PlannerConfigMsg::default_instance_,
      PlannerConfigMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerConfigMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerConfigMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlannerConfigMsg));
  PlannerPolicyMsg_descriptor_ = file->message_type(1);
  static const int PlannerPolicyMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerPolicyMsg, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerPolicyMsg, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerPolicyMsg, time_),
  };
  PlannerPolicyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlannerPolicyMsg_descriptor_,
      PlannerPolicyMsg::default_instance_,
      PlannerPolicyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerPolicyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerPolicyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlannerPolicyMsg));
  PlannerStatusMsg_descriptor_ = file->message_type(2);
  static const int PlannerStatusMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerStatusMsg, config_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerStatusMsg, mesh_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerStatusMsg, policy_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerStatusMsg, policy_failed_),
  };
  PlannerStatusMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlannerStatusMsg_descriptor_,
      PlannerStatusMsg::default_instance_,
      PlannerStatusMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerStatusMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerStatusMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlannerStatusMsg));
  PlannerHeightmapMsg_descriptor_ = file->message_type(3);
  static const int PlannerHeightmapMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerHeightmapMsg, row_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerHeightmapMsg, col_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerHeightmapMsg, x_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerHeightmapMsg, y_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerHeightmapMsg, z_data_),
  };
  PlannerHeightmapMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlannerHeightmapMsg_descriptor_,
      PlannerHeightmapMsg::default_instance_,
      PlannerHeightmapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerHeightmapMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerHeightmapMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlannerHeightmapMsg));
  PlannerMotionSampleMsg_descriptor_ = file->message_type(4);
  static const int PlannerMotionSampleMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerMotionSampleMsg, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerMotionSampleMsg, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerMotionSampleMsg, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerMotionSampleMsg, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerMotionSampleMsg, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerMotionSampleMsg, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerMotionSampleMsg, velocity_),
  };
  PlannerMotionSampleMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlannerMotionSampleMsg_descriptor_,
      PlannerMotionSampleMsg::default_instance_,
      PlannerMotionSampleMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerMotionSampleMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerMotionSampleMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlannerMotionSampleMsg));
  PlannerSplineMsg_descriptor_ = file->message_type(5);
  static const int PlannerSplineMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerSplineMsg, x_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerSplineMsg, y_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerSplineMsg, solved_goal_pose_),
  };
  PlannerSplineMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlannerSplineMsg_descriptor_,
      PlannerSplineMsg::default_instance_,
      PlannerSplineMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerSplineMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerSplineMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlannerSplineMsg));
  RegisterPlannerReqMsg_descriptor_ = file->message_type(6);
  static const int RegisterPlannerReqMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, heightmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, motion_sample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, spline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, req_node_name_),
  };
  RegisterPlannerReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterPlannerReqMsg_descriptor_,
      RegisterPlannerReqMsg::default_instance_,
      RegisterPlannerReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterPlannerReqMsg));
  RegisterPlannerRepMsg_descriptor_ = file->message_type(7);
  static const int RegisterPlannerRepMsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, heightmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, motion_sample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, spline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, rep_node_name_),
  };
  RegisterPlannerRepMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterPlannerRepMsg_descriptor_,
      RegisterPlannerRepMsg::default_instance_,
      RegisterPlannerRepMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterPlannerRepMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterPlannerRepMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarPlanner_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlannerConfigMsg_descriptor_, &PlannerConfigMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlannerPolicyMsg_descriptor_, &PlannerPolicyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlannerStatusMsg_descriptor_, &PlannerStatusMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlannerHeightmapMsg_descriptor_, &PlannerHeightmapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlannerMotionSampleMsg_descriptor_, &PlannerMotionSampleMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlannerSplineMsg_descriptor_, &PlannerSplineMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterPlannerReqMsg_descriptor_, &RegisterPlannerReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterPlannerRepMsg_descriptor_, &RegisterPlannerRepMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarPlanner_2eproto() {
  delete PlannerConfigMsg::default_instance_;
  delete PlannerConfigMsg_reflection_;
  delete PlannerPolicyMsg::default_instance_;
  delete PlannerPolicyMsg_reflection_;
  delete PlannerStatusMsg::default_instance_;
  delete PlannerStatusMsg_reflection_;
  delete PlannerHeightmapMsg::default_instance_;
  delete PlannerHeightmapMsg_reflection_;
  delete PlannerMotionSampleMsg::default_instance_;
  delete PlannerMotionSampleMsg_reflection_;
  delete PlannerSplineMsg::default_instance_;
  delete PlannerSplineMsg_reflection_;
  delete RegisterPlannerReqMsg::default_instance_;
  delete RegisterPlannerReqMsg_reflection_;
  delete RegisterPlannerRepMsg::default_instance_;
  delete RegisterPlannerRepMsg_reflection_;
}

void protobuf_AddDesc_CarPlanner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020CarPlanner.proto\022\002pb\"C\n\020PlannerConfigM"
    "sg\022\027\n\013start_param\030\001 \003(\001B\002\020\001\022\026\n\ngoal_para"
    "m\030\002 \003(\001B\002\020\001\"H\n\020PlannerPolicyMsg\022\021\n\005force"
    "\030\001 \003(\001B\002\020\001\022\017\n\003phi\030\002 \003(\001B\002\020\001\022\020\n\004time\030\003 \003("
    "\001B\002\020\001\"c\n\020PlannerStatusMsg\022\022\n\nconfig_set\030"
    "\001 \002(\010\022\020\n\010mesh_set\030\002 \002(\010\022\022\n\npolicy_set\030\003 "
    "\002(\010\022\025\n\rpolicy_failed\030\004 \002(\010\"w\n\023PlannerHei"
    "ghtmapMsg\022\021\n\trow_count\030\001 \002(\005\022\021\n\tcol_coun"
    "t\030\002 \002(\005\022\022\n\006x_data\030\003 \003(\001B\002\020\001\022\022\n\006y_data\030\004 "
    "\003(\001B\002\020\001\022\022\n\006z_data\030\005 \003(\001B\002\020\001\"\210\001\n\026PlannerM"
    "otionSampleMsg\022\r\n\001x\030\001 \003(\001B\002\020\001\022\r\n\001y\030\002 \003(\001"
    "B\002\020\001\022\r\n\001z\030\003 \003(\001B\002\020\001\022\r\n\001r\030\004 \003(\001B\002\020\001\022\r\n\001p\030"
    "\005 \003(\001B\002\020\001\022\r\n\001q\030\006 \003(\001B\002\020\001\022\024\n\010velocity\030\007 \003"
    "(\001B\002\020\001\"\\\n\020PlannerSplineMsg\022\024\n\010x_values\030\001"
    " \003(\001B\002\020\001\022\024\n\010y_values\030\002 \003(\001B\002\020\001\022\034\n\020solved"
    "_goal_pose\030\003 \003(\001B\002\020\001\"\262\002\n\025RegisterPlanner"
    "ReqMsg\022$\n\006config\030\001 \001(\0132\024.pb.PlannerConfi"
    "gMsg\022$\n\006policy\030\002 \001(\0132\024.pb.PlannerPolicyM"
    "sg\022$\n\006status\030\003 \001(\0132\024.pb.PlannerStatusMsg"
    "\022*\n\theightmap\030\004 \001(\0132\027.pb.PlannerHeightma"
    "pMsg\0221\n\rmotion_sample\030\005 \001(\0132\032.pb.Planner"
    "MotionSampleMsg\022$\n\006spline\030\006 \001(\0132\024.pb.Pla"
    "nnerSplineMsg\022\013\n\003tau\030\007 \001(\r\022\025\n\rreq_node_n"
    "ame\030\010 \002(\t\"\303\002\n\025RegisterPlannerRepMsg\022$\n\006c"
    "onfig\030\001 \001(\0132\024.pb.PlannerConfigMsg\022$\n\006pol"
    "icy\030\002 \001(\0132\024.pb.PlannerPolicyMsg\022$\n\006statu"
    "s\030\003 \001(\0132\024.pb.PlannerStatusMsg\022*\n\theightm"
    "ap\030\004 \001(\0132\027.pb.PlannerHeightmapMsg\0221\n\rmot"
    "ion_sample\030\005 \001(\0132\032.pb.PlannerMotionSampl"
    "eMsg\022$\n\006spline\030\006 \001(\0132\024.pb.PlannerSplineM"
    "sg\022\017\n\007success\030\007 \001(\r\022\013\n\003tau\030\010 \001(\r\022\025\n\rrep_"
    "node_name\030\t \001(\t", 1255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarPlanner.proto", &protobuf_RegisterTypes);
  PlannerConfigMsg::default_instance_ = new PlannerConfigMsg();
  PlannerPolicyMsg::default_instance_ = new PlannerPolicyMsg();
  PlannerStatusMsg::default_instance_ = new PlannerStatusMsg();
  PlannerHeightmapMsg::default_instance_ = new PlannerHeightmapMsg();
  PlannerMotionSampleMsg::default_instance_ = new PlannerMotionSampleMsg();
  PlannerSplineMsg::default_instance_ = new PlannerSplineMsg();
  RegisterPlannerReqMsg::default_instance_ = new RegisterPlannerReqMsg();
  RegisterPlannerRepMsg::default_instance_ = new RegisterPlannerRepMsg();
  PlannerConfigMsg::default_instance_->InitAsDefaultInstance();
  PlannerPolicyMsg::default_instance_->InitAsDefaultInstance();
  PlannerStatusMsg::default_instance_->InitAsDefaultInstance();
  PlannerHeightmapMsg::default_instance_->InitAsDefaultInstance();
  PlannerMotionSampleMsg::default_instance_->InitAsDefaultInstance();
  PlannerSplineMsg::default_instance_->InitAsDefaultInstance();
  RegisterPlannerReqMsg::default_instance_->InitAsDefaultInstance();
  RegisterPlannerRepMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarPlanner_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarPlanner_2eproto {
  StaticDescriptorInitializer_CarPlanner_2eproto() {
    protobuf_AddDesc_CarPlanner_2eproto();
  }
} static_descriptor_initializer_CarPlanner_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlannerConfigMsg::kStartParamFieldNumber;
const int PlannerConfigMsg::kGoalParamFieldNumber;
#endif  // !_MSC_VER

PlannerConfigMsg::PlannerConfigMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlannerConfigMsg::InitAsDefaultInstance() {
}

PlannerConfigMsg::PlannerConfigMsg(const PlannerConfigMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlannerConfigMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlannerConfigMsg::~PlannerConfigMsg() {
  SharedDtor();
}

void PlannerConfigMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlannerConfigMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerConfigMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlannerConfigMsg_descriptor_;
}

const PlannerConfigMsg& PlannerConfigMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarPlanner_2eproto();
  return *default_instance_;
}

PlannerConfigMsg* PlannerConfigMsg::default_instance_ = NULL;

PlannerConfigMsg* PlannerConfigMsg::New() const {
  return new PlannerConfigMsg;
}

void PlannerConfigMsg::Clear() {
  start_param_.Clear();
  goal_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlannerConfigMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double start_param = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_start_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_start_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goal_param;
        break;
      }

      // repeated double goal_param = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goal_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_goal_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_goal_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlannerConfigMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double start_param = 1 [packed = true];
  if (this->start_param_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_start_param_cached_byte_size_);
  }
  for (int i = 0; i < this->start_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->start_param(i), output);
  }

  // repeated double goal_param = 2 [packed = true];
  if (this->goal_param_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_goal_param_cached_byte_size_);
  }
  for (int i = 0; i < this->goal_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->goal_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlannerConfigMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double start_param = 1 [packed = true];
  if (this->start_param_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _start_param_cached_byte_size_, target);
  }
  for (int i = 0; i < this->start_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->start_param(i), target);
  }

  // repeated double goal_param = 2 [packed = true];
  if (this->goal_param_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _goal_param_cached_byte_size_, target);
  }
  for (int i = 0; i < this->goal_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->goal_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlannerConfigMsg::ByteSize() const {
  int total_size = 0;

  // repeated double start_param = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->start_param_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _start_param_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double goal_param = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->goal_param_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _goal_param_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerConfigMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlannerConfigMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlannerConfigMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlannerConfigMsg::MergeFrom(const PlannerConfigMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  start_param_.MergeFrom(from.start_param_);
  goal_param_.MergeFrom(from.goal_param_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlannerConfigMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerConfigMsg::CopyFrom(const PlannerConfigMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerConfigMsg::IsInitialized() const {

  return true;
}

void PlannerConfigMsg::Swap(PlannerConfigMsg* other) {
  if (other != this) {
    start_param_.Swap(&other->start_param_);
    goal_param_.Swap(&other->goal_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlannerConfigMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlannerConfigMsg_descriptor_;
  metadata.reflection = PlannerConfigMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlannerPolicyMsg::kForceFieldNumber;
const int PlannerPolicyMsg::kPhiFieldNumber;
const int PlannerPolicyMsg::kTimeFieldNumber;
#endif  // !_MSC_VER

PlannerPolicyMsg::PlannerPolicyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlannerPolicyMsg::InitAsDefaultInstance() {
}

PlannerPolicyMsg::PlannerPolicyMsg(const PlannerPolicyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlannerPolicyMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlannerPolicyMsg::~PlannerPolicyMsg() {
  SharedDtor();
}

void PlannerPolicyMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlannerPolicyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerPolicyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlannerPolicyMsg_descriptor_;
}

const PlannerPolicyMsg& PlannerPolicyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarPlanner_2eproto();
  return *default_instance_;
}

PlannerPolicyMsg* PlannerPolicyMsg::default_instance_ = NULL;

PlannerPolicyMsg* PlannerPolicyMsg::New() const {
  return new PlannerPolicyMsg;
}

void PlannerPolicyMsg::Clear() {
  force_.Clear();
  phi_.Clear();
  time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlannerPolicyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double force = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_force())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_force())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phi;
        break;
      }

      // repeated double phi = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_phi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_phi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // repeated double time = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlannerPolicyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double force = 1 [packed = true];
  if (this->force_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_force_cached_byte_size_);
  }
  for (int i = 0; i < this->force_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->force(i), output);
  }

  // repeated double phi = 2 [packed = true];
  if (this->phi_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_phi_cached_byte_size_);
  }
  for (int i = 0; i < this->phi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->phi(i), output);
  }

  // repeated double time = 3 [packed = true];
  if (this->time_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_time_cached_byte_size_);
  }
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlannerPolicyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double force = 1 [packed = true];
  if (this->force_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _force_cached_byte_size_, target);
  }
  for (int i = 0; i < this->force_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->force(i), target);
  }

  // repeated double phi = 2 [packed = true];
  if (this->phi_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _phi_cached_byte_size_, target);
  }
  for (int i = 0; i < this->phi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->phi(i), target);
  }

  // repeated double time = 3 [packed = true];
  if (this->time_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _time_cached_byte_size_, target);
  }
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlannerPolicyMsg::ByteSize() const {
  int total_size = 0;

  // repeated double force = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->force_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _force_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double phi = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->phi_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _phi_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double time = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->time_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _time_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerPolicyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlannerPolicyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlannerPolicyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlannerPolicyMsg::MergeFrom(const PlannerPolicyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  force_.MergeFrom(from.force_);
  phi_.MergeFrom(from.phi_);
  time_.MergeFrom(from.time_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlannerPolicyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerPolicyMsg::CopyFrom(const PlannerPolicyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerPolicyMsg::IsInitialized() const {

  return true;
}

void PlannerPolicyMsg::Swap(PlannerPolicyMsg* other) {
  if (other != this) {
    force_.Swap(&other->force_);
    phi_.Swap(&other->phi_);
    time_.Swap(&other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlannerPolicyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlannerPolicyMsg_descriptor_;
  metadata.reflection = PlannerPolicyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlannerStatusMsg::kConfigSetFieldNumber;
const int PlannerStatusMsg::kMeshSetFieldNumber;
const int PlannerStatusMsg::kPolicySetFieldNumber;
const int PlannerStatusMsg::kPolicyFailedFieldNumber;
#endif  // !_MSC_VER

PlannerStatusMsg::PlannerStatusMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlannerStatusMsg::InitAsDefaultInstance() {
}

PlannerStatusMsg::PlannerStatusMsg(const PlannerStatusMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlannerStatusMsg::SharedCtor() {
  _cached_size_ = 0;
  config_set_ = false;
  mesh_set_ = false;
  policy_set_ = false;
  policy_failed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlannerStatusMsg::~PlannerStatusMsg() {
  SharedDtor();
}

void PlannerStatusMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlannerStatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerStatusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlannerStatusMsg_descriptor_;
}

const PlannerStatusMsg& PlannerStatusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarPlanner_2eproto();
  return *default_instance_;
}

PlannerStatusMsg* PlannerStatusMsg::default_instance_ = NULL;

PlannerStatusMsg* PlannerStatusMsg::New() const {
  return new PlannerStatusMsg;
}

void PlannerStatusMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_set_ = false;
    mesh_set_ = false;
    policy_set_ = false;
    policy_failed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlannerStatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool config_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &config_set_)));
          set_has_config_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mesh_set;
        break;
      }

      // required bool mesh_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mesh_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mesh_set_)));
          set_has_mesh_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_policy_set;
        break;
      }

      // required bool policy_set = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_policy_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &policy_set_)));
          set_has_policy_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_policy_failed;
        break;
      }

      // required bool policy_failed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_policy_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &policy_failed_)));
          set_has_policy_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlannerStatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool config_set = 1;
  if (has_config_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->config_set(), output);
  }

  // required bool mesh_set = 2;
  if (has_mesh_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mesh_set(), output);
  }

  // required bool policy_set = 3;
  if (has_policy_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->policy_set(), output);
  }

  // required bool policy_failed = 4;
  if (has_policy_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->policy_failed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlannerStatusMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool config_set = 1;
  if (has_config_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->config_set(), target);
  }

  // required bool mesh_set = 2;
  if (has_mesh_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mesh_set(), target);
  }

  // required bool policy_set = 3;
  if (has_policy_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->policy_set(), target);
  }

  // required bool policy_failed = 4;
  if (has_policy_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->policy_failed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlannerStatusMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool config_set = 1;
    if (has_config_set()) {
      total_size += 1 + 1;
    }

    // required bool mesh_set = 2;
    if (has_mesh_set()) {
      total_size += 1 + 1;
    }

    // required bool policy_set = 3;
    if (has_policy_set()) {
      total_size += 1 + 1;
    }

    // required bool policy_failed = 4;
    if (has_policy_failed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerStatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlannerStatusMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlannerStatusMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlannerStatusMsg::MergeFrom(const PlannerStatusMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_set()) {
      set_config_set(from.config_set());
    }
    if (from.has_mesh_set()) {
      set_mesh_set(from.mesh_set());
    }
    if (from.has_policy_set()) {
      set_policy_set(from.policy_set());
    }
    if (from.has_policy_failed()) {
      set_policy_failed(from.policy_failed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlannerStatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerStatusMsg::CopyFrom(const PlannerStatusMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerStatusMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PlannerStatusMsg::Swap(PlannerStatusMsg* other) {
  if (other != this) {
    std::swap(config_set_, other->config_set_);
    std::swap(mesh_set_, other->mesh_set_);
    std::swap(policy_set_, other->policy_set_);
    std::swap(policy_failed_, other->policy_failed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlannerStatusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlannerStatusMsg_descriptor_;
  metadata.reflection = PlannerStatusMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlannerHeightmapMsg::kRowCountFieldNumber;
const int PlannerHeightmapMsg::kColCountFieldNumber;
const int PlannerHeightmapMsg::kXDataFieldNumber;
const int PlannerHeightmapMsg::kYDataFieldNumber;
const int PlannerHeightmapMsg::kZDataFieldNumber;
#endif  // !_MSC_VER

PlannerHeightmapMsg::PlannerHeightmapMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlannerHeightmapMsg::InitAsDefaultInstance() {
}

PlannerHeightmapMsg::PlannerHeightmapMsg(const PlannerHeightmapMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlannerHeightmapMsg::SharedCtor() {
  _cached_size_ = 0;
  row_count_ = 0;
  col_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlannerHeightmapMsg::~PlannerHeightmapMsg() {
  SharedDtor();
}

void PlannerHeightmapMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlannerHeightmapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerHeightmapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlannerHeightmapMsg_descriptor_;
}

const PlannerHeightmapMsg& PlannerHeightmapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarPlanner_2eproto();
  return *default_instance_;
}

PlannerHeightmapMsg* PlannerHeightmapMsg::default_instance_ = NULL;

PlannerHeightmapMsg* PlannerHeightmapMsg::New() const {
  return new PlannerHeightmapMsg;
}

void PlannerHeightmapMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_count_ = 0;
    col_count_ = 0;
  }
  x_data_.Clear();
  y_data_.Clear();
  z_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlannerHeightmapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_count_)));
          set_has_row_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col_count;
        break;
      }

      // required int32 col_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_count_)));
          set_has_col_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_x_data;
        break;
      }

      // repeated double x_data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_x_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y_data;
        break;
      }

      // repeated double y_data = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_y_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_y_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_z_data;
        break;
      }

      // repeated double z_data = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_z_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_z_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlannerHeightmapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row_count = 1;
  if (has_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row_count(), output);
  }

  // required int32 col_count = 2;
  if (has_col_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col_count(), output);
  }

  // repeated double x_data = 3 [packed = true];
  if (this->x_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_data_cached_byte_size_);
  }
  for (int i = 0; i < this->x_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->x_data(i), output);
  }

  // repeated double y_data = 4 [packed = true];
  if (this->y_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_data_cached_byte_size_);
  }
  for (int i = 0; i < this->y_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->y_data(i), output);
  }

  // repeated double z_data = 5 [packed = true];
  if (this->z_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_z_data_cached_byte_size_);
  }
  for (int i = 0; i < this->z_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->z_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlannerHeightmapMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row_count = 1;
  if (has_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row_count(), target);
  }

  // required int32 col_count = 2;
  if (has_col_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col_count(), target);
  }

  // repeated double x_data = 3 [packed = true];
  if (this->x_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->x_data(i), target);
  }

  // repeated double y_data = 4 [packed = true];
  if (this->y_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->y_data(i), target);
  }

  // repeated double z_data = 5 [packed = true];
  if (this->z_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _z_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->z_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->z_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlannerHeightmapMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row_count = 1;
    if (has_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_count());
    }

    // required int32 col_count = 2;
    if (has_col_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col_count());
    }

  }
  // repeated double x_data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->x_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double y_data = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->y_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double z_data = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->z_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _z_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerHeightmapMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlannerHeightmapMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlannerHeightmapMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlannerHeightmapMsg::MergeFrom(const PlannerHeightmapMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_data_.MergeFrom(from.x_data_);
  y_data_.MergeFrom(from.y_data_);
  z_data_.MergeFrom(from.z_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row_count()) {
      set_row_count(from.row_count());
    }
    if (from.has_col_count()) {
      set_col_count(from.col_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlannerHeightmapMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerHeightmapMsg::CopyFrom(const PlannerHeightmapMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerHeightmapMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlannerHeightmapMsg::Swap(PlannerHeightmapMsg* other) {
  if (other != this) {
    std::swap(row_count_, other->row_count_);
    std::swap(col_count_, other->col_count_);
    x_data_.Swap(&other->x_data_);
    y_data_.Swap(&other->y_data_);
    z_data_.Swap(&other->z_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlannerHeightmapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlannerHeightmapMsg_descriptor_;
  metadata.reflection = PlannerHeightmapMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlannerMotionSampleMsg::kXFieldNumber;
const int PlannerMotionSampleMsg::kYFieldNumber;
const int PlannerMotionSampleMsg::kZFieldNumber;
const int PlannerMotionSampleMsg::kRFieldNumber;
const int PlannerMotionSampleMsg::kPFieldNumber;
const int PlannerMotionSampleMsg::kQFieldNumber;
const int PlannerMotionSampleMsg::kVelocityFieldNumber;
#endif  // !_MSC_VER

PlannerMotionSampleMsg::PlannerMotionSampleMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlannerMotionSampleMsg::InitAsDefaultInstance() {
}

PlannerMotionSampleMsg::PlannerMotionSampleMsg(const PlannerMotionSampleMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlannerMotionSampleMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlannerMotionSampleMsg::~PlannerMotionSampleMsg() {
  SharedDtor();
}

void PlannerMotionSampleMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlannerMotionSampleMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerMotionSampleMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlannerMotionSampleMsg_descriptor_;
}

const PlannerMotionSampleMsg& PlannerMotionSampleMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarPlanner_2eproto();
  return *default_instance_;
}

PlannerMotionSampleMsg* PlannerMotionSampleMsg::default_instance_ = NULL;

PlannerMotionSampleMsg* PlannerMotionSampleMsg::New() const {
  return new PlannerMotionSampleMsg;
}

void PlannerMotionSampleMsg::Clear() {
  x_.Clear();
  y_.Clear();
  z_.Clear();
  r_.Clear();
  p_.Clear();
  q_.Clear();
  velocity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlannerMotionSampleMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double x = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_y;
        break;
      }

      // repeated double y = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_z;
        break;
      }

      // repeated double z = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_z())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_z())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_r;
        break;
      }

      // repeated double r = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_r())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_r())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_p;
        break;
      }

      // repeated double p = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_p())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_p())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_q;
        break;
      }

      // repeated double q = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_q())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_q())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_velocity;
        break;
      }

      // repeated double velocity = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58, input, this->mutable_velocity())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlannerMotionSampleMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double x = 1 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->x(i), output);
  }

  // repeated double y = 2 [packed = true];
  if (this->y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_cached_byte_size_);
  }
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->y(i), output);
  }

  // repeated double z = 3 [packed = true];
  if (this->z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_z_cached_byte_size_);
  }
  for (int i = 0; i < this->z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->z(i), output);
  }

  // repeated double r = 4 [packed = true];
  if (this->r_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_r_cached_byte_size_);
  }
  for (int i = 0; i < this->r_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->r(i), output);
  }

  // repeated double p = 5 [packed = true];
  if (this->p_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_p_cached_byte_size_);
  }
  for (int i = 0; i < this->p_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->p(i), output);
  }

  // repeated double q = 6 [packed = true];
  if (this->q_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_q_cached_byte_size_);
  }
  for (int i = 0; i < this->q_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->q(i), output);
  }

  // repeated double velocity = 7 [packed = true];
  if (this->velocity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_velocity_cached_byte_size_);
  }
  for (int i = 0; i < this->velocity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->velocity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlannerMotionSampleMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double x = 1 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->x(i), target);
  }

  // repeated double y = 2 [packed = true];
  if (this->y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->y(i), target);
  }

  // repeated double z = 3 [packed = true];
  if (this->z_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _z_cached_byte_size_, target);
  }
  for (int i = 0; i < this->z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->z(i), target);
  }

  // repeated double r = 4 [packed = true];
  if (this->r_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _r_cached_byte_size_, target);
  }
  for (int i = 0; i < this->r_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->r(i), target);
  }

  // repeated double p = 5 [packed = true];
  if (this->p_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _p_cached_byte_size_, target);
  }
  for (int i = 0; i < this->p_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->p(i), target);
  }

  // repeated double q = 6 [packed = true];
  if (this->q_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _q_cached_byte_size_, target);
  }
  for (int i = 0; i < this->q_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->q(i), target);
  }

  // repeated double velocity = 7 [packed = true];
  if (this->velocity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _velocity_cached_byte_size_, target);
  }
  for (int i = 0; i < this->velocity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->velocity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlannerMotionSampleMsg::ByteSize() const {
  int total_size = 0;

  // repeated double x = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double y = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->y_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double z = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->z_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _z_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double r = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->r_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _r_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double p = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->p_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _p_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double q = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->q_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _q_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double velocity = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->velocity_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _velocity_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerMotionSampleMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlannerMotionSampleMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlannerMotionSampleMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlannerMotionSampleMsg::MergeFrom(const PlannerMotionSampleMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  r_.MergeFrom(from.r_);
  p_.MergeFrom(from.p_);
  q_.MergeFrom(from.q_);
  velocity_.MergeFrom(from.velocity_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlannerMotionSampleMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerMotionSampleMsg::CopyFrom(const PlannerMotionSampleMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerMotionSampleMsg::IsInitialized() const {

  return true;
}

void PlannerMotionSampleMsg::Swap(PlannerMotionSampleMsg* other) {
  if (other != this) {
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    z_.Swap(&other->z_);
    r_.Swap(&other->r_);
    p_.Swap(&other->p_);
    q_.Swap(&other->q_);
    velocity_.Swap(&other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlannerMotionSampleMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlannerMotionSampleMsg_descriptor_;
  metadata.reflection = PlannerMotionSampleMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlannerSplineMsg::kXValuesFieldNumber;
const int PlannerSplineMsg::kYValuesFieldNumber;
const int PlannerSplineMsg::kSolvedGoalPoseFieldNumber;
#endif  // !_MSC_VER

PlannerSplineMsg::PlannerSplineMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlannerSplineMsg::InitAsDefaultInstance() {
}

PlannerSplineMsg::PlannerSplineMsg(const PlannerSplineMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlannerSplineMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlannerSplineMsg::~PlannerSplineMsg() {
  SharedDtor();
}

void PlannerSplineMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlannerSplineMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerSplineMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlannerSplineMsg_descriptor_;
}

const PlannerSplineMsg& PlannerSplineMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarPlanner_2eproto();
  return *default_instance_;
}

PlannerSplineMsg* PlannerSplineMsg::default_instance_ = NULL;

PlannerSplineMsg* PlannerSplineMsg::New() const {
  return new PlannerSplineMsg;
}

void PlannerSplineMsg::Clear() {
  x_values_.Clear();
  y_values_.Clear();
  solved_goal_pose_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlannerSplineMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double x_values = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_x_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_y_values;
        break;
      }

      // repeated double y_values = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_y_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_y_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_solved_goal_pose;
        break;
      }

      // repeated double solved_goal_pose = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solved_goal_pose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_solved_goal_pose())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_solved_goal_pose())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlannerSplineMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double x_values = 1 [packed = true];
  if (this->x_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_values_cached_byte_size_);
  }
  for (int i = 0; i < this->x_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->x_values(i), output);
  }

  // repeated double y_values = 2 [packed = true];
  if (this->y_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_values_cached_byte_size_);
  }
  for (int i = 0; i < this->y_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->y_values(i), output);
  }

  // repeated double solved_goal_pose = 3 [packed = true];
  if (this->solved_goal_pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_solved_goal_pose_cached_byte_size_);
  }
  for (int i = 0; i < this->solved_goal_pose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->solved_goal_pose(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlannerSplineMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double x_values = 1 [packed = true];
  if (this->x_values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->x_values(i), target);
  }

  // repeated double y_values = 2 [packed = true];
  if (this->y_values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->y_values(i), target);
  }

  // repeated double solved_goal_pose = 3 [packed = true];
  if (this->solved_goal_pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _solved_goal_pose_cached_byte_size_, target);
  }
  for (int i = 0; i < this->solved_goal_pose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->solved_goal_pose(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlannerSplineMsg::ByteSize() const {
  int total_size = 0;

  // repeated double x_values = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->x_values_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double y_values = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->y_values_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double solved_goal_pose = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->solved_goal_pose_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _solved_goal_pose_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerSplineMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlannerSplineMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlannerSplineMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlannerSplineMsg::MergeFrom(const PlannerSplineMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_values_.MergeFrom(from.x_values_);
  y_values_.MergeFrom(from.y_values_);
  solved_goal_pose_.MergeFrom(from.solved_goal_pose_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlannerSplineMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerSplineMsg::CopyFrom(const PlannerSplineMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerSplineMsg::IsInitialized() const {

  return true;
}

void PlannerSplineMsg::Swap(PlannerSplineMsg* other) {
  if (other != this) {
    x_values_.Swap(&other->x_values_);
    y_values_.Swap(&other->y_values_);
    solved_goal_pose_.Swap(&other->solved_goal_pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlannerSplineMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlannerSplineMsg_descriptor_;
  metadata.reflection = PlannerSplineMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterPlannerReqMsg::kConfigFieldNumber;
const int RegisterPlannerReqMsg::kPolicyFieldNumber;
const int RegisterPlannerReqMsg::kStatusFieldNumber;
const int RegisterPlannerReqMsg::kHeightmapFieldNumber;
const int RegisterPlannerReqMsg::kMotionSampleFieldNumber;
const int RegisterPlannerReqMsg::kSplineFieldNumber;
const int RegisterPlannerReqMsg::kTauFieldNumber;
const int RegisterPlannerReqMsg::kReqNodeNameFieldNumber;
#endif  // !_MSC_VER

RegisterPlannerReqMsg::RegisterPlannerReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterPlannerReqMsg::InitAsDefaultInstance() {
  config_ = const_cast< ::pb::PlannerConfigMsg*>(&::pb::PlannerConfigMsg::default_instance());
  policy_ = const_cast< ::pb::PlannerPolicyMsg*>(&::pb::PlannerPolicyMsg::default_instance());
  status_ = const_cast< ::pb::PlannerStatusMsg*>(&::pb::PlannerStatusMsg::default_instance());
  heightmap_ = const_cast< ::pb::PlannerHeightmapMsg*>(&::pb::PlannerHeightmapMsg::default_instance());
  motion_sample_ = const_cast< ::pb::PlannerMotionSampleMsg*>(&::pb::PlannerMotionSampleMsg::default_instance());
  spline_ = const_cast< ::pb::PlannerSplineMsg*>(&::pb::PlannerSplineMsg::default_instance());
}

RegisterPlannerReqMsg::RegisterPlannerReqMsg(const RegisterPlannerReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterPlannerReqMsg::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  policy_ = NULL;
  status_ = NULL;
  heightmap_ = NULL;
  motion_sample_ = NULL;
  spline_ = NULL;
  tau_ = 0u;
  req_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterPlannerReqMsg::~RegisterPlannerReqMsg() {
  SharedDtor();
}

void RegisterPlannerReqMsg::SharedDtor() {
  if (req_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete req_node_name_;
  }
  if (this != default_instance_) {
    delete config_;
    delete policy_;
    delete status_;
    delete heightmap_;
    delete motion_sample_;
    delete spline_;
  }
}

void RegisterPlannerReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterPlannerReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterPlannerReqMsg_descriptor_;
}

const RegisterPlannerReqMsg& RegisterPlannerReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarPlanner_2eproto();
  return *default_instance_;
}

RegisterPlannerReqMsg* RegisterPlannerReqMsg::default_instance_ = NULL;

RegisterPlannerReqMsg* RegisterPlannerReqMsg::New() const {
  return new RegisterPlannerReqMsg;
}

void RegisterPlannerReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_config()) {
      if (config_ != NULL) config_->::pb::PlannerConfigMsg::Clear();
    }
    if (has_policy()) {
      if (policy_ != NULL) policy_->::pb::PlannerPolicyMsg::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::pb::PlannerStatusMsg::Clear();
    }
    if (has_heightmap()) {
      if (heightmap_ != NULL) heightmap_->::pb::PlannerHeightmapMsg::Clear();
    }
    if (has_motion_sample()) {
      if (motion_sample_ != NULL) motion_sample_->::pb::PlannerMotionSampleMsg::Clear();
    }
    if (has_spline()) {
      if (spline_ != NULL) spline_->::pb::PlannerSplineMsg::Clear();
    }
    tau_ = 0u;
    if (has_req_node_name()) {
      if (req_node_name_ != &::google::protobuf::internal::kEmptyString) {
        req_node_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterPlannerReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PlannerConfigMsg config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_policy;
        break;
      }

      // optional .pb.PlannerPolicyMsg policy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .pb.PlannerStatusMsg status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heightmap;
        break;
      }

      // optional .pb.PlannerHeightmapMsg heightmap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heightmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heightmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motion_sample;
        break;
      }

      // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motion_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_sample()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_spline;
        break;
      }

      // optional .pb.PlannerSplineMsg spline = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tau;
        break;
      }

      // optional uint32 tau = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_req_node_name;
        break;
      }

      // required string req_node_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req_node_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->req_node_name().data(), this->req_node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterPlannerReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.PlannerConfigMsg config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(), output);
  }

  // optional .pb.PlannerPolicyMsg policy = 2;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->policy(), output);
  }

  // optional .pb.PlannerStatusMsg status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  // optional .pb.PlannerHeightmapMsg heightmap = 4;
  if (has_heightmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->heightmap(), output);
  }

  // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
  if (has_motion_sample()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->motion_sample(), output);
  }

  // optional .pb.PlannerSplineMsg spline = 6;
  if (has_spline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->spline(), output);
  }

  // optional uint32 tau = 7;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tau(), output);
  }

  // required string req_node_name = 8;
  if (has_req_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_node_name().data(), this->req_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->req_node_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterPlannerReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.PlannerConfigMsg config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->config(), target);
  }

  // optional .pb.PlannerPolicyMsg policy = 2;
  if (has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->policy(), target);
  }

  // optional .pb.PlannerStatusMsg status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  // optional .pb.PlannerHeightmapMsg heightmap = 4;
  if (has_heightmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->heightmap(), target);
  }

  // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
  if (has_motion_sample()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->motion_sample(), target);
  }

  // optional .pb.PlannerSplineMsg spline = 6;
  if (has_spline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->spline(), target);
  }

  // optional uint32 tau = 7;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tau(), target);
  }

  // required string req_node_name = 8;
  if (has_req_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_node_name().data(), this->req_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->req_node_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterPlannerReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PlannerConfigMsg config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional .pb.PlannerPolicyMsg policy = 2;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->policy());
    }

    // optional .pb.PlannerStatusMsg status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .pb.PlannerHeightmapMsg heightmap = 4;
    if (has_heightmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heightmap());
    }

    // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
    if (has_motion_sample()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_sample());
    }

    // optional .pb.PlannerSplineMsg spline = 6;
    if (has_spline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spline());
    }

    // optional uint32 tau = 7;
    if (has_tau()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tau());
    }

    // required string req_node_name = 8;
    if (has_req_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_node_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterPlannerReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterPlannerReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterPlannerReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterPlannerReqMsg::MergeFrom(const RegisterPlannerReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::pb::PlannerConfigMsg::MergeFrom(from.config());
    }
    if (from.has_policy()) {
      mutable_policy()->::pb::PlannerPolicyMsg::MergeFrom(from.policy());
    }
    if (from.has_status()) {
      mutable_status()->::pb::PlannerStatusMsg::MergeFrom(from.status());
    }
    if (from.has_heightmap()) {
      mutable_heightmap()->::pb::PlannerHeightmapMsg::MergeFrom(from.heightmap());
    }
    if (from.has_motion_sample()) {
      mutable_motion_sample()->::pb::PlannerMotionSampleMsg::MergeFrom(from.motion_sample());
    }
    if (from.has_spline()) {
      mutable_spline()->::pb::PlannerSplineMsg::MergeFrom(from.spline());
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
    if (from.has_req_node_name()) {
      set_req_node_name(from.req_node_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterPlannerReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPlannerReqMsg::CopyFrom(const RegisterPlannerReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPlannerReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  if (has_heightmap()) {
    if (!this->heightmap().IsInitialized()) return false;
  }
  return true;
}

void RegisterPlannerReqMsg::Swap(RegisterPlannerReqMsg* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(policy_, other->policy_);
    std::swap(status_, other->status_);
    std::swap(heightmap_, other->heightmap_);
    std::swap(motion_sample_, other->motion_sample_);
    std::swap(spline_, other->spline_);
    std::swap(tau_, other->tau_);
    std::swap(req_node_name_, other->req_node_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterPlannerReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterPlannerReqMsg_descriptor_;
  metadata.reflection = RegisterPlannerReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterPlannerRepMsg::kConfigFieldNumber;
const int RegisterPlannerRepMsg::kPolicyFieldNumber;
const int RegisterPlannerRepMsg::kStatusFieldNumber;
const int RegisterPlannerRepMsg::kHeightmapFieldNumber;
const int RegisterPlannerRepMsg::kMotionSampleFieldNumber;
const int RegisterPlannerRepMsg::kSplineFieldNumber;
const int RegisterPlannerRepMsg::kSuccessFieldNumber;
const int RegisterPlannerRepMsg::kTauFieldNumber;
const int RegisterPlannerRepMsg::kRepNodeNameFieldNumber;
#endif  // !_MSC_VER

RegisterPlannerRepMsg::RegisterPlannerRepMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterPlannerRepMsg::InitAsDefaultInstance() {
  config_ = const_cast< ::pb::PlannerConfigMsg*>(&::pb::PlannerConfigMsg::default_instance());
  policy_ = const_cast< ::pb::PlannerPolicyMsg*>(&::pb::PlannerPolicyMsg::default_instance());
  status_ = const_cast< ::pb::PlannerStatusMsg*>(&::pb::PlannerStatusMsg::default_instance());
  heightmap_ = const_cast< ::pb::PlannerHeightmapMsg*>(&::pb::PlannerHeightmapMsg::default_instance());
  motion_sample_ = const_cast< ::pb::PlannerMotionSampleMsg*>(&::pb::PlannerMotionSampleMsg::default_instance());
  spline_ = const_cast< ::pb::PlannerSplineMsg*>(&::pb::PlannerSplineMsg::default_instance());
}

RegisterPlannerRepMsg::RegisterPlannerRepMsg(const RegisterPlannerRepMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterPlannerRepMsg::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  policy_ = NULL;
  status_ = NULL;
  heightmap_ = NULL;
  motion_sample_ = NULL;
  spline_ = NULL;
  success_ = 0u;
  tau_ = 0u;
  rep_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterPlannerRepMsg::~RegisterPlannerRepMsg() {
  SharedDtor();
}

void RegisterPlannerRepMsg::SharedDtor() {
  if (rep_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rep_node_name_;
  }
  if (this != default_instance_) {
    delete config_;
    delete policy_;
    delete status_;
    delete heightmap_;
    delete motion_sample_;
    delete spline_;
  }
}

void RegisterPlannerRepMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterPlannerRepMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterPlannerRepMsg_descriptor_;
}

const RegisterPlannerRepMsg& RegisterPlannerRepMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarPlanner_2eproto();
  return *default_instance_;
}

RegisterPlannerRepMsg* RegisterPlannerRepMsg::default_instance_ = NULL;

RegisterPlannerRepMsg* RegisterPlannerRepMsg::New() const {
  return new RegisterPlannerRepMsg;
}

void RegisterPlannerRepMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_config()) {
      if (config_ != NULL) config_->::pb::PlannerConfigMsg::Clear();
    }
    if (has_policy()) {
      if (policy_ != NULL) policy_->::pb::PlannerPolicyMsg::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::pb::PlannerStatusMsg::Clear();
    }
    if (has_heightmap()) {
      if (heightmap_ != NULL) heightmap_->::pb::PlannerHeightmapMsg::Clear();
    }
    if (has_motion_sample()) {
      if (motion_sample_ != NULL) motion_sample_->::pb::PlannerMotionSampleMsg::Clear();
    }
    if (has_spline()) {
      if (spline_ != NULL) spline_->::pb::PlannerSplineMsg::Clear();
    }
    success_ = 0u;
    tau_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_rep_node_name()) {
      if (rep_node_name_ != &::google::protobuf::internal::kEmptyString) {
        rep_node_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterPlannerRepMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PlannerConfigMsg config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_policy;
        break;
      }

      // optional .pb.PlannerPolicyMsg policy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .pb.PlannerStatusMsg status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heightmap;
        break;
      }

      // optional .pb.PlannerHeightmapMsg heightmap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heightmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heightmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motion_sample;
        break;
      }

      // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motion_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_sample()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_spline;
        break;
      }

      // optional .pb.PlannerSplineMsg spline = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_success;
        break;
      }

      // optional uint32 success = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tau;
        break;
      }

      // optional uint32 tau = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rep_node_name;
        break;
      }

      // optional string rep_node_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rep_node_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rep_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rep_node_name().data(), this->rep_node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterPlannerRepMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.PlannerConfigMsg config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(), output);
  }

  // optional .pb.PlannerPolicyMsg policy = 2;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->policy(), output);
  }

  // optional .pb.PlannerStatusMsg status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  // optional .pb.PlannerHeightmapMsg heightmap = 4;
  if (has_heightmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->heightmap(), output);
  }

  // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
  if (has_motion_sample()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->motion_sample(), output);
  }

  // optional .pb.PlannerSplineMsg spline = 6;
  if (has_spline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->spline(), output);
  }

  // optional uint32 success = 7;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->success(), output);
  }

  // optional uint32 tau = 8;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tau(), output);
  }

  // optional string rep_node_name = 9;
  if (has_rep_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rep_node_name().data(), this->rep_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->rep_node_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterPlannerRepMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.PlannerConfigMsg config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->config(), target);
  }

  // optional .pb.PlannerPolicyMsg policy = 2;
  if (has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->policy(), target);
  }

  // optional .pb.PlannerStatusMsg status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  // optional .pb.PlannerHeightmapMsg heightmap = 4;
  if (has_heightmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->heightmap(), target);
  }

  // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
  if (has_motion_sample()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->motion_sample(), target);
  }

  // optional .pb.PlannerSplineMsg spline = 6;
  if (has_spline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->spline(), target);
  }

  // optional uint32 success = 7;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->success(), target);
  }

  // optional uint32 tau = 8;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tau(), target);
  }

  // optional string rep_node_name = 9;
  if (has_rep_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rep_node_name().data(), this->rep_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->rep_node_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterPlannerRepMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PlannerConfigMsg config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional .pb.PlannerPolicyMsg policy = 2;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->policy());
    }

    // optional .pb.PlannerStatusMsg status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .pb.PlannerHeightmapMsg heightmap = 4;
    if (has_heightmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heightmap());
    }

    // optional .pb.PlannerMotionSampleMsg motion_sample = 5;
    if (has_motion_sample()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_sample());
    }

    // optional .pb.PlannerSplineMsg spline = 6;
    if (has_spline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spline());
    }

    // optional uint32 success = 7;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->success());
    }

    // optional uint32 tau = 8;
    if (has_tau()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tau());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string rep_node_name = 9;
    if (has_rep_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rep_node_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterPlannerRepMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterPlannerRepMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterPlannerRepMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterPlannerRepMsg::MergeFrom(const RegisterPlannerRepMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::pb::PlannerConfigMsg::MergeFrom(from.config());
    }
    if (from.has_policy()) {
      mutable_policy()->::pb::PlannerPolicyMsg::MergeFrom(from.policy());
    }
    if (from.has_status()) {
      mutable_status()->::pb::PlannerStatusMsg::MergeFrom(from.status());
    }
    if (from.has_heightmap()) {
      mutable_heightmap()->::pb::PlannerHeightmapMsg::MergeFrom(from.heightmap());
    }
    if (from.has_motion_sample()) {
      mutable_motion_sample()->::pb::PlannerMotionSampleMsg::MergeFrom(from.motion_sample());
    }
    if (from.has_spline()) {
      mutable_spline()->::pb::PlannerSplineMsg::MergeFrom(from.spline());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rep_node_name()) {
      set_rep_node_name(from.rep_node_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterPlannerRepMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPlannerRepMsg::CopyFrom(const RegisterPlannerRepMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPlannerRepMsg::IsInitialized() const {

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  if (has_heightmap()) {
    if (!this->heightmap().IsInitialized()) return false;
  }
  return true;
}

void RegisterPlannerRepMsg::Swap(RegisterPlannerRepMsg* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(policy_, other->policy_);
    std::swap(status_, other->status_);
    std::swap(heightmap_, other->heightmap_);
    std::swap(motion_sample_, other->motion_sample_);
    std::swap(spline_, other->spline_);
    std::swap(success_, other->success_);
    std::swap(tau_, other->tau_);
    std::swap(rep_node_name_, other->rep_node_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterPlannerRepMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterPlannerRepMsg_descriptor_;
  metadata.reflection = RegisterPlannerRepMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
