// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SlamServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SlamServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PlaceMapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceMapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerUploadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUploadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerUploadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUploadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerQueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerQueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerDownloadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerDownloadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerDownloadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerDownloadResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlaceMatcherType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SlamServer_2eproto() {
  protobuf_AddDesc_SlamServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SlamServer.proto");
  GOOGLE_CHECK(file != NULL);
  PlaceMapMsg_descriptor_ = file->message_type(0);
  static const int PlaceMapMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceMapMsg, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceMapMsg, leaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceMapMsg, place_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceMapMsg, templates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceMapMsg, dbow_places_),
  };
  PlaceMapMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceMapMsg_descriptor_,
      PlaceMapMsg::default_instance_,
      PlaceMapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceMapMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceMapMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceMapMsg));
  ServerUploadRequest_descriptor_ = file->message_type(1);
  static const int ServerUploadRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUploadRequest, map_),
  };
  ServerUploadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUploadRequest_descriptor_,
      ServerUploadRequest::default_instance_,
      ServerUploadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUploadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUploadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUploadRequest));
  ServerUploadResponse_descriptor_ = file->message_type(2);
  static const int ServerUploadResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUploadResponse, success_),
  };
  ServerUploadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUploadResponse_descriptor_,
      ServerUploadResponse::default_instance_,
      ServerUploadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUploadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUploadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUploadResponse));
  ServerQueryRequest_descriptor_ = file->message_type(3);
  static const int ServerQueryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryRequest, images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryRequest, rig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryRequest, frame_),
  };
  ServerQueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerQueryRequest_descriptor_,
      ServerQueryRequest::default_instance_,
      ServerQueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerQueryRequest));
  ServerQueryResponse_descriptor_ = file->message_type(4);
  static const int ServerQueryResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryResponse, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryResponse, measurements_),
  };
  ServerQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerQueryResponse_descriptor_,
      ServerQueryResponse::default_instance_,
      ServerQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerQueryResponse));
  ServerDownloadRequest_descriptor_ = file->message_type(5);
  static const int ServerDownloadRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadRequest, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadRequest, last_download_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadRequest, excluding_map_),
  };
  ServerDownloadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerDownloadRequest_descriptor_,
      ServerDownloadRequest::default_instance_,
      ServerDownloadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerDownloadRequest));
  ServerDownloadResponse_descriptor_ = file->message_type(6);
  static const int ServerDownloadResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadResponse, map_),
  };
  ServerDownloadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerDownloadResponse_descriptor_,
      ServerDownloadResponse::default_instance_,
      ServerDownloadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDownloadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerDownloadResponse));
  PlaceMatcherType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SlamServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceMapMsg_descriptor_, &PlaceMapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUploadRequest_descriptor_, &ServerUploadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUploadResponse_descriptor_, &ServerUploadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerQueryRequest_descriptor_, &ServerQueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerQueryResponse_descriptor_, &ServerQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerDownloadRequest_descriptor_, &ServerDownloadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerDownloadResponse_descriptor_, &ServerDownloadResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SlamServer_2eproto() {
  delete PlaceMapMsg::default_instance_;
  delete PlaceMapMsg_reflection_;
  delete ServerUploadRequest::default_instance_;
  delete ServerUploadRequest_reflection_;
  delete ServerUploadResponse::default_instance_;
  delete ServerUploadResponse_reflection_;
  delete ServerQueryRequest::default_instance_;
  delete ServerQueryRequest_reflection_;
  delete ServerQueryResponse::default_instance_;
  delete ServerQueryResponse_reflection_;
  delete ServerDownloadRequest::default_instance_;
  delete ServerDownloadRequest_reflection_;
  delete ServerDownloadResponse::default_instance_;
  delete ServerDownloadResponse_reflection_;
}

void protobuf_AddDesc_SlamServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_rslam_2eproto();
  ::pb::protobuf_AddDesc_frontend_2eproto();
  ::pb::protobuf_AddDesc_template_2eproto();
  ::pb::protobuf_AddDesc_dbow_2eproto();
  ::pb::protobuf_AddDesc_Camera_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SlamServer.proto\022\002pb\032\013rslam.proto\032\016fro"
    "ntend.proto\032\016template.proto\032\ndbow.proto\032"
    "\014Camera.proto\"\306\001\n\013PlaceMapMsg\022\033\n\003map\030\001 \001"
    "(\0132\016.pb.SlamMapMsg\022%\n\004leaf\030\002 \003(\0132\027.pb.Re"
    "ferenceFrameIdMsg\022(\n\nplace_type\030\003 \001(\0162\024."
    "pb.PlaceMatcherType\022\"\n\ttemplates\030\004 \003(\0132\017"
    ".pb.TemplateMsg\022%\n\013dbow_places\030\005 \003(\0132\020.p"
    "b.DBoWPlaceMsg\"3\n\023ServerUploadRequest\022\034\n"
    "\003map\030\001 \001(\0132\017.pb.PlaceMapMsg\"\'\n\024ServerUpl"
    "oadResponse\022\017\n\007success\030\001 \001(\010\"x\n\022ServerQu"
    "eryRequest\022\035\n\006images\030\001 \001(\0132\r.pb.CameraMs"
    "g\022\035\n\003rig\030\002 \001(\0132\020.pb.CameraRigMsg\022$\n\005fram"
    "e\030\003 \001(\0132\025.pb.ReferenceFrameMsg\"}\n\023Server"
    "QueryResponse\022\017\n\007success\030\001 \001(\010\022\"\n\004edge\030\002"
    " \001(\0132\024.pb.TransformEdgeMsg\0221\n\014measuremen"
    "ts\030\003 \003(\0132\033.pb.MultiViewMeasurementMsg\"\226\001"
    "\n\025ServerDownloadRequest\022)\n\010frame_id\030\001 \001("
    "\0132\027.pb.ReferenceFrameIdMsg\022\r\n\005depth\030\002 \001("
    "\004\022\032\n\022last_download_time\030\003 \001(\001\022\'\n\rexcludi"
    "ng_map\030\004 \001(\0132\020.pb.SessionIdMsg\"Z\n\026Server"
    "DownloadResponse\022\017\n\007success\030\001 \001(\010\022\021\n\ttim"
    "estamp\030\002 \001(\001\022\034\n\003map\030\003 \001(\0132\017.pb.PlaceMapM"
    "sg*:\n\020PlaceMatcherType\022\010\n\004DBOW\020\001\022\014\n\010TEMP"
    "LATE\020\002\022\016\n\nMULTI_DBOW\020\003", 942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SlamServer.proto", &protobuf_RegisterTypes);
  PlaceMapMsg::default_instance_ = new PlaceMapMsg();
  ServerUploadRequest::default_instance_ = new ServerUploadRequest();
  ServerUploadResponse::default_instance_ = new ServerUploadResponse();
  ServerQueryRequest::default_instance_ = new ServerQueryRequest();
  ServerQueryResponse::default_instance_ = new ServerQueryResponse();
  ServerDownloadRequest::default_instance_ = new ServerDownloadRequest();
  ServerDownloadResponse::default_instance_ = new ServerDownloadResponse();
  PlaceMapMsg::default_instance_->InitAsDefaultInstance();
  ServerUploadRequest::default_instance_->InitAsDefaultInstance();
  ServerUploadResponse::default_instance_->InitAsDefaultInstance();
  ServerQueryRequest::default_instance_->InitAsDefaultInstance();
  ServerQueryResponse::default_instance_->InitAsDefaultInstance();
  ServerDownloadRequest::default_instance_->InitAsDefaultInstance();
  ServerDownloadResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SlamServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SlamServer_2eproto {
  StaticDescriptorInitializer_SlamServer_2eproto() {
    protobuf_AddDesc_SlamServer_2eproto();
  }
} static_descriptor_initializer_SlamServer_2eproto_;
const ::google::protobuf::EnumDescriptor* PlaceMatcherType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceMatcherType_descriptor_;
}
bool PlaceMatcherType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceMapMsg::kMapFieldNumber;
const int PlaceMapMsg::kLeafFieldNumber;
const int PlaceMapMsg::kPlaceTypeFieldNumber;
const int PlaceMapMsg::kTemplatesFieldNumber;
const int PlaceMapMsg::kDbowPlacesFieldNumber;
#endif  // !_MSC_VER

PlaceMapMsg::PlaceMapMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceMapMsg::InitAsDefaultInstance() {
  map_ = const_cast< ::pb::SlamMapMsg*>(&::pb::SlamMapMsg::default_instance());
}

PlaceMapMsg::PlaceMapMsg(const PlaceMapMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceMapMsg::SharedCtor() {
  _cached_size_ = 0;
  map_ = NULL;
  place_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceMapMsg::~PlaceMapMsg() {
  SharedDtor();
}

void PlaceMapMsg::SharedDtor() {
  if (this != default_instance_) {
    delete map_;
  }
}

void PlaceMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceMapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceMapMsg_descriptor_;
}

const PlaceMapMsg& PlaceMapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SlamServer_2eproto();
  return *default_instance_;
}

PlaceMapMsg* PlaceMapMsg::default_instance_ = NULL;

PlaceMapMsg* PlaceMapMsg::New() const {
  return new PlaceMapMsg;
}

void PlaceMapMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map()) {
      if (map_ != NULL) map_->::pb::SlamMapMsg::Clear();
    }
    place_type_ = 1;
  }
  leaf_.Clear();
  templates_.Clear();
  dbow_places_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.SlamMapMsg map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leaf;
        break;
      }

      // repeated .pb.ReferenceFrameIdMsg leaf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leaf;
        if (input->ExpectTag(24)) goto parse_place_type;
        break;
      }

      // optional .pb.PlaceMatcherType place_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::PlaceMatcherType_IsValid(value)) {
            set_place_type(static_cast< ::pb::PlaceMatcherType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_templates;
        break;
      }

      // repeated .pb.TemplateMsg templates = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_templates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_templates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_templates;
        if (input->ExpectTag(42)) goto parse_dbow_places;
        break;
      }

      // repeated .pb.DBoWPlaceMsg dbow_places = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbow_places:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dbow_places()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dbow_places;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.SlamMapMsg map = 1;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map(), output);
  }

  // repeated .pb.ReferenceFrameIdMsg leaf = 2;
  for (int i = 0; i < this->leaf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leaf(i), output);
  }

  // optional .pb.PlaceMatcherType place_type = 3;
  if (has_place_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->place_type(), output);
  }

  // repeated .pb.TemplateMsg templates = 4;
  for (int i = 0; i < this->templates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->templates(i), output);
  }

  // repeated .pb.DBoWPlaceMsg dbow_places = 5;
  for (int i = 0; i < this->dbow_places_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dbow_places(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceMapMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.SlamMapMsg map = 1;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map(), target);
  }

  // repeated .pb.ReferenceFrameIdMsg leaf = 2;
  for (int i = 0; i < this->leaf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leaf(i), target);
  }

  // optional .pb.PlaceMatcherType place_type = 3;
  if (has_place_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->place_type(), target);
  }

  // repeated .pb.TemplateMsg templates = 4;
  for (int i = 0; i < this->templates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->templates(i), target);
  }

  // repeated .pb.DBoWPlaceMsg dbow_places = 5;
  for (int i = 0; i < this->dbow_places_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dbow_places(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceMapMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.SlamMapMsg map = 1;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map());
    }

    // optional .pb.PlaceMatcherType place_type = 3;
    if (has_place_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->place_type());
    }

  }
  // repeated .pb.ReferenceFrameIdMsg leaf = 2;
  total_size += 1 * this->leaf_size();
  for (int i = 0; i < this->leaf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaf(i));
  }

  // repeated .pb.TemplateMsg templates = 4;
  total_size += 1 * this->templates_size();
  for (int i = 0; i < this->templates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->templates(i));
  }

  // repeated .pb.DBoWPlaceMsg dbow_places = 5;
  total_size += 1 * this->dbow_places_size();
  for (int i = 0; i < this->dbow_places_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dbow_places(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceMapMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceMapMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceMapMsg::MergeFrom(const PlaceMapMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  leaf_.MergeFrom(from.leaf_);
  templates_.MergeFrom(from.templates_);
  dbow_places_.MergeFrom(from.dbow_places_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map()) {
      mutable_map()->::pb::SlamMapMsg::MergeFrom(from.map());
    }
    if (from.has_place_type()) {
      set_place_type(from.place_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceMapMsg::CopyFrom(const PlaceMapMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceMapMsg::IsInitialized() const {

  if (has_map()) {
    if (!this->map().IsInitialized()) return false;
  }
  return true;
}

void PlaceMapMsg::Swap(PlaceMapMsg* other) {
  if (other != this) {
    std::swap(map_, other->map_);
    leaf_.Swap(&other->leaf_);
    std::swap(place_type_, other->place_type_);
    templates_.Swap(&other->templates_);
    dbow_places_.Swap(&other->dbow_places_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceMapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceMapMsg_descriptor_;
  metadata.reflection = PlaceMapMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUploadRequest::kMapFieldNumber;
#endif  // !_MSC_VER

ServerUploadRequest::ServerUploadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerUploadRequest::InitAsDefaultInstance() {
  map_ = const_cast< ::pb::PlaceMapMsg*>(&::pb::PlaceMapMsg::default_instance());
}

ServerUploadRequest::ServerUploadRequest(const ServerUploadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerUploadRequest::SharedCtor() {
  _cached_size_ = 0;
  map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUploadRequest::~ServerUploadRequest() {
  SharedDtor();
}

void ServerUploadRequest::SharedDtor() {
  if (this != default_instance_) {
    delete map_;
  }
}

void ServerUploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUploadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUploadRequest_descriptor_;
}

const ServerUploadRequest& ServerUploadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SlamServer_2eproto();
  return *default_instance_;
}

ServerUploadRequest* ServerUploadRequest::default_instance_ = NULL;

ServerUploadRequest* ServerUploadRequest::New() const {
  return new ServerUploadRequest;
}

void ServerUploadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map()) {
      if (map_ != NULL) map_->::pb::PlaceMapMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PlaceMapMsg map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerUploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.PlaceMapMsg map = 1;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerUploadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.PlaceMapMsg map = 1;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerUploadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PlaceMapMsg map = 1;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUploadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUploadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUploadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUploadRequest::MergeFrom(const ServerUploadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map()) {
      mutable_map()->::pb::PlaceMapMsg::MergeFrom(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUploadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUploadRequest::CopyFrom(const ServerUploadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUploadRequest::IsInitialized() const {

  if (has_map()) {
    if (!this->map().IsInitialized()) return false;
  }
  return true;
}

void ServerUploadRequest::Swap(ServerUploadRequest* other) {
  if (other != this) {
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUploadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUploadRequest_descriptor_;
  metadata.reflection = ServerUploadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUploadResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

ServerUploadResponse::ServerUploadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerUploadResponse::InitAsDefaultInstance() {
}

ServerUploadResponse::ServerUploadResponse(const ServerUploadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerUploadResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUploadResponse::~ServerUploadResponse() {
  SharedDtor();
}

void ServerUploadResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerUploadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUploadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUploadResponse_descriptor_;
}

const ServerUploadResponse& ServerUploadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SlamServer_2eproto();
  return *default_instance_;
}

ServerUploadResponse* ServerUploadResponse::default_instance_ = NULL;

ServerUploadResponse* ServerUploadResponse::New() const {
  return new ServerUploadResponse;
}

void ServerUploadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUploadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerUploadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerUploadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerUploadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUploadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUploadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUploadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUploadResponse::MergeFrom(const ServerUploadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUploadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUploadResponse::CopyFrom(const ServerUploadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUploadResponse::IsInitialized() const {

  return true;
}

void ServerUploadResponse::Swap(ServerUploadResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUploadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUploadResponse_descriptor_;
  metadata.reflection = ServerUploadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerQueryRequest::kImagesFieldNumber;
const int ServerQueryRequest::kRigFieldNumber;
const int ServerQueryRequest::kFrameFieldNumber;
#endif  // !_MSC_VER

ServerQueryRequest::ServerQueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerQueryRequest::InitAsDefaultInstance() {
  images_ = const_cast< ::pb::CameraMsg*>(&::pb::CameraMsg::default_instance());
  rig_ = const_cast< ::pb::CameraRigMsg*>(&::pb::CameraRigMsg::default_instance());
  frame_ = const_cast< ::pb::ReferenceFrameMsg*>(&::pb::ReferenceFrameMsg::default_instance());
}

ServerQueryRequest::ServerQueryRequest(const ServerQueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerQueryRequest::SharedCtor() {
  _cached_size_ = 0;
  images_ = NULL;
  rig_ = NULL;
  frame_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerQueryRequest::~ServerQueryRequest() {
  SharedDtor();
}

void ServerQueryRequest::SharedDtor() {
  if (this != default_instance_) {
    delete images_;
    delete rig_;
    delete frame_;
  }
}

void ServerQueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerQueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerQueryRequest_descriptor_;
}

const ServerQueryRequest& ServerQueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SlamServer_2eproto();
  return *default_instance_;
}

ServerQueryRequest* ServerQueryRequest::default_instance_ = NULL;

ServerQueryRequest* ServerQueryRequest::New() const {
  return new ServerQueryRequest;
}

void ServerQueryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_images()) {
      if (images_ != NULL) images_->::pb::CameraMsg::Clear();
    }
    if (has_rig()) {
      if (rig_ != NULL) rig_->::pb::CameraRigMsg::Clear();
    }
    if (has_frame()) {
      if (frame_ != NULL) frame_->::pb::ReferenceFrameMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.CameraMsg images = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rig;
        break;
      }

      // optional .pb.CameraRigMsg rig = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_frame;
        break;
      }

      // optional .pb.ReferenceFrameMsg frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.CameraMsg images = 1;
  if (has_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->images(), output);
  }

  // optional .pb.CameraRigMsg rig = 2;
  if (has_rig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rig(), output);
  }

  // optional .pb.ReferenceFrameMsg frame = 3;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerQueryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.CameraMsg images = 1;
  if (has_images()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->images(), target);
  }

  // optional .pb.CameraRigMsg rig = 2;
  if (has_rig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rig(), target);
  }

  // optional .pb.ReferenceFrameMsg frame = 3;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerQueryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.CameraMsg images = 1;
    if (has_images()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images());
    }

    // optional .pb.CameraRigMsg rig = 2;
    if (has_rig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rig());
    }

    // optional .pb.ReferenceFrameMsg frame = 3;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerQueryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerQueryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerQueryRequest::MergeFrom(const ServerQueryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_images()) {
      mutable_images()->::pb::CameraMsg::MergeFrom(from.images());
    }
    if (from.has_rig()) {
      mutable_rig()->::pb::CameraRigMsg::MergeFrom(from.rig());
    }
    if (from.has_frame()) {
      mutable_frame()->::pb::ReferenceFrameMsg::MergeFrom(from.frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerQueryRequest::CopyFrom(const ServerQueryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerQueryRequest::IsInitialized() const {

  if (has_rig()) {
    if (!this->rig().IsInitialized()) return false;
  }
  if (has_frame()) {
    if (!this->frame().IsInitialized()) return false;
  }
  return true;
}

void ServerQueryRequest::Swap(ServerQueryRequest* other) {
  if (other != this) {
    std::swap(images_, other->images_);
    std::swap(rig_, other->rig_);
    std::swap(frame_, other->frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerQueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerQueryRequest_descriptor_;
  metadata.reflection = ServerQueryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerQueryResponse::kSuccessFieldNumber;
const int ServerQueryResponse::kEdgeFieldNumber;
const int ServerQueryResponse::kMeasurementsFieldNumber;
#endif  // !_MSC_VER

ServerQueryResponse::ServerQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerQueryResponse::InitAsDefaultInstance() {
  edge_ = const_cast< ::pb::TransformEdgeMsg*>(&::pb::TransformEdgeMsg::default_instance());
}

ServerQueryResponse::ServerQueryResponse(const ServerQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  edge_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerQueryResponse::~ServerQueryResponse() {
  SharedDtor();
}

void ServerQueryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete edge_;
  }
}

void ServerQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerQueryResponse_descriptor_;
}

const ServerQueryResponse& ServerQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SlamServer_2eproto();
  return *default_instance_;
}

ServerQueryResponse* ServerQueryResponse::default_instance_ = NULL;

ServerQueryResponse* ServerQueryResponse::New() const {
  return new ServerQueryResponse;
}

void ServerQueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_edge()) {
      if (edge_ != NULL) edge_->::pb::TransformEdgeMsg::Clear();
    }
  }
  measurements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edge;
        break;
      }

      // optional .pb.TransformEdgeMsg edge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_measurements;
        break;
      }

      // repeated .pb.MultiViewMeasurementMsg measurements = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_measurements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_measurements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_measurements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional .pb.TransformEdgeMsg edge = 2;
  if (has_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edge(), output);
  }

  // repeated .pb.MultiViewMeasurementMsg measurements = 3;
  for (int i = 0; i < this->measurements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->measurements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional .pb.TransformEdgeMsg edge = 2;
  if (has_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->edge(), target);
  }

  // repeated .pb.MultiViewMeasurementMsg measurements = 3;
  for (int i = 0; i < this->measurements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->measurements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerQueryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional .pb.TransformEdgeMsg edge = 2;
    if (has_edge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge());
    }

  }
  // repeated .pb.MultiViewMeasurementMsg measurements = 3;
  total_size += 1 * this->measurements_size();
  for (int i = 0; i < this->measurements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->measurements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerQueryResponse::MergeFrom(const ServerQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  measurements_.MergeFrom(from.measurements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_edge()) {
      mutable_edge()->::pb::TransformEdgeMsg::MergeFrom(from.edge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerQueryResponse::CopyFrom(const ServerQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerQueryResponse::IsInitialized() const {

  return true;
}

void ServerQueryResponse::Swap(ServerQueryResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(edge_, other->edge_);
    measurements_.Swap(&other->measurements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerQueryResponse_descriptor_;
  metadata.reflection = ServerQueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerDownloadRequest::kFrameIdFieldNumber;
const int ServerDownloadRequest::kDepthFieldNumber;
const int ServerDownloadRequest::kLastDownloadTimeFieldNumber;
const int ServerDownloadRequest::kExcludingMapFieldNumber;
#endif  // !_MSC_VER

ServerDownloadRequest::ServerDownloadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerDownloadRequest::InitAsDefaultInstance() {
  frame_id_ = const_cast< ::pb::ReferenceFrameIdMsg*>(&::pb::ReferenceFrameIdMsg::default_instance());
  excluding_map_ = const_cast< ::pb::SessionIdMsg*>(&::pb::SessionIdMsg::default_instance());
}

ServerDownloadRequest::ServerDownloadRequest(const ServerDownloadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerDownloadRequest::SharedCtor() {
  _cached_size_ = 0;
  frame_id_ = NULL;
  depth_ = GOOGLE_ULONGLONG(0);
  last_download_time_ = 0;
  excluding_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerDownloadRequest::~ServerDownloadRequest() {
  SharedDtor();
}

void ServerDownloadRequest::SharedDtor() {
  if (this != default_instance_) {
    delete frame_id_;
    delete excluding_map_;
  }
}

void ServerDownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerDownloadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerDownloadRequest_descriptor_;
}

const ServerDownloadRequest& ServerDownloadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SlamServer_2eproto();
  return *default_instance_;
}

ServerDownloadRequest* ServerDownloadRequest::default_instance_ = NULL;

ServerDownloadRequest* ServerDownloadRequest::New() const {
  return new ServerDownloadRequest;
}

void ServerDownloadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_frame_id()) {
      if (frame_id_ != NULL) frame_id_->::pb::ReferenceFrameIdMsg::Clear();
    }
    depth_ = GOOGLE_ULONGLONG(0);
    last_download_time_ = 0;
    if (has_excluding_map()) {
      if (excluding_map_ != NULL) excluding_map_->::pb::SessionIdMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerDownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ReferenceFrameIdMsg frame_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_depth;
        break;
      }

      // optional uint64 depth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_download_time;
        break;
      }

      // optional double last_download_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_download_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_download_time_)));
          set_has_last_download_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_excluding_map;
        break;
      }

      // optional .pb.SessionIdMsg excluding_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_excluding_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_excluding_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerDownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ReferenceFrameIdMsg frame_id = 1;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frame_id(), output);
  }

  // optional uint64 depth = 2;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->depth(), output);
  }

  // optional double last_download_time = 3;
  if (has_last_download_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_download_time(), output);
  }

  // optional .pb.SessionIdMsg excluding_map = 4;
  if (has_excluding_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->excluding_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerDownloadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ReferenceFrameIdMsg frame_id = 1;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frame_id(), target);
  }

  // optional uint64 depth = 2;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->depth(), target);
  }

  // optional double last_download_time = 3;
  if (has_last_download_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_download_time(), target);
  }

  // optional .pb.SessionIdMsg excluding_map = 4;
  if (has_excluding_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->excluding_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerDownloadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ReferenceFrameIdMsg frame_id = 1;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame_id());
    }

    // optional uint64 depth = 2;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->depth());
    }

    // optional double last_download_time = 3;
    if (has_last_download_time()) {
      total_size += 1 + 8;
    }

    // optional .pb.SessionIdMsg excluding_map = 4;
    if (has_excluding_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->excluding_map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerDownloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerDownloadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerDownloadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerDownloadRequest::MergeFrom(const ServerDownloadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_id()) {
      mutable_frame_id()->::pb::ReferenceFrameIdMsg::MergeFrom(from.frame_id());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_last_download_time()) {
      set_last_download_time(from.last_download_time());
    }
    if (from.has_excluding_map()) {
      mutable_excluding_map()->::pb::SessionIdMsg::MergeFrom(from.excluding_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerDownloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerDownloadRequest::CopyFrom(const ServerDownloadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerDownloadRequest::IsInitialized() const {

  return true;
}

void ServerDownloadRequest::Swap(ServerDownloadRequest* other) {
  if (other != this) {
    std::swap(frame_id_, other->frame_id_);
    std::swap(depth_, other->depth_);
    std::swap(last_download_time_, other->last_download_time_);
    std::swap(excluding_map_, other->excluding_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerDownloadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerDownloadRequest_descriptor_;
  metadata.reflection = ServerDownloadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerDownloadResponse::kSuccessFieldNumber;
const int ServerDownloadResponse::kTimestampFieldNumber;
const int ServerDownloadResponse::kMapFieldNumber;
#endif  // !_MSC_VER

ServerDownloadResponse::ServerDownloadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerDownloadResponse::InitAsDefaultInstance() {
  map_ = const_cast< ::pb::PlaceMapMsg*>(&::pb::PlaceMapMsg::default_instance());
}

ServerDownloadResponse::ServerDownloadResponse(const ServerDownloadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerDownloadResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  timestamp_ = 0;
  map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerDownloadResponse::~ServerDownloadResponse() {
  SharedDtor();
}

void ServerDownloadResponse::SharedDtor() {
  if (this != default_instance_) {
    delete map_;
  }
}

void ServerDownloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerDownloadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerDownloadResponse_descriptor_;
}

const ServerDownloadResponse& ServerDownloadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SlamServer_2eproto();
  return *default_instance_;
}

ServerDownloadResponse* ServerDownloadResponse::default_instance_ = NULL;

ServerDownloadResponse* ServerDownloadResponse::New() const {
  return new ServerDownloadResponse;
}

void ServerDownloadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    timestamp_ = 0;
    if (has_map()) {
      if (map_ != NULL) map_->::pb::PlaceMapMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerDownloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_map;
        break;
      }

      // optional .pb.PlaceMapMsg map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerDownloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // optional .pb.PlaceMapMsg map = 3;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerDownloadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // optional .pb.PlaceMapMsg map = 3;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerDownloadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional double timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .pb.PlaceMapMsg map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerDownloadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerDownloadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerDownloadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerDownloadResponse::MergeFrom(const ServerDownloadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_map()) {
      mutable_map()->::pb::PlaceMapMsg::MergeFrom(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerDownloadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerDownloadResponse::CopyFrom(const ServerDownloadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerDownloadResponse::IsInitialized() const {

  if (has_map()) {
    if (!this->map().IsInitialized()) return false;
  }
  return true;
}

void ServerDownloadResponse::Swap(ServerDownloadResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerDownloadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerDownloadResponse_descriptor_;
  metadata.reflection = ServerDownloadResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
